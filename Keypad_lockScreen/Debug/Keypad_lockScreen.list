
Keypad_lockScreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008640  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08008810  08008810  00018810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ca8  08008ca8  000202fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008ca8  08008ca8  00018ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cb0  08008cb0  000202fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cb0  08008cb0  00018cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cb4  08008cb4  00018cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002fc  20000000  08008cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  200002fc  08008fb4  000202fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  08008fb4  00020458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018cb2  00000000  00000000  0002032c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d70  00000000  00000000  00038fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f88  00000000  00000000  0003bd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e58  00000000  00000000  0003dcd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022238  00000000  00000000  0003fb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019fa3  00000000  00000000  00061d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4ab3  00000000  00000000  0007bd0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001407be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008fe4  00000000  00000000  00140810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002fc 	.word	0x200002fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080087f8 	.word	0x080087f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000300 	.word	0x20000300
 800020c:	080087f8 	.word	0x080087f8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <LCD_RegisterWrite>:



//==============================================================================
void LCD_RegisterWrite(unsigned char Cmd,unsigned char Data)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	460a      	mov	r2, r1
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	4613      	mov	r3, r2
 80005c2:	71bb      	strb	r3, [r7, #6]
	LCD_CmdWrite(Cmd);
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 f83e 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(Data);
 80005cc:	79bb      	ldrb	r3, [r7, #6]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 f847 	bl	8002662 <LCD_DataWrite>
}  
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <Check_Mem_WR_FIFO_not_Full>:
/******************************************************************************/
/*Sub program area		  													  */
/******************************************************************************/
//==============================================================================
void Check_Mem_WR_FIFO_not_Full(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	1: Memory Write FIFO is full.		*/
	do
	{
		
	}
	while( LCD_StatusRead()&0x80 );
 80005e0:	f002 f84c 	bl	800267c <LCD_StatusRead>
 80005e4:	4603      	mov	r3, r0
 80005e6:	b25b      	sxtb	r3, r3
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	dbf9      	blt.n	80005e0 <Check_Mem_WR_FIFO_not_Full+0x4>
}
 80005ec:	bf00      	nop
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <Check_2D_Busy>:
		
	}
	while( LCD_StatusRead()&0x10 );
}
void Check_2D_Busy(void)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	af00      	add	r7, sp, #0
	do
	{
		
	}
	while( LCD_StatusRead()&0x08 );
 80005f6:	f002 f841 	bl	800267c <LCD_StatusRead>
 80005fa:	4603      	mov	r3, r0
 80005fc:	f003 0308 	and.w	r3, r3, #8
 8000600:	2b00      	cmp	r3, #0
 8000602:	d1f8      	bne.n	80005f6 <Check_2D_Busy+0x4>
}
 8000604:	bf00      	nop
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}

0800060a <Check_SDRAM_Ready>:
void Check_SDRAM_Ready(void)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	b082      	sub	sp, #8
 800060e:	af00      	add	r7, sp, #0
/*	0: SDRAM is not ready for access
	1: SDRAM is ready for access		*/	
	unsigned char temp; 	
	do
	{
		temp=LCD_StatusRead();
 8000610:	f002 f834 	bl	800267c <LCD_StatusRead>
 8000614:	4603      	mov	r3, r0
 8000616:	71fb      	strb	r3, [r7, #7]
	}
	while( (temp&0x04) == 0x00 );
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	f003 0304 	and.w	r3, r3, #4
 800061e:	2b00      	cmp	r3, #0
 8000620:	d0f6      	beq.n	8000610 <Check_SDRAM_Ready+0x6>
}
 8000622:	bf00      	nop
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <Check_Busy_Draw>:
	}
	while( (LCD_StatusRead()&0x01) == 0x00 );
}

void Check_Busy_Draw(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
	unsigned char temp;
	do
	{
		temp=LCD_StatusRead();
 8000632:	f002 f823 	bl	800267c <LCD_StatusRead>
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
	}
	while(temp&0x08);
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	f003 0308 	and.w	r3, r3, #8
 8000640:	2b00      	cmp	r3, #0
 8000642:	d1f6      	bne.n	8000632 <Check_Busy_Draw+0x6>

}
 8000644:	bf00      	nop
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <TFT_16bit>:
	temp &= cClrb4;
    temp |= cSetb3;
	LCD_DataWrite(temp);  
}
void TFT_16bit(void)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	b082      	sub	sp, #8
 8000652:	af00      	add	r7, sp, #0
/*  00b: 24-bits output.
    01b: 18-bits output, unused pins are set as GPIO.
    10b: 16-bits output, unused pins are set as GPIO.
    11b: LVDS, all 24-bits unused output pins are set as GPIO.*/
	unsigned char temp;
	LCD_CmdWrite(0x01);
 8000654:	2001      	movs	r0, #1
 8000656:	f001 fff7 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 800065a:	f002 f81d 	bl	8002698 <LCD_DataRead>
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb4;
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	f043 0310 	orr.w	r3, r3, #16
 8000668:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb3;
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	f023 0308 	bic.w	r3, r3, #8
 8000670:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);  
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	4618      	mov	r0, r3
 8000676:	f001 fff4 	bl	8002662 <LCD_DataWrite>
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <Host_Bus_16bit>:
	temp = LCD_DataRead();
	temp &= cClrb0;
	LCD_DataWrite(temp);
}
void Host_Bus_16bit(void)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	b082      	sub	sp, #8
 8000686:	af00      	add	r7, sp, #0
/*  Parallel Host Data Bus Width Selection
    0: 8-bit Parallel Host Data Bus.
    1: 16-bit Parallel Host Data Bus.*/
	unsigned char temp;
	LCD_CmdWrite(0x01);
 8000688:	2001      	movs	r0, #1
 800068a:	f001 ffdd 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 800068e:	f002 f803 	bl	8002698 <LCD_DataRead>
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb0;
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 ffde 	bl	8002662 <LCD_DataWrite>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <RGB_16b_16bpp>:
	temp |= cSetb7;
    temp &= cClrb6;
	LCD_DataWrite(temp);
}
void RGB_16b_16bpp(void)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
	unsigned char temp;
	LCD_CmdWrite(0x02);
 80006b4:	2002      	movs	r0, #2
 80006b6:	f001 ffc7 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 80006ba:	f001 ffed 	bl	8002698 <LCD_DataRead>
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb7;
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006c8:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb6;
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006d0:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 ffc4 	bl	8002662 <LCD_DataWrite>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <MemWrite_Down_Top_Left_Right>:
	temp |= cSetb2;
    temp &= cClrb1;
	LCD_DataWrite(temp);
}
void MemWrite_Down_Top_Left_Right(void)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b082      	sub	sp, #8
 80006e6:	af00      	add	r7, sp, #0
	unsigned char temp;
	LCD_CmdWrite(0x02);
 80006e8:	2002      	movs	r0, #2
 80006ea:	f001 ffad 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 80006ee:	f001 ffd3 	bl	8002698 <LCD_DataRead>
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb2;
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb1;
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	f043 0302 	orr.w	r3, r3, #2
 8000704:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	4618      	mov	r0, r3
 800070a:	f001 ffaa 	bl	8002662 <LCD_DataWrite>
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <Graphic_Mode>:
	temp = LCD_DataRead();
    temp |= cSetb3;
	LCD_DataWrite(temp);
}
void Graphic_Mode(void)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	b082      	sub	sp, #8
 800071a:	af00      	add	r7, sp, #0
	unsigned char temp;
	LCD_CmdWrite(0x03);
 800071c:	2003      	movs	r0, #3
 800071e:	f001 ff93 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8000722:	f001 ffb9 	bl	8002698 <LCD_DataRead>
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb2;
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	f023 0304 	bic.w	r3, r3, #4
 8000730:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	4618      	mov	r0, r3
 8000736:	f001 ff94 	bl	8002662 <LCD_DataWrite>
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <Text_Mode>:
void Text_Mode(void)
{
 8000742:	b580      	push	{r7, lr}
 8000744:	b082      	sub	sp, #8
 8000746:	af00      	add	r7, sp, #0
	unsigned char temp;
	LCD_CmdWrite(0x03);
 8000748:	2003      	movs	r0, #3
 800074a:	f001 ff7d 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 800074e:	f001 ffa3 	bl	8002698 <LCD_DataRead>
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb2;
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	f043 0304 	orr.w	r3, r3, #4
 800075c:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	4618      	mov	r0, r3
 8000762:	f001 ff7e 	bl	8002662 <LCD_DataWrite>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <Memory_Select_SDRAM>:
void Memory_Select_SDRAM(void)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b082      	sub	sp, #8
 8000772:	af00      	add	r7, sp, #0
	unsigned char temp;
	LCD_CmdWrite(0x03);
 8000774:	2003      	movs	r0, #3
 8000776:	f001 ff67 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 800077a:	f001 ff8d 	bl	8002698 <LCD_DataRead>
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb1;
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	f023 0302 	bic.w	r3, r3, #2
 8000788:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb0;	// B
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	f023 0301 	bic.w	r3, r3, #1
 8000790:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	4618      	mov	r0, r3
 8000796:	f001 ff64 	bl	8002662 <LCD_DataWrite>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <Select_Main_Window_16bpp>:
    temp &= cClrb3;
    temp &= cClrb2;
	LCD_DataWrite(temp);
}
void Select_Main_Window_16bpp(void)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
00b: 8-bpp generic TFT, i.e. 256 colors.
01b: 16-bpp generic TFT, i.e. 65K colors.
1xb: 24-bpp generic TFT, i.e. 1.67M colors.
*/
	unsigned char temp;
	LCD_CmdWrite(0x10);
 80007a8:	2010      	movs	r0, #16
 80007aa:	f001 ff4d 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 80007ae:	f001 ff73 	bl	8002698 <LCD_DataRead>
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb3;
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	f023 0308 	bic.w	r3, r3, #8
 80007bc:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb2;
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f001 ff4a 	bl	8002662 <LCD_DataWrite>
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <PCLK_Falling>:
	temp = LCD_DataRead();
    temp &= cClrb7;
	LCD_DataWrite(temp);
}
void PCLK_Falling(void)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b082      	sub	sp, #8
 80007da:	af00      	add	r7, sp, #0
PCLK Inversion
0: PDAT, DE, HSYNC etc. Drive(/ change) at PCLK falling edge.
1: PDAT, DE, HSYNC etc. Drive(/ change) at PCLK rising edge.
*/
	unsigned char temp;
	LCD_CmdWrite(0x12);
 80007dc:	2012      	movs	r0, #18
 80007de:	f001 ff33 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 80007e2:	f001 ff59 	bl	8002698 <LCD_DataRead>
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb7;
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007f0:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f001 ff34 	bl	8002662 <LCD_DataWrite>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <Display_ON>:
void Display_ON(void)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
0b: Display Off.
1b: Display On.
*/
	unsigned char temp;
	
	LCD_CmdWrite(0x12);
 8000808:	2012      	movs	r0, #18
 800080a:	f001 ff1d 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 800080e:	f001 ff43 	bl	8002698 <LCD_DataRead>
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb6;
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800081c:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	4618      	mov	r0, r3
 8000822:	f001 ff1e 	bl	8002662 <LCD_DataWrite>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <VSCAN_T_to_B>:
	temp = LCD_DataRead();
	temp |= cSetb4;
	LCD_DataWrite(temp);
}
void VSCAN_T_to_B(void)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
1 : From bottom to Top
PIP window will be disabled when VDIR set as 1.
*/
	unsigned char temp;
	
	LCD_CmdWrite(0x12);
 8000834:	2012      	movs	r0, #18
 8000836:	f001 ff07 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 800083a:	f001 ff2d 	bl	8002698 <LCD_DataRead>
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb3;
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	f023 0308 	bic.w	r3, r3, #8
 8000848:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	4618      	mov	r0, r3
 800084e:	f001 ff08 	bl	8002662 <LCD_DataWrite>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <PDATA_Set_RGB>:
	temp = LCD_DataRead();
	temp |= cSetb3;
	LCD_DataWrite(temp);
}
void PDATA_Set_RGB(void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
100b : BRG.
101b : BGR.
*/
	unsigned char temp;
	
	LCD_CmdWrite(0x12);
 8000860:	2012      	movs	r0, #18
 8000862:	f001 fef1 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8000866:	f001 ff17 	bl	8002698 <LCD_DataRead>
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
    temp &=0xf8;
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	f023 0307 	bic.w	r3, r3, #7
 8000874:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	4618      	mov	r0, r3
 800087a:	f001 fef2 	bl	8002662 <LCD_DataWrite>
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <HSYNC_Low_Active>:
}


//[13h]=========================================================================
void HSYNC_Low_Active(void)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
0 : Low active.
1 : High active.
*/
	unsigned char temp;
	
	LCD_CmdWrite(0x13);
 800088c:	2013      	movs	r0, #19
 800088e:	f001 fedb 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8000892:	f001 ff01 	bl	8002698 <LCD_DataRead>
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb7;
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008a0:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f001 fedc 	bl	8002662 <LCD_DataWrite>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <VSYNC_Low_Active>:
	temp = LCD_DataRead();	 
	temp |= cSetb7;
	LCD_DataWrite(temp);
}
void VSYNC_Low_Active(void)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
0 : Low active.
1 : High active.
*/
	unsigned char temp;
	
	LCD_CmdWrite(0x13);
 80008b8:	2013      	movs	r0, #19
 80008ba:	f001 fec5 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 80008be:	f001 feeb 	bl	8002698 <LCD_DataRead>
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb6;	
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80008cc:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f001 fec6 	bl	8002662 <LCD_DataWrite>
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <DE_High_Active>:
	temp = LCD_DataRead();
    temp |= cSetb5;
	LCD_DataWrite(temp);
}
void DE_High_Active(void)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b082      	sub	sp, #8
 80008e2:	af00      	add	r7, sp, #0
0 : High active.
1 : Low active.
*/
	unsigned char temp;
	
	LCD_CmdWrite(0x13);
 80008e4:	2013      	movs	r0, #19
 80008e6:	f001 feaf 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 80008ea:	f001 fed5 	bl	8002698 <LCD_DataRead>
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb5;
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	f023 0320 	bic.w	r3, r3, #32
 80008f8:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f001 feb0 	bl	8002662 <LCD_DataWrite>
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <LCD_HorizontalWidth_VerticalHeight>:
}

//[14h][15h][1Ah][1Bh]=========================================================================

void LCD_HorizontalWidth_VerticalHeight(unsigned short WX,unsigned short HY)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b084      	sub	sp, #16
 800090e:	af00      	add	r7, sp, #0
 8000910:	4603      	mov	r3, r0
 8000912:	460a      	mov	r2, r1
 8000914:	80fb      	strh	r3, [r7, #6]
 8000916:	4613      	mov	r3, r2
 8000918:	80bb      	strh	r3, [r7, #4]
Vertical Display Height(Line) = VDHR + 1
[1Bh] Vertical Display Height Bit[10:8]
Vertical Display Height(Line) = VDHR + 1
*/
	unsigned char temp;
	if(WX<8)
 800091a:	88fb      	ldrh	r3, [r7, #6]
 800091c:	2b07      	cmp	r3, #7
 800091e:	d824      	bhi.n	800096a <LCD_HorizontalWidth_VerticalHeight+0x60>
    {
	LCD_CmdWrite(0x14);
 8000920:	2014      	movs	r0, #20
 8000922:	f001 fe91 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(0x00);
 8000926:	2000      	movs	r0, #0
 8000928:	f001 fe9b 	bl	8002662 <LCD_DataWrite>
    
	LCD_CmdWrite(0x15);
 800092c:	2015      	movs	r0, #21
 800092e:	f001 fe8b 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(WX);
 8000932:	88fb      	ldrh	r3, [r7, #6]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	4618      	mov	r0, r3
 8000938:	f001 fe93 	bl	8002662 <LCD_DataWrite>
    
    temp=HY-1;
 800093c:	88bb      	ldrh	r3, [r7, #4]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	3b01      	subs	r3, #1
 8000942:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x1A);
 8000944:	201a      	movs	r0, #26
 8000946:	f001 fe7f 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(temp);
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	4618      	mov	r0, r3
 800094e:	f001 fe88 	bl	8002662 <LCD_DataWrite>
	    
	temp=(HY-1)>>8;
 8000952:	88bb      	ldrh	r3, [r7, #4]
 8000954:	3b01      	subs	r3, #1
 8000956:	121b      	asrs	r3, r3, #8
 8000958:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x1B);
 800095a:	201b      	movs	r0, #27
 800095c:	f001 fe74 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(temp);
 8000960:	7bfb      	ldrb	r3, [r7, #15]
 8000962:	4618      	mov	r0, r3
 8000964:	f001 fe7d 	bl	8002662 <LCD_DataWrite>
	    
	temp=(HY-1)>>8;
	LCD_CmdWrite(0x1B);
	LCD_DataWrite(temp);
	}
}
 8000968:	e02e      	b.n	80009c8 <LCD_HorizontalWidth_VerticalHeight+0xbe>
    temp=(WX/8)-1;
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	08db      	lsrs	r3, r3, #3
 800096e:	b29b      	uxth	r3, r3
 8000970:	b2db      	uxtb	r3, r3
 8000972:	3b01      	subs	r3, #1
 8000974:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x14);
 8000976:	2014      	movs	r0, #20
 8000978:	f001 fe66 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(temp);
 800097c:	7bfb      	ldrb	r3, [r7, #15]
 800097e:	4618      	mov	r0, r3
 8000980:	f001 fe6f 	bl	8002662 <LCD_DataWrite>
    temp=WX%8;
 8000984:	88fb      	ldrh	r3, [r7, #6]
 8000986:	b2db      	uxtb	r3, r3
 8000988:	f003 0307 	and.w	r3, r3, #7
 800098c:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x15);
 800098e:	2015      	movs	r0, #21
 8000990:	f001 fe5a 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(temp);
 8000994:	7bfb      	ldrb	r3, [r7, #15]
 8000996:	4618      	mov	r0, r3
 8000998:	f001 fe63 	bl	8002662 <LCD_DataWrite>
    temp=HY-1;
 800099c:	88bb      	ldrh	r3, [r7, #4]
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	3b01      	subs	r3, #1
 80009a2:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x1A);
 80009a4:	201a      	movs	r0, #26
 80009a6:	f001 fe4f 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(temp);
 80009aa:	7bfb      	ldrb	r3, [r7, #15]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f001 fe58 	bl	8002662 <LCD_DataWrite>
	temp=(HY-1)>>8;
 80009b2:	88bb      	ldrh	r3, [r7, #4]
 80009b4:	3b01      	subs	r3, #1
 80009b6:	121b      	asrs	r3, r3, #8
 80009b8:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x1B);
 80009ba:	201b      	movs	r0, #27
 80009bc:	f001 fe44 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(temp);
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f001 fe4d 	bl	8002662 <LCD_DataWrite>
}
 80009c8:	bf00      	nop
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <LCD_Horizontal_Non_Display>:
//[16h][17h]=========================================================================
void LCD_Horizontal_Non_Display(unsigned short WX)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	80fb      	strh	r3, [r7, #6]
period; it is used to support the SYNC mode panel. Each level of
this modulation is 1-pixel.
Horizontal non-display period(pixels) = (HNDR + 1) * 8 + HNDFTR
*/
	unsigned char temp;
	if(WX<8)
 80009da:	88fb      	ldrh	r3, [r7, #6]
 80009dc:	2b07      	cmp	r3, #7
 80009de:	d80e      	bhi.n	80009fe <LCD_Horizontal_Non_Display+0x2e>
	{
	LCD_CmdWrite(0x16);
 80009e0:	2016      	movs	r0, #22
 80009e2:	f001 fe31 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(0x00);
 80009e6:	2000      	movs	r0, #0
 80009e8:	f001 fe3b 	bl	8002662 <LCD_DataWrite>
    
	LCD_CmdWrite(0x17);
 80009ec:	2017      	movs	r0, #23
 80009ee:	f001 fe2b 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(WX);
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	4618      	mov	r0, r3
 80009f8:	f001 fe33 	bl	8002662 <LCD_DataWrite>
    
    temp=WX%8;
	LCD_CmdWrite(0x17);
	LCD_DataWrite(temp);
	}	
}
 80009fc:	e018      	b.n	8000a30 <LCD_Horizontal_Non_Display+0x60>
    temp=(WX/8)-1;
 80009fe:	88fb      	ldrh	r3, [r7, #6]
 8000a00:	08db      	lsrs	r3, r3, #3
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	3b01      	subs	r3, #1
 8000a08:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x16);
 8000a0a:	2016      	movs	r0, #22
 8000a0c:	f001 fe1c 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(temp);
 8000a10:	7bfb      	ldrb	r3, [r7, #15]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f001 fe25 	bl	8002662 <LCD_DataWrite>
    temp=WX%8;
 8000a18:	88fb      	ldrh	r3, [r7, #6]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	f003 0307 	and.w	r3, r3, #7
 8000a20:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x17);
 8000a22:	2017      	movs	r0, #23
 8000a24:	f001 fe10 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(temp);
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f001 fe19 	bl	8002662 <LCD_DataWrite>
}
 8000a30:	bf00      	nop
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <LCD_HSYNC_Start_Position>:
//[18h]=========================================================================
void LCD_HSYNC_Start_Position(unsigned short WX)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	80fb      	strh	r3, [r7, #6]
beginning of HSYNC. Each level of this modulation is 8-pixel.
Also called front porch.
HSYNC Start Position(pixels) = (HSTR + 1)x8
*/
	unsigned char temp;
	if(WX<8)
 8000a42:	88fb      	ldrh	r3, [r7, #6]
 8000a44:	2b07      	cmp	r3, #7
 8000a46:	d806      	bhi.n	8000a56 <LCD_HSYNC_Start_Position+0x1e>
	{
	LCD_CmdWrite(0x18);
 8000a48:	2018      	movs	r0, #24
 8000a4a:	f001 fdfd 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(0x00);
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f001 fe07 	bl	8002662 <LCD_DataWrite>
	{
    temp=(WX/8)-1;
	LCD_CmdWrite(0x18);
	LCD_DataWrite(temp);	
	}
}
 8000a54:	e00c      	b.n	8000a70 <LCD_HSYNC_Start_Position+0x38>
    temp=(WX/8)-1;
 8000a56:	88fb      	ldrh	r3, [r7, #6]
 8000a58:	08db      	lsrs	r3, r3, #3
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x18);
 8000a62:	2018      	movs	r0, #24
 8000a64:	f001 fdf0 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(temp);	
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f001 fdf9 	bl	8002662 <LCD_DataWrite>
}
 8000a70:	bf00      	nop
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <LCD_HSYNC_Pulse_Width>:
//[19h]=========================================================================
void LCD_HSYNC_Pulse_Width(unsigned short WX)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	80fb      	strh	r3, [r7, #6]
[19h] HSYNC Pulse Width(HPW) [4:0]
The period width of HSYNC.
HSYNC Pulse Width(pixels) = (HPW + 1)x8
*/
	unsigned char temp;
	if(WX<8)
 8000a82:	88fb      	ldrh	r3, [r7, #6]
 8000a84:	2b07      	cmp	r3, #7
 8000a86:	d806      	bhi.n	8000a96 <LCD_HSYNC_Pulse_Width+0x1e>
	{
	LCD_CmdWrite(0x19);
 8000a88:	2019      	movs	r0, #25
 8000a8a:	f001 fddd 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(0x00);
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f001 fde7 	bl	8002662 <LCD_DataWrite>
	{
    temp=(WX/8)-1;
	LCD_CmdWrite(0x19);
	LCD_DataWrite(temp);	
	}
}
 8000a94:	e00c      	b.n	8000ab0 <LCD_HSYNC_Pulse_Width+0x38>
    temp=(WX/8)-1;
 8000a96:	88fb      	ldrh	r3, [r7, #6]
 8000a98:	08db      	lsrs	r3, r3, #3
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x19);
 8000aa2:	2019      	movs	r0, #25
 8000aa4:	f001 fdd0 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(temp);	
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f001 fdd9 	bl	8002662 <LCD_DataWrite>
}
 8000ab0:	bf00      	nop
 8000ab2:	3710      	adds	r7, #16
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <LCD_Vertical_Non_Display>:
//[1Ch][1Dh]=========================================================================
void LCD_Vertical_Non_Display(unsigned short HY)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	80fb      	strh	r3, [r7, #6]

[1Dh] Vertical Non-Display Period Bit[9:8]
Vertical Non-Display Period(Line) = (VNDR + 1)
*/
	unsigned char temp;
    temp=HY-1;
 8000ac2:	88fb      	ldrh	r3, [r7, #6]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x1C);
 8000aca:	201c      	movs	r0, #28
 8000acc:	f001 fdbc 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(temp);
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f001 fdc5 	bl	8002662 <LCD_DataWrite>

	LCD_CmdWrite(0x1D);
 8000ad8:	201d      	movs	r0, #29
 8000ada:	f001 fdb5 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(temp>>8);
 8000ade:	7bfb      	ldrb	r3, [r7, #15]
 8000ae0:	121b      	asrs	r3, r3, #8
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f001 fdbc 	bl	8002662 <LCD_DataWrite>
}
 8000aea:	bf00      	nop
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <LCD_VSYNC_Start_Position>:
//[1Eh]=========================================================================
void LCD_VSYNC_Start_Position(unsigned short HY)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b084      	sub	sp, #16
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	4603      	mov	r3, r0
 8000afa:	80fb      	strh	r3, [r7, #6]
[1Eh] VSYNC Start Position[7:0]
The starting position from the end of display area to the beginning of VSYNC.
VSYNC Start Position(Line) = (VSTR + 1)
*/
	unsigned char temp;
    temp=HY-1;
 8000afc:	88fb      	ldrh	r3, [r7, #6]
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	3b01      	subs	r3, #1
 8000b02:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x1E);
 8000b04:	201e      	movs	r0, #30
 8000b06:	f001 fd9f 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(temp);
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f001 fda8 	bl	8002662 <LCD_DataWrite>
}
 8000b12:	bf00      	nop
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <LCD_VSYNC_Pulse_Width>:
//[1Fh]=========================================================================
void LCD_VSYNC_Pulse_Width(unsigned short HY)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b084      	sub	sp, #16
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	4603      	mov	r3, r0
 8000b22:	80fb      	strh	r3, [r7, #6]
[1Fh] VSYNC Pulse Width[5:0]
The pulse width of VSYNC in lines.
VSYNC Pulse Width(Line) = (VPWR + 1)
*/
	unsigned char temp;
    temp=HY-1;
 8000b24:	88fb      	ldrh	r3, [r7, #6]
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	73fb      	strb	r3, [r7, #15]
	LCD_CmdWrite(0x1F);
 8000b2c:	201f      	movs	r0, #31
 8000b2e:	f001 fd8b 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(temp);
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f001 fd94 	bl	8002662 <LCD_DataWrite>
}
 8000b3a:	bf00      	nop
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <Main_Image_Start_Address>:
//[20h][21h][22h][23h]=========================================================================
void Main_Image_Start_Address(unsigned long Addr)	
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b082      	sub	sp, #8
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
[20h] Main Image Start Address[7:2]
[21h] Main Image Start Address[15:8]
[22h] Main Image Start Address [23:16]
[23h] Main Image Start Address [31:24]
*/
	LCD_RegisterWrite(0x20,Addr);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	4619      	mov	r1, r3
 8000b50:	2020      	movs	r0, #32
 8000b52:	f7ff fd2f 	bl	80005b4 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x21,Addr>>8);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	0a1b      	lsrs	r3, r3, #8
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	2021      	movs	r0, #33	; 0x21
 8000b60:	f7ff fd28 	bl	80005b4 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x22,Addr>>16);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	0c1b      	lsrs	r3, r3, #16
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	2022      	movs	r0, #34	; 0x22
 8000b6e:	f7ff fd21 	bl	80005b4 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x23,Addr>>24);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	0e1b      	lsrs	r3, r3, #24
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	4619      	mov	r1, r3
 8000b7a:	2023      	movs	r0, #35	; 0x23
 8000b7c:	f7ff fd1a 	bl	80005b4 <LCD_RegisterWrite>
}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <Main_Image_Width>:
//[24h][25h]=========================================================================
void Main_Image_Width(unsigned short WX)	
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	80fb      	strh	r3, [r7, #6]
[25h] Main Image Width [12:8]
Unit: Pixel.
It must be divisible by 4. MIW Bit [1:0] tie to ��0�� internally.
The value is physical pixel number. Maximum value is 8188 pixels
*/
	LCD_RegisterWrite(0x24,WX);
 8000b92:	88fb      	ldrh	r3, [r7, #6]
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	4619      	mov	r1, r3
 8000b98:	2024      	movs	r0, #36	; 0x24
 8000b9a:	f7ff fd0b 	bl	80005b4 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x25,WX>>8);
 8000b9e:	88fb      	ldrh	r3, [r7, #6]
 8000ba0:	0a1b      	lsrs	r3, r3, #8
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	2025      	movs	r0, #37	; 0x25
 8000baa:	f7ff fd03 	bl	80005b4 <LCD_RegisterWrite>
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <Main_Window_Start_XY>:
//[26h][27h][28h][29h]=========================================================================
void Main_Window_Start_XY(unsigned short WX,unsigned short HY)	
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	460a      	mov	r2, r1
 8000bc0:	80fb      	strh	r3, [r7, #6]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	80bb      	strh	r3, [r7, #4]
[29h] Main Window Upper-Left corner Y-coordination [12:8]
Reference Main Image coordination.
Unit: Pixel
Range is between 0 and 8191.
*/
	LCD_RegisterWrite(0x26,WX);
 8000bc6:	88fb      	ldrh	r3, [r7, #6]
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	4619      	mov	r1, r3
 8000bcc:	2026      	movs	r0, #38	; 0x26
 8000bce:	f7ff fcf1 	bl	80005b4 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x27,WX>>8);
 8000bd2:	88fb      	ldrh	r3, [r7, #6]
 8000bd4:	0a1b      	lsrs	r3, r3, #8
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	4619      	mov	r1, r3
 8000bdc:	2027      	movs	r0, #39	; 0x27
 8000bde:	f7ff fce9 	bl	80005b4 <LCD_RegisterWrite>

	LCD_RegisterWrite(0x28,HY);
 8000be2:	88bb      	ldrh	r3, [r7, #4]
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	4619      	mov	r1, r3
 8000be8:	2028      	movs	r0, #40	; 0x28
 8000bea:	f7ff fce3 	bl	80005b4 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x29,HY>>8);
 8000bee:	88bb      	ldrh	r3, [r7, #4]
 8000bf0:	0a1b      	lsrs	r3, r3, #8
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	2029      	movs	r0, #41	; 0x29
 8000bfa:	f7ff fcdb 	bl	80005b4 <LCD_RegisterWrite>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <Canvas_Image_Start_address>:
*/	
	LCD_RegisterWrite(0x45,temp);
}
//[50h][51h][52h][53h]=========================================================================
void Canvas_Image_Start_address(unsigned long Addr)	
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
[50h] Start address of Canvas [7:0]
[51h] Start address of Canvas [15:8]
[52h] Start address of Canvas [23:16]
[53h] Start address of Canvas [31:24]
*/
	LCD_RegisterWrite(0x50,Addr);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	4619      	mov	r1, r3
 8000c14:	2050      	movs	r0, #80	; 0x50
 8000c16:	f7ff fccd 	bl	80005b4 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x51,Addr>>8);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	0a1b      	lsrs	r3, r3, #8
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	4619      	mov	r1, r3
 8000c22:	2051      	movs	r0, #81	; 0x51
 8000c24:	f7ff fcc6 	bl	80005b4 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x52,Addr>>16);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	0c1b      	lsrs	r3, r3, #16
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	4619      	mov	r1, r3
 8000c30:	2052      	movs	r0, #82	; 0x52
 8000c32:	f7ff fcbf 	bl	80005b4 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x53,Addr>>24);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	0e1b      	lsrs	r3, r3, #24
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	2053      	movs	r0, #83	; 0x53
 8000c40:	f7ff fcb8 	bl	80005b4 <LCD_RegisterWrite>
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <Canvas_image_width>:
//[54h][55h]=========================================================================
void Canvas_image_width(unsigned short WX)	
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	80fb      	strh	r3, [r7, #6]
/*
[54h] Canvas image width [7:2]
[55h] Canvas image width [12:8]
*/
	LCD_RegisterWrite(0x54,WX);
 8000c56:	88fb      	ldrh	r3, [r7, #6]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	2054      	movs	r0, #84	; 0x54
 8000c5e:	f7ff fca9 	bl	80005b4 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x55,WX>>8);
 8000c62:	88fb      	ldrh	r3, [r7, #6]
 8000c64:	0a1b      	lsrs	r3, r3, #8
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	2055      	movs	r0, #85	; 0x55
 8000c6e:	f7ff fca1 	bl	80005b4 <LCD_RegisterWrite>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <Active_Window_XY>:
//[56h][57h][58h][59h]=========================================================================
void Active_Window_XY(unsigned short WX,unsigned short HY)	
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	4603      	mov	r3, r0
 8000c82:	460a      	mov	r2, r1
 8000c84:	80fb      	strh	r3, [r7, #6]
 8000c86:	4613      	mov	r3, r2
 8000c88:	80bb      	strh	r3, [r7, #4]
[56h] Active Window Upper-Left corner X-coordination [7:0]
[57h] Active Window Upper-Left corner X-coordination [12:8]
[58h] Active Window Upper-Left corner Y-coordination [7:0]
[59h] Active Window Upper-Left corner Y-coordination [12:8]
*/
	LCD_RegisterWrite(0x56,WX);
 8000c8a:	88fb      	ldrh	r3, [r7, #6]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	4619      	mov	r1, r3
 8000c90:	2056      	movs	r0, #86	; 0x56
 8000c92:	f7ff fc8f 	bl	80005b4 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x57,WX>>8);
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	0a1b      	lsrs	r3, r3, #8
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	2057      	movs	r0, #87	; 0x57
 8000ca2:	f7ff fc87 	bl	80005b4 <LCD_RegisterWrite>
	
	LCD_RegisterWrite(0x58,HY);
 8000ca6:	88bb      	ldrh	r3, [r7, #4]
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	4619      	mov	r1, r3
 8000cac:	2058      	movs	r0, #88	; 0x58
 8000cae:	f7ff fc81 	bl	80005b4 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x59,HY>>8);
 8000cb2:	88bb      	ldrh	r3, [r7, #4]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	4619      	mov	r1, r3
 8000cbc:	2059      	movs	r0, #89	; 0x59
 8000cbe:	f7ff fc79 	bl	80005b4 <LCD_RegisterWrite>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <Active_Window_WH>:
//[5Ah][5Bh][5Ch][5Dh]=========================================================================
void Active_Window_WH(unsigned short WX,unsigned short HY)	
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	460a      	mov	r2, r1
 8000cd4:	80fb      	strh	r3, [r7, #6]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	80bb      	strh	r3, [r7, #4]
[5Ah] Width of Active Window [7:0]
[5Bh] Width of Active Window [12:8]
[5Ch] Height of Active Window [7:0]
[5Dh] Height of Active Window [12:8]
*/
	LCD_RegisterWrite(0x5A,WX);
 8000cda:	88fb      	ldrh	r3, [r7, #6]
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	4619      	mov	r1, r3
 8000ce0:	205a      	movs	r0, #90	; 0x5a
 8000ce2:	f7ff fc67 	bl	80005b4 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x5B,WX>>8);
 8000ce6:	88fb      	ldrh	r3, [r7, #6]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	4619      	mov	r1, r3
 8000cf0:	205b      	movs	r0, #91	; 0x5b
 8000cf2:	f7ff fc5f 	bl	80005b4 <LCD_RegisterWrite>
 
 	LCD_RegisterWrite(0x5C,HY);
 8000cf6:	88bb      	ldrh	r3, [r7, #4]
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	205c      	movs	r0, #92	; 0x5c
 8000cfe:	f7ff fc59 	bl	80005b4 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x5D,HY>>8);
 8000d02:	88bb      	ldrh	r3, [r7, #4]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	205d      	movs	r0, #93	; 0x5d
 8000d0e:	f7ff fc51 	bl	80005b4 <LCD_RegisterWrite>
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <Memory_XY_Mode>:
	temp = LCD_DataRead();
	temp |= cSetb3;
	LCD_DataWrite(temp);
}
void Memory_XY_Mode(void)	
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
0: Block mode (X-Y coordination addressing)
1: linear mode
*/
	unsigned char temp;

	LCD_CmdWrite(0x5E);
 8000d20:	205e      	movs	r0, #94	; 0x5e
 8000d22:	f001 fc91 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8000d26:	f001 fcb7 	bl	8002698 <LCD_DataRead>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb2;
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	f023 0304 	bic.w	r3, r3, #4
 8000d34:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f001 fc92 	bl	8002662 <LCD_DataWrite>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <Memory_16bpp_Mode>:
	temp &= cClrb1;
	temp &= cClrb0;
	LCD_DataWrite(temp);
}
void Memory_16bpp_Mode(void)	
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
X0: 8-bits memory data read/write.
X1: 16-bits memory data read/write
*/
	unsigned char temp;

	LCD_CmdWrite(0x5E);
 8000d4c:	205e      	movs	r0, #94	; 0x5e
 8000d4e:	f001 fc7b 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8000d52:	f001 fca1 	bl	8002698 <LCD_DataRead>
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb1;
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	f023 0302 	bic.w	r3, r3, #2
 8000d60:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb0;
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f001 fc78 	bl	8002662 <LCD_DataWrite>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <Goto_Text_XY>:
}


//[63h][64h][65h][66h]=========================================================================
void Goto_Text_XY(unsigned short WX,unsigned short HY)	
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	4603      	mov	r3, r0
 8000d82:	460a      	mov	r2, r1
 8000d84:	80fb      	strh	r3, [r7, #6]
 8000d86:	4613      	mov	r3, r2
 8000d88:	80bb      	strh	r3, [r7, #4]
Text Write X-coordination [12:8][7:0]
Text Write Y-coordination [12:8][7:0]
Reference Canvas image coordination.
Unit: Pixel
*/
	LCD_RegisterWrite(0x63,WX);
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	4619      	mov	r1, r3
 8000d90:	2063      	movs	r0, #99	; 0x63
 8000d92:	f7ff fc0f 	bl	80005b4 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x64,WX>>8);
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	4619      	mov	r1, r3
 8000da0:	2064      	movs	r0, #100	; 0x64
 8000da2:	f7ff fc07 	bl	80005b4 <LCD_RegisterWrite>
	
	LCD_RegisterWrite(0x65,HY);
 8000da6:	88bb      	ldrh	r3, [r7, #4]
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	4619      	mov	r1, r3
 8000dac:	2065      	movs	r0, #101	; 0x65
 8000dae:	f7ff fc01 	bl	80005b4 <LCD_RegisterWrite>
	LCD_RegisterWrite(0x66,HY>>8);
 8000db2:	88bb      	ldrh	r3, [r7, #4]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	4619      	mov	r1, r3
 8000dbc:	2066      	movs	r0, #102	; 0x66
 8000dbe:	f7ff fbf9 	bl	80005b4 <LCD_RegisterWrite>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <Start_Line>:
[bit1]Draw Triangle or Line Select Signal
0 : Draw Line
1 : Draw Triangle
*/
void Start_Line(void)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	af00      	add	r7, sp, #0
	LCD_CmdWrite(0x67);
 8000dce:	2067      	movs	r0, #103	; 0x67
 8000dd0:	f001 fc3a 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(0x80);
 8000dd4:	2080      	movs	r0, #128	; 0x80
 8000dd6:	f001 fc44 	bl	8002662 <LCD_DataWrite>
	Check_Busy_Draw();
 8000dda:	f7ff fc27 	bl	800062c <Check_Busy_Draw>
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <Line_Start_XY>:
	Check_Busy_Draw();
}
//[68h][69h][6Ah][6Bh]=========================================================================
//�����
void Line_Start_XY(unsigned short WX,unsigned short HY)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	460a      	mov	r2, r1
 8000dec:	80fb      	strh	r3, [r7, #6]
 8000dee:	4613      	mov	r3, r2
 8000df0:	80bb      	strh	r3, [r7, #4]
[68h] Draw Line/Square/Triangle Start X-coordination [7:0]
[69h] Draw Line/Square/Triangle Start X-coordination [12:8]
[6Ah] Draw Line/Square/Triangle Start Y-coordination [7:0]
[6Bh] Draw Line/Square/Triangle Start Y-coordination [12:8]
*/
	LCD_CmdWrite(0x68);
 8000df2:	2068      	movs	r0, #104	; 0x68
 8000df4:	f001 fc28 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(WX);
 8000df8:	88fb      	ldrh	r3, [r7, #6]
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f001 fc30 	bl	8002662 <LCD_DataWrite>

	LCD_CmdWrite(0x69);
 8000e02:	2069      	movs	r0, #105	; 0x69
 8000e04:	f001 fc20 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(WX>>8);
 8000e08:	88fb      	ldrh	r3, [r7, #6]
 8000e0a:	0a1b      	lsrs	r3, r3, #8
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	4618      	mov	r0, r3
 8000e12:	f001 fc26 	bl	8002662 <LCD_DataWrite>

	LCD_CmdWrite(0x6A);
 8000e16:	206a      	movs	r0, #106	; 0x6a
 8000e18:	f001 fc16 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(HY);
 8000e1c:	88bb      	ldrh	r3, [r7, #4]
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	4618      	mov	r0, r3
 8000e22:	f001 fc1e 	bl	8002662 <LCD_DataWrite>

	LCD_CmdWrite(0x6B);
 8000e26:	206b      	movs	r0, #107	; 0x6b
 8000e28:	f001 fc0e 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(HY>>8);
 8000e2c:	88bb      	ldrh	r3, [r7, #4]
 8000e2e:	0a1b      	lsrs	r3, r3, #8
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	4618      	mov	r0, r3
 8000e36:	f001 fc14 	bl	8002662 <LCD_DataWrite>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <Line_End_XY>:
//[6Ch][6Dh][6Eh][6Fh]=========================================================================
//���յ�
void Line_End_XY(unsigned short WX,unsigned short HY)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	460a      	mov	r2, r1
 8000e4c:	80fb      	strh	r3, [r7, #6]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	80bb      	strh	r3, [r7, #4]
[6Ch] Draw Line/Square/Triangle End X-coordination [7:0]
[6Dh] Draw Line/Square/Triangle End X-coordination [12:8]
[6Eh] Draw Line/Square/Triangle End Y-coordination [7:0]
[6Fh] Draw Line/Square/Triangle End Y-coordination [12:8]
*/
	LCD_CmdWrite(0x6C);
 8000e52:	206c      	movs	r0, #108	; 0x6c
 8000e54:	f001 fbf8 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(WX);
 8000e58:	88fb      	ldrh	r3, [r7, #6]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f001 fc00 	bl	8002662 <LCD_DataWrite>

	LCD_CmdWrite(0x6D);
 8000e62:	206d      	movs	r0, #109	; 0x6d
 8000e64:	f001 fbf0 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(WX>>8);
 8000e68:	88fb      	ldrh	r3, [r7, #6]
 8000e6a:	0a1b      	lsrs	r3, r3, #8
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	4618      	mov	r0, r3
 8000e72:	f001 fbf6 	bl	8002662 <LCD_DataWrite>

	LCD_CmdWrite(0x6E);
 8000e76:	206e      	movs	r0, #110	; 0x6e
 8000e78:	f001 fbe6 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(HY);
 8000e7c:	88bb      	ldrh	r3, [r7, #4]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	4618      	mov	r0, r3
 8000e82:	f001 fbee 	bl	8002662 <LCD_DataWrite>

	LCD_CmdWrite(0x6F);
 8000e86:	206f      	movs	r0, #111	; 0x6f
 8000e88:	f001 fbde 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(HY>>8);
 8000e8c:	88bb      	ldrh	r3, [r7, #4]
 8000e8e:	0a1b      	lsrs	r3, r3, #8
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	4618      	mov	r0, r3
 8000e96:	f001 fbe4 	bl	8002662 <LCD_DataWrite>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <Square_Start_XY>:
	LCD_CmdWrite(0x73);
	LCD_DataWrite(HY>>8);
}
//��_�I
void Square_Start_XY(unsigned short WX,unsigned short HY)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	460a      	mov	r2, r1
 8000eac:	80fb      	strh	r3, [r7, #6]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	80bb      	strh	r3, [r7, #4]
[68h] Draw Line/Square/Triangle Start X-coordination [7:0]
[69h] Draw Line/Square/Triangle Start X-coordination [12:8]
[6Ah] Draw Line/Square/Triangle Start Y-coordination [7:0]
[6Bh] Draw Line/Square/Triangle Start Y-coordination [12:8]
*/
	LCD_CmdWrite(0x68);
 8000eb2:	2068      	movs	r0, #104	; 0x68
 8000eb4:	f001 fbc8 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(WX);
 8000eb8:	88fb      	ldrh	r3, [r7, #6]
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f001 fbd0 	bl	8002662 <LCD_DataWrite>

	LCD_CmdWrite(0x69);
 8000ec2:	2069      	movs	r0, #105	; 0x69
 8000ec4:	f001 fbc0 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(WX>>8);
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	0a1b      	lsrs	r3, r3, #8
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f001 fbc6 	bl	8002662 <LCD_DataWrite>

	LCD_CmdWrite(0x6A);
 8000ed6:	206a      	movs	r0, #106	; 0x6a
 8000ed8:	f001 fbb6 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(HY);
 8000edc:	88bb      	ldrh	r3, [r7, #4]
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f001 fbbe 	bl	8002662 <LCD_DataWrite>

	LCD_CmdWrite(0x6B);
 8000ee6:	206b      	movs	r0, #107	; 0x6b
 8000ee8:	f001 fbae 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(HY>>8);
 8000eec:	88bb      	ldrh	r3, [r7, #4]
 8000eee:	0a1b      	lsrs	r3, r3, #8
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f001 fbb4 	bl	8002662 <LCD_DataWrite>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <Square_End_XY>:
//����I
void Square_End_XY(unsigned short WX,unsigned short HY)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4603      	mov	r3, r0
 8000f0a:	460a      	mov	r2, r1
 8000f0c:	80fb      	strh	r3, [r7, #6]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	80bb      	strh	r3, [r7, #4]
[6Ch] Draw Line/Square/Triangle End X-coordination [7:0]
[6Dh] Draw Line/Square/Triangle End X-coordination [12:8]
[6Eh] Draw Line/Square/Triangle End Y-coordination [7:0]
[6Fh] Draw Line/Square/Triangle End Y-coordination [12:8]
*/
	LCD_CmdWrite(0x6C);
 8000f12:	206c      	movs	r0, #108	; 0x6c
 8000f14:	f001 fb98 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(WX);
 8000f18:	88fb      	ldrh	r3, [r7, #6]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f001 fba0 	bl	8002662 <LCD_DataWrite>

	LCD_CmdWrite(0x6D);
 8000f22:	206d      	movs	r0, #109	; 0x6d
 8000f24:	f001 fb90 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(WX>>8);
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	0a1b      	lsrs	r3, r3, #8
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	4618      	mov	r0, r3
 8000f32:	f001 fb96 	bl	8002662 <LCD_DataWrite>

	LCD_CmdWrite(0x6E);
 8000f36:	206e      	movs	r0, #110	; 0x6e
 8000f38:	f001 fb86 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(HY);
 8000f3c:	88bb      	ldrh	r3, [r7, #4]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	4618      	mov	r0, r3
 8000f42:	f001 fb8e 	bl	8002662 <LCD_DataWrite>

	LCD_CmdWrite(0x6F);
 8000f46:	206f      	movs	r0, #111	; 0x6f
 8000f48:	f001 fb7e 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(HY>>8);
 8000f4c:	88bb      	ldrh	r3, [r7, #4]
 8000f4e:	0a1b      	lsrs	r3, r3, #8
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	4618      	mov	r0, r3
 8000f56:	f001 fb84 	bl	8002662 <LCD_DataWrite>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <Start_Circle_or_Ellipse_Fill>:
	LCD_CmdWrite(0x76);
	LCD_DataWrite(0x80);//B1000_XXXX
	Check_Busy_Draw();	
}
void Start_Circle_or_Ellipse_Fill(void)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	af00      	add	r7, sp, #0
	LCD_CmdWrite(0x76);
 8000f66:	2076      	movs	r0, #118	; 0x76
 8000f68:	f001 fb6e 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(0xC0);//B1100_XXXX
 8000f6c:	20c0      	movs	r0, #192	; 0xc0
 8000f6e:	f001 fb78 	bl	8002662 <LCD_DataWrite>
	Check_Busy_Draw();	
 8000f72:	f7ff fb5b 	bl	800062c <Check_Busy_Draw>
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <Start_Left_Up_Curve_Fill>:
	LCD_CmdWrite(0x76);
	LCD_DataWrite(0xD0);//B1101_XX00
	Check_Busy_Draw();
}
void Start_Left_Up_Curve_Fill(void)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	af00      	add	r7, sp, #0
	LCD_CmdWrite(0x76);
 8000f7e:	2076      	movs	r0, #118	; 0x76
 8000f80:	f001 fb62 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(0xD1);//B1101_XX01
 8000f84:	20d1      	movs	r0, #209	; 0xd1
 8000f86:	f001 fb6c 	bl	8002662 <LCD_DataWrite>
	Check_Busy_Draw();
 8000f8a:	f7ff fb4f 	bl	800062c <Check_Busy_Draw>
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <Start_Square_Fill>:
	LCD_CmdWrite(0x76);
	LCD_DataWrite(0xA0);//B1010_XXXX
	Check_Busy_Draw();
}
void Start_Square_Fill(void)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	af00      	add	r7, sp, #0
	LCD_CmdWrite(0x76);
 8000f96:	2076      	movs	r0, #118	; 0x76
 8000f98:	f001 fb56 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(0xE0);//B1110_XXXX
 8000f9c:	20e0      	movs	r0, #224	; 0xe0
 8000f9e:	f001 fb60 	bl	8002662 <LCD_DataWrite>
	Check_Busy_Draw();
 8000fa2:	f7ff fb43 	bl	800062c <Check_Busy_Draw>
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <Start_Circle_Square_Fill>:
	LCD_CmdWrite(0x76);
	LCD_DataWrite(0xB0);//B1011_XXXX
	Check_Busy_Draw();	
}
void Start_Circle_Square_Fill(void)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	af00      	add	r7, sp, #0
	LCD_CmdWrite(0x76);
 8000fae:	2076      	movs	r0, #118	; 0x76
 8000fb0:	f001 fb4a 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(0xF0);//B1111_XXXX
 8000fb4:	20f0      	movs	r0, #240	; 0xf0
 8000fb6:	f001 fb54 	bl	8002662 <LCD_DataWrite>
	Check_Busy_Draw();	
 8000fba:	f7ff fb37 	bl	800062c <Check_Busy_Draw>
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <Circle_Center_XY>:
//[77h]~[7Eh]=========================================================================
//�ꤤ��
void Circle_Center_XY(unsigned short WX,unsigned short HY)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	4603      	mov	r3, r0
 8000fca:	460a      	mov	r2, r1
 8000fcc:	80fb      	strh	r3, [r7, #6]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	80bb      	strh	r3, [r7, #4]
[7Bh] Draw Circle/Ellipse/Circle Square Center X-coordination [7:0]
[7Ch] Draw Circle/Ellipse/Circle Square Center X-coordination [12:8]
[7Dh] Draw Circle/Ellipse/Circle Square Center Y-coordination [7:0]
[7Eh] Draw Circle/Ellipse/Circle Square Center Y-coordination [12:8]
*/
	LCD_CmdWrite(0x7B);
 8000fd2:	207b      	movs	r0, #123	; 0x7b
 8000fd4:	f001 fb38 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(WX);
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f001 fb40 	bl	8002662 <LCD_DataWrite>

	LCD_CmdWrite(0x7C);
 8000fe2:	207c      	movs	r0, #124	; 0x7c
 8000fe4:	f001 fb30 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(WX>>8);
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	0a1b      	lsrs	r3, r3, #8
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f001 fb36 	bl	8002662 <LCD_DataWrite>

	LCD_CmdWrite(0x7D);
 8000ff6:	207d      	movs	r0, #125	; 0x7d
 8000ff8:	f001 fb26 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(HY);
 8000ffc:	88bb      	ldrh	r3, [r7, #4]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	4618      	mov	r0, r3
 8001002:	f001 fb2e 	bl	8002662 <LCD_DataWrite>

	LCD_CmdWrite(0x7E);
 8001006:	207e      	movs	r0, #126	; 0x7e
 8001008:	f001 fb1e 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(HY>>8);
 800100c:	88bb      	ldrh	r3, [r7, #4]
 800100e:	0a1b      	lsrs	r3, r3, #8
 8001010:	b29b      	uxth	r3, r3
 8001012:	b2db      	uxtb	r3, r3
 8001014:	4618      	mov	r0, r3
 8001016:	f001 fb24 	bl	8002662 <LCD_DataWrite>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <Ellipse_Center_XY>:
//��ꤤ��
void Ellipse_Center_XY(unsigned short WX,unsigned short HY)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	460a      	mov	r2, r1
 800102c:	80fb      	strh	r3, [r7, #6]
 800102e:	4613      	mov	r3, r2
 8001030:	80bb      	strh	r3, [r7, #4]
[7Bh] Draw Circle/Ellipse/Circle Square Center X-coordination [7:0]
[7Ch] Draw Circle/Ellipse/Circle Square Center X-coordination [12:8]
[7Dh] Draw Circle/Ellipse/Circle Square Center Y-coordination [7:0]
[7Eh] Draw Circle/Ellipse/Circle Square Center Y-coordination [12:8]
*/
	LCD_CmdWrite(0x7B);
 8001032:	207b      	movs	r0, #123	; 0x7b
 8001034:	f001 fb08 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(WX);
 8001038:	88fb      	ldrh	r3, [r7, #6]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	4618      	mov	r0, r3
 800103e:	f001 fb10 	bl	8002662 <LCD_DataWrite>

	LCD_CmdWrite(0x7C);
 8001042:	207c      	movs	r0, #124	; 0x7c
 8001044:	f001 fb00 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(WX>>8);
 8001048:	88fb      	ldrh	r3, [r7, #6]
 800104a:	0a1b      	lsrs	r3, r3, #8
 800104c:	b29b      	uxth	r3, r3
 800104e:	b2db      	uxtb	r3, r3
 8001050:	4618      	mov	r0, r3
 8001052:	f001 fb06 	bl	8002662 <LCD_DataWrite>

	LCD_CmdWrite(0x7D);
 8001056:	207d      	movs	r0, #125	; 0x7d
 8001058:	f001 faf6 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(HY);
 800105c:	88bb      	ldrh	r3, [r7, #4]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	4618      	mov	r0, r3
 8001062:	f001 fafe 	bl	8002662 <LCD_DataWrite>

	LCD_CmdWrite(0x7E);
 8001066:	207e      	movs	r0, #126	; 0x7e
 8001068:	f001 faee 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(HY>>8);
 800106c:	88bb      	ldrh	r3, [r7, #4]
 800106e:	0a1b      	lsrs	r3, r3, #8
 8001070:	b29b      	uxth	r3, r3
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4618      	mov	r0, r3
 8001076:	f001 faf4 	bl	8002662 <LCD_DataWrite>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <Circle_Radius_R>:
//��b�|
void Circle_Radius_R(unsigned short WX)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	4603      	mov	r3, r0
 800108a:	80fb      	strh	r3, [r7, #6]
[77h] Draw Circle/Ellipse/Circle Square Major radius [7:0]
[78h] Draw Circle/Ellipse/Circle Square Major radius [12:8]
[79h] Draw Circle/Ellipse/Circle Square Minor radius [7:0]
[7Ah] Draw Circle/Ellipse/Circle Square Minor radius [12:8]
*/
	LCD_CmdWrite(0x77);
 800108c:	2077      	movs	r0, #119	; 0x77
 800108e:	f001 fadb 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(WX);
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f001 fae3 	bl	8002662 <LCD_DataWrite>

	LCD_CmdWrite(0x78);
 800109c:	2078      	movs	r0, #120	; 0x78
 800109e:	f001 fad3 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(WX>>8);
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	0a1b      	lsrs	r3, r3, #8
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	4618      	mov	r0, r3
 80010ac:	f001 fad9 	bl	8002662 <LCD_DataWrite>

	LCD_CmdWrite(0x79);
 80010b0:	2079      	movs	r0, #121	; 0x79
 80010b2:	f001 fac9 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(WX);
 80010b6:	88fb      	ldrh	r3, [r7, #6]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f001 fad1 	bl	8002662 <LCD_DataWrite>

	LCD_CmdWrite(0x7A);
 80010c0:	207a      	movs	r0, #122	; 0x7a
 80010c2:	f001 fac1 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(WX>>8);
 80010c6:	88fb      	ldrh	r3, [r7, #6]
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f001 fac7 	bl	8002662 <LCD_DataWrite>
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <Ellipse_Radius_RxRy>:

//���b�|
void Ellipse_Radius_RxRy(unsigned short WX,unsigned short HY)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	460a      	mov	r2, r1
 80010e6:	80fb      	strh	r3, [r7, #6]
 80010e8:	4613      	mov	r3, r2
 80010ea:	80bb      	strh	r3, [r7, #4]
[77h] Draw Circle/Ellipse/Circle Square Major radius [7:0]
[78h] Draw Circle/Ellipse/Circle Square Major radius [12:8]
[79h] Draw Circle/Ellipse/Circle Square Minor radius [7:0]
[7Ah] Draw Circle/Ellipse/Circle Square Minor radius [12:8]
*/
	LCD_CmdWrite(0x77);
 80010ec:	2077      	movs	r0, #119	; 0x77
 80010ee:	f001 faab 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(WX);
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f001 fab3 	bl	8002662 <LCD_DataWrite>

	LCD_CmdWrite(0x78);
 80010fc:	2078      	movs	r0, #120	; 0x78
 80010fe:	f001 faa3 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(WX>>8);
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	0a1b      	lsrs	r3, r3, #8
 8001106:	b29b      	uxth	r3, r3
 8001108:	b2db      	uxtb	r3, r3
 800110a:	4618      	mov	r0, r3
 800110c:	f001 faa9 	bl	8002662 <LCD_DataWrite>

	LCD_CmdWrite(0x79);
 8001110:	2079      	movs	r0, #121	; 0x79
 8001112:	f001 fa99 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(HY);
 8001116:	88bb      	ldrh	r3, [r7, #4]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f001 faa1 	bl	8002662 <LCD_DataWrite>

	LCD_CmdWrite(0x7A);
 8001120:	207a      	movs	r0, #122	; 0x7a
 8001122:	f001 fa91 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(HY>>8);
 8001126:	88bb      	ldrh	r3, [r7, #4]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	b29b      	uxth	r3, r3
 800112c:	b2db      	uxtb	r3, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f001 fa97 	bl	8002662 <LCD_DataWrite>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <Circle_Square_Radius_RxRy>:

//����ਤ�b�|
void Circle_Square_Radius_RxRy(unsigned short WX,unsigned short HY)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	460a      	mov	r2, r1
 8001146:	80fb      	strh	r3, [r7, #6]
 8001148:	4613      	mov	r3, r2
 800114a:	80bb      	strh	r3, [r7, #4]
[77h] Draw Circle/Ellipse/Circle Square Major radius [7:0]
[78h] Draw Circle/Ellipse/Circle Square Major radius [12:8]
[79h] Draw Circle/Ellipse/Circle Square Minor radius [7:0]
[7Ah] Draw Circle/Ellipse/Circle Square Minor radius [12:8]
*/
	LCD_CmdWrite(0x77);
 800114c:	2077      	movs	r0, #119	; 0x77
 800114e:	f001 fa7b 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(WX);
 8001152:	88fb      	ldrh	r3, [r7, #6]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f001 fa83 	bl	8002662 <LCD_DataWrite>

	LCD_CmdWrite(0x78);
 800115c:	2078      	movs	r0, #120	; 0x78
 800115e:	f001 fa73 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(WX>>8);
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	0a1b      	lsrs	r3, r3, #8
 8001166:	b29b      	uxth	r3, r3
 8001168:	b2db      	uxtb	r3, r3
 800116a:	4618      	mov	r0, r3
 800116c:	f001 fa79 	bl	8002662 <LCD_DataWrite>

	LCD_CmdWrite(0x79);
 8001170:	2079      	movs	r0, #121	; 0x79
 8001172:	f001 fa69 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(HY);
 8001176:	88bb      	ldrh	r3, [r7, #4]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	4618      	mov	r0, r3
 800117c:	f001 fa71 	bl	8002662 <LCD_DataWrite>

	LCD_CmdWrite(0x7A);
 8001180:	207a      	movs	r0, #122	; 0x7a
 8001182:	f001 fa61 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(HY>>8);
 8001186:	88bb      	ldrh	r3, [r7, #4]
 8001188:	0a1b      	lsrs	r3, r3, #8
 800118a:	b29b      	uxth	r3, r3
 800118c:	b2db      	uxtb	r3, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f001 fa67 	bl	8002662 <LCD_DataWrite>
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <Set_PWM_Prescaler_1_to_256>:

//[84h]=========================================================================
void Set_PWM_Prescaler_1_to_256(unsigned short WX)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	80fb      	strh	r3, [r7, #6]
/*
PWM Prescaler Register
These 8 bits determine prescaler value for Timer 0 and 1.
Time base is ��Core_Freq / (Prescaler + 1)��
*/
	WX=WX-1;
 80011a6:	88fb      	ldrh	r3, [r7, #6]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	80fb      	strh	r3, [r7, #6]
	LCD_CmdWrite(0x84);
 80011ac:	2084      	movs	r0, #132	; 0x84
 80011ae:	f001 fa4b 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(WX);
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f001 fa53 	bl	8002662 <LCD_DataWrite>
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <Select_PWM1_Clock_Divided_By_1>:
//[85h]=========================================================================
void Select_PWM1_Clock_Divided_By_1(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
Select MUX input for PWM Timer 1.
00 = 1; 01 = 1/2; 10 = 1/4 ; 11 = 1/8;
*/
	unsigned char temp;
	
	LCD_CmdWrite(0x85);
 80011ca:	2085      	movs	r0, #133	; 0x85
 80011cc:	f001 fa3c 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 80011d0:	f001 fa62 	bl	8002698 <LCD_DataRead>
 80011d4:	4603      	mov	r3, r0
 80011d6:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb7;
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011de:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb6;
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011e6:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f001 fa39 	bl	8002662 <LCD_DataWrite>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <Select_PWM1_Clock_Divided_By_2>:
void Select_PWM1_Clock_Divided_By_2(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
Select MUX input for PWM Timer 1.
00 = 1; 01 = 1/2; 10 = 1/4 ; 11 = 1/8;
*/
	unsigned char temp;
	
	LCD_CmdWrite(0x85);
 80011fe:	2085      	movs	r0, #133	; 0x85
 8001200:	f001 fa22 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001204:	f001 fa48 	bl	8002698 <LCD_DataRead>
 8001208:	4603      	mov	r3, r0
 800120a:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb7;
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001212:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb6;
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800121a:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	4618      	mov	r0, r3
 8001220:	f001 fa1f 	bl	8002662 <LCD_DataWrite>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <Select_PWM1_Clock_Divided_By_4>:
void Select_PWM1_Clock_Divided_By_4(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
Select MUX input for PWM Timer 1.
00 = 1; 01 = 1/2; 10 = 1/4 ; 11 = 1/8;
*/
	unsigned char temp;
	
	LCD_CmdWrite(0x85);
 8001232:	2085      	movs	r0, #133	; 0x85
 8001234:	f001 fa08 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001238:	f001 fa2e 	bl	8002698 <LCD_DataRead>
 800123c:	4603      	mov	r3, r0
 800123e:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb7;
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001246:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb6;
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800124e:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	4618      	mov	r0, r3
 8001254:	f001 fa05 	bl	8002662 <LCD_DataWrite>
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <Select_PWM1_Clock_Divided_By_8>:
void Select_PWM1_Clock_Divided_By_8(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
Select MUX input for PWM Timer 1.
00 = 1; 01 = 1/2; 10 = 1/4 ; 11 = 1/8;
*/
	unsigned char temp;
	
	LCD_CmdWrite(0x85);
 8001266:	2085      	movs	r0, #133	; 0x85
 8001268:	f001 f9ee 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 800126c:	f001 fa14 	bl	8002698 <LCD_DataRead>
 8001270:	4603      	mov	r3, r0
 8001272:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb7;
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800127a:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb6;
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001282:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	4618      	mov	r0, r3
 8001288:	f001 f9eb 	bl	8002662 <LCD_DataWrite>
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <Select_PWM0_Clock_Divided_By_1>:
void Select_PWM0_Clock_Divided_By_1(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
Select MUX input for PWM Timer 0.
00 = 1; 01 = 1/2; 10 = 1/4 ; 11 = 1/8;
*/
	unsigned char temp;
	
	LCD_CmdWrite(0x85);
 800129a:	2085      	movs	r0, #133	; 0x85
 800129c:	f001 f9d4 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 80012a0:	f001 f9fa 	bl	8002698 <LCD_DataRead>
 80012a4:	4603      	mov	r3, r0
 80012a6:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb5;
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	f023 0320 	bic.w	r3, r3, #32
 80012ae:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb4;
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	f023 0310 	bic.w	r3, r3, #16
 80012b6:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f001 f9d1 	bl	8002662 <LCD_DataWrite>
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <Select_PWM0_Clock_Divided_By_2>:
void Select_PWM0_Clock_Divided_By_2(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
Select MUX input for PWM Timer 0.
00 = 1; 01 = 1/2; 10 = 1/4 ; 11 = 1/8;
*/
	unsigned char temp;
	
	LCD_CmdWrite(0x85);
 80012ce:	2085      	movs	r0, #133	; 0x85
 80012d0:	f001 f9ba 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 80012d4:	f001 f9e0 	bl	8002698 <LCD_DataRead>
 80012d8:	4603      	mov	r3, r0
 80012da:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb5;
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	f023 0320 	bic.w	r3, r3, #32
 80012e2:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb4;
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	f043 0310 	orr.w	r3, r3, #16
 80012ea:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f001 f9b7 	bl	8002662 <LCD_DataWrite>
}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <Select_PWM0_Clock_Divided_By_4>:
void Select_PWM0_Clock_Divided_By_4(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
Select MUX input for PWM Timer 0.
00 = 1; 01 = 1/2; 10 = 1/4 ; 11 = 1/8;
*/
	unsigned char temp;
	
	LCD_CmdWrite(0x85);
 8001302:	2085      	movs	r0, #133	; 0x85
 8001304:	f001 f9a0 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001308:	f001 f9c6 	bl	8002698 <LCD_DataRead>
 800130c:	4603      	mov	r3, r0
 800130e:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb5;
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	f043 0320 	orr.w	r3, r3, #32
 8001316:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb4;
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	f023 0310 	bic.w	r3, r3, #16
 800131e:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	4618      	mov	r0, r3
 8001324:	f001 f99d 	bl	8002662 <LCD_DataWrite>
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <Select_PWM0_Clock_Divided_By_8>:
void Select_PWM0_Clock_Divided_By_8(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
Select MUX input for PWM Timer 0.
00 = 1; 01 = 1/2; 10 = 1/4 ; 11 = 1/8;
*/
	unsigned char temp;
	
	LCD_CmdWrite(0x85);
 8001336:	2085      	movs	r0, #133	; 0x85
 8001338:	f001 f986 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 800133c:	f001 f9ac 	bl	8002698 <LCD_DataRead>
 8001340:	4603      	mov	r3, r0
 8001342:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb5;
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	f043 0320 	orr.w	r3, r3, #32
 800134a:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb4;
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	f043 0310 	orr.w	r3, r3, #16
 8001352:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	4618      	mov	r0, r3
 8001358:	f001 f983 	bl	8002662 <LCD_DataWrite>
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <Select_PWM1>:
	temp = LCD_DataRead();
	temp &= cClrb3;
	LCD_DataWrite(temp);
}
void Select_PWM1(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
	unsigned char temp;
	
	LCD_CmdWrite(0x85);
 800136a:	2085      	movs	r0, #133	; 0x85
 800136c:	f001 f96c 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001370:	f001 f992 	bl	8002698 <LCD_DataRead>
 8001374:	4603      	mov	r3, r0
 8001376:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb3;
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	f043 0308 	orr.w	r3, r3, #8
 800137e:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb2;
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	f023 0304 	bic.w	r3, r3, #4
 8001386:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	4618      	mov	r0, r3
 800138c:	f001 f969 	bl	8002662 <LCD_DataWrite>
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <Select_PWM0>:
	temp = LCD_DataRead();
	temp &= cClrb1;
	LCD_DataWrite(temp);
}
void Select_PWM0(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
	unsigned char temp;
	
	LCD_CmdWrite(0x85);
 800139e:	2085      	movs	r0, #133	; 0x85
 80013a0:	f001 f952 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 80013a4:	f001 f978 	bl	8002698 <LCD_DataRead>
 80013a8:	4603      	mov	r3, r0
 80013aa:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb1;
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	f043 0302 	orr.w	r3, r3, #2
 80013b2:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb0;
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	f023 0301 	bic.w	r3, r3, #1
 80013ba:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	4618      	mov	r0, r3
 80013c0:	f001 f94f 	bl	8002662 <LCD_DataWrite>
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <Start_PWM1>:
	temp = LCD_DataRead();
	temp &= cClrb5;
	LCD_DataWrite(temp);
}
void Start_PWM1(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
Determine start/stop for Timer 1. 
0 = Stop 
1 = Start for Timer 1
*/
	unsigned char temp;
	LCD_CmdWrite(0x86);
 80013d2:	2086      	movs	r0, #134	; 0x86
 80013d4:	f001 f938 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 80013d8:	f001 f95e 	bl	8002698 <LCD_DataRead>
 80013dc:	4603      	mov	r3, r0
 80013de:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb4;
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	f043 0310 	orr.w	r3, r3, #16
 80013e6:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f001 f939 	bl	8002662 <LCD_DataWrite>
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <Stop_PWM1>:
void Stop_PWM1(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
Determine start/stop for Timer 1. 
0 = Stop 
1 = Start for Timer 1
*/
	unsigned char temp;
	LCD_CmdWrite(0x86);
 80013fe:	2086      	movs	r0, #134	; 0x86
 8001400:	f001 f922 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001404:	f001 f948 	bl	8002698 <LCD_DataRead>
 8001408:	4603      	mov	r3, r0
 800140a:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb4;
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	f023 0310 	bic.w	r3, r3, #16
 8001412:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	4618      	mov	r0, r3
 8001418:	f001 f923 	bl	8002662 <LCD_DataWrite>
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <Start_PWM0>:
	temp = LCD_DataRead();
	temp &= cClrb1;
	LCD_DataWrite(temp);
}
void Start_PWM0(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
Determine start/stop for Timer 0. 
0 = Stop 
1 = Start for Timer 0
*/
	unsigned char temp;
	LCD_CmdWrite(0x86);
 800142a:	2086      	movs	r0, #134	; 0x86
 800142c:	f001 f90c 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001430:	f001 f932 	bl	8002698 <LCD_DataRead>
 8001434:	4603      	mov	r3, r0
 8001436:	71fb      	strb	r3, [r7, #7]
	temp |= cSetb0;
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	4618      	mov	r0, r3
 8001444:	f001 f90d 	bl	8002662 <LCD_DataWrite>
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <Stop_PWM0>:
void Stop_PWM0(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
Determine start/stop for Timer 0. 
0 = Stop 
1 = Start for Timer 0
*/
	unsigned char temp;
	LCD_CmdWrite(0x86);
 8001456:	2086      	movs	r0, #134	; 0x86
 8001458:	f001 f8f6 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 800145c:	f001 f91c 	bl	8002698 <LCD_DataRead>
 8001460:	4603      	mov	r3, r0
 8001462:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb0;
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	f023 0301 	bic.w	r3, r3, #1
 800146a:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	4618      	mov	r0, r3
 8001470:	f001 f8f7 	bl	8002662 <LCD_DataWrite>
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <Set_Timer0_Compare_Buffer>:
	LCD_CmdWrite(0x87);
	LCD_DataWrite(temp);
}
//[88h][89h]=========================================================================
void Set_Timer0_Compare_Buffer(unsigned short WX)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	80fb      	strh	r3, [r7, #6]
Timer 0 compare buffer register
Compare buffer register total has 16 bits.
When timer counter equal or less than compare buffer register will cause PWM out
high level if inv_on bit is off.
*/
	LCD_CmdWrite(0x88);
 8001486:	2088      	movs	r0, #136	; 0x88
 8001488:	f001 f8de 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(WX);
 800148c:	88fb      	ldrh	r3, [r7, #6]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	4618      	mov	r0, r3
 8001492:	f001 f8e6 	bl	8002662 <LCD_DataWrite>
	LCD_CmdWrite(0x89);
 8001496:	2089      	movs	r0, #137	; 0x89
 8001498:	f001 f8d6 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(WX>>8);
 800149c:	88fb      	ldrh	r3, [r7, #6]
 800149e:	0a1b      	lsrs	r3, r3, #8
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	4618      	mov	r0, r3
 80014a6:	f001 f8dc 	bl	8002662 <LCD_DataWrite>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <Set_Timer0_Count_Buffer>:
//[8Ah][8Bh]=========================================================================
void Set_Timer0_Count_Buffer(unsigned short WX)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	80fb      	strh	r3, [r7, #6]
Timer 0 count buffer register
Count buffer register total has 16 bits.
When timer counter equal to 0 will cause PWM timer reload Count buffer register if reload_en bit set as enable.
It may read back timer counter��s real time value when PWM timer start.
*/
	LCD_CmdWrite(0x8A);
 80014bc:	208a      	movs	r0, #138	; 0x8a
 80014be:	f001 f8c3 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(WX);
 80014c2:	88fb      	ldrh	r3, [r7, #6]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f001 f8cb 	bl	8002662 <LCD_DataWrite>
	LCD_CmdWrite(0x8B);
 80014cc:	208b      	movs	r0, #139	; 0x8b
 80014ce:	f001 f8bb 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(WX>>8);
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	0a1b      	lsrs	r3, r3, #8
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	4618      	mov	r0, r3
 80014dc:	f001 f8c1 	bl	8002662 <LCD_DataWrite>
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <Set_Timer1_Compare_Buffer>:
//[8Ch][8Dh]=========================================================================
void Set_Timer1_Compare_Buffer(unsigned short WX)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	80fb      	strh	r3, [r7, #6]
Timer 0 compare buffer register
Compare buffer register total has 16 bits.
When timer counter equal or less than compare buffer register will cause PWM out
high level if inv_on bit is off.
*/
	LCD_CmdWrite(0x8C);
 80014f2:	208c      	movs	r0, #140	; 0x8c
 80014f4:	f001 f8a8 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(WX);
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	4618      	mov	r0, r3
 80014fe:	f001 f8b0 	bl	8002662 <LCD_DataWrite>
	LCD_CmdWrite(0x8D);
 8001502:	208d      	movs	r0, #141	; 0x8d
 8001504:	f001 f8a0 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(WX>>8);
 8001508:	88fb      	ldrh	r3, [r7, #6]
 800150a:	0a1b      	lsrs	r3, r3, #8
 800150c:	b29b      	uxth	r3, r3
 800150e:	b2db      	uxtb	r3, r3
 8001510:	4618      	mov	r0, r3
 8001512:	f001 f8a6 	bl	8002662 <LCD_DataWrite>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <Set_Timer1_Count_Buffer>:
//[8Eh][8Fh]=========================================================================
void Set_Timer1_Count_Buffer(unsigned short WX)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	80fb      	strh	r3, [r7, #6]
Timer 0 count buffer register
Count buffer register total has 16 bits.
When timer counter equal to 0 will cause PWM timer reload Count buffer register if reload_en bit set as enable.
It may read back timer counter��s real time value when PWM timer start.
*/
	LCD_CmdWrite(0x8E);
 8001528:	208e      	movs	r0, #142	; 0x8e
 800152a:	f001 f88d 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(WX);
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	4618      	mov	r0, r3
 8001534:	f001 f895 	bl	8002662 <LCD_DataWrite>
	LCD_CmdWrite(0x8F);
 8001538:	208f      	movs	r0, #143	; 0x8f
 800153a:	f001 f885 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(WX>>8);
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	0a1b      	lsrs	r3, r3, #8
 8001542:	b29b      	uxth	r3, r3
 8001544:	b2db      	uxtb	r3, r3
 8001546:	4618      	mov	r0, r3
 8001548:	f001 f88b 	bl	8002662 <LCD_DataWrite>
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <Select_SFI_Dual_Mode0>:
	temp = LCD_DataRead();
	temp &= 0xFC;
	LCD_DataWrite(temp);
}
void Select_SFI_Dual_Mode0(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
	unsigned char temp;
	LCD_CmdWrite(0xB7);
 800155a:	20b7      	movs	r0, #183	; 0xb7
 800155c:	f001 f874 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001560:	f001 f89a 	bl	8002698 <LCD_DataRead>
 8001564:	4603      	mov	r3, r0
 8001566:	71fb      	strb	r3, [r7, #7]
	temp &= 0xFC;
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	f023 0303 	bic.w	r3, r3, #3
 800156e:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb1;
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	f043 0302 	orr.w	r3, r3, #2
 8001576:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	4618      	mov	r0, r3
 800157c:	f001 f871 	bl	8002662 <LCD_DataWrite>
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <CGROM_Select_Internal_CGROM>:
    temp |= cSetb7;
	temp &= cClrb6;
	LCD_DataWrite(temp);
}
void CGROM_Select_Internal_CGROM(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
00 : Internal CGROM
01 : Genitop serial flash
10 : User-defined Font
*/
	unsigned char temp;
	LCD_CmdWrite(0xCC);
 800158e:	20cc      	movs	r0, #204	; 0xcc
 8001590:	f001 f85a 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001594:	f001 f880 	bl	8002698 <LCD_DataRead>
 8001598:	4603      	mov	r3, r0
 800159a:	71fb      	strb	r3, [r7, #7]
	temp &= cClrb7;
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015a2:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb6;
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015aa:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f001 f857 	bl	8002662 <LCD_DataWrite>
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <Font_Select_8x16_16x16>:
	temp &= cClrb7;
    temp |= cSetb6;
	LCD_DataWrite(temp);
}
void Font_Select_8x16_16x16(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
*** User-defined Font width is decided by font code. Genitop
serial flash��s font width is decided by font code or GT Font ROM
control register.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCC);
 80015c2:	20cc      	movs	r0, #204	; 0xcc
 80015c4:	f001 f840 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 80015c8:	f001 f866 	bl	8002698 <LCD_DataRead>
 80015cc:	4603      	mov	r3, r0
 80015ce:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb5;
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	f023 0320 	bic.w	r3, r3, #32
 80015d6:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb4;
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	f023 0310 	bic.w	r3, r3, #16
 80015de:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f001 f83d 	bl	8002662 <LCD_DataWrite>
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <Font_Select_12x24_24x24>:
void Font_Select_12x24_24x24(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
*** User-defined Font width is decided by font code. Genitop
serial flash��s font width is decided by font code or GT Font ROM
control register.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCC);
 80015f6:	20cc      	movs	r0, #204	; 0xcc
 80015f8:	f001 f826 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 80015fc:	f001 f84c 	bl	8002698 <LCD_DataRead>
 8001600:	4603      	mov	r3, r0
 8001602:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb5;
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	f023 0320 	bic.w	r3, r3, #32
 800160a:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb4;
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	f043 0310 	orr.w	r3, r3, #16
 8001612:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	4618      	mov	r0, r3
 8001618:	f001 f823 	bl	8002662 <LCD_DataWrite>
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <Font_Select_16x32_32x32>:
void Font_Select_16x32_32x32(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
*** User-defined Font width is decided by font code. Genitop
serial flash��s font width is decided by font code or GT Font ROM
control register.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCC);
 800162a:	20cc      	movs	r0, #204	; 0xcc
 800162c:	f001 f80c 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001630:	f001 f832 	bl	8002698 <LCD_DataRead>
 8001634:	4603      	mov	r3, r0
 8001636:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb5;
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	f043 0320 	orr.w	r3, r3, #32
 800163e:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb4;
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	f023 0310 	bic.w	r3, r3, #16
 8001646:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	4618      	mov	r0, r3
 800164c:	f001 f809 	bl	8002662 <LCD_DataWrite>
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <Enable_Font_Alignment>:
    temp |= cSetb0;
	LCD_DataWrite(temp);
}
//[CDh]=========================================================================
void Enable_Font_Alignment(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
Full Alignment Selection Bit
0 : Full alignment disable.
1 : Full alignment enable.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCD);
 800165e:	20cd      	movs	r0, #205	; 0xcd
 8001660:	f000 fff2 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001664:	f001 f818 	bl	8002698 <LCD_DataRead>
 8001668:	4603      	mov	r3, r0
 800166a:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb7;
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001672:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	4618      	mov	r0, r3
 8001678:	f000 fff3 	bl	8002662 <LCD_DataWrite>
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <Disable_Font_Alignment>:
void Disable_Font_Alignment(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
Full Alignment Selection Bit
0 : Full alignment disable.
1 : Full alignment enable.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCD);
 800168a:	20cd      	movs	r0, #205	; 0xcd
 800168c:	f000 ffdc 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001690:	f001 f802 	bl	8002698 <LCD_DataRead>
 8001694:	4603      	mov	r3, r0
 8001696:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb7;
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800169e:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f000 ffdd 	bl	8002662 <LCD_DataWrite>
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <Font_Background_select_Transparency>:
void Font_Background_select_Transparency(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
Font Transparency
0 : Font with background color.
1 : Font with background transparency.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCD);
 80016b6:	20cd      	movs	r0, #205	; 0xcd
 80016b8:	f000 ffc6 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 80016bc:	f000 ffec 	bl	8002698 <LCD_DataRead>
 80016c0:	4603      	mov	r3, r0
 80016c2:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb6;
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016ca:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 ffc7 	bl	8002662 <LCD_DataWrite>
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <Font_Background_select_Color>:
void Font_Background_select_Color(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
Font Transparency
0 : Font with background color.
1 : Font with background transparency.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCD);
 80016e2:	20cd      	movs	r0, #205	; 0xcd
 80016e4:	f000 ffb0 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 80016e8:	f000 ffd6 	bl	8002698 <LCD_DataRead>
 80016ec:	4603      	mov	r3, r0
 80016ee:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb6;
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80016f6:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 ffb1 	bl	8002662 <LCD_DataWrite>
}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <Font_Width_X1>:
	temp = LCD_DataRead();
    temp |= cSetb4;
	LCD_DataWrite(temp);
}
void Font_Width_X1(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
01b : X2.
10b : X3.
11b : X4.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCD);
 800170e:	20cd      	movs	r0, #205	; 0xcd
 8001710:	f000 ff9a 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001714:	f000 ffc0 	bl	8002698 <LCD_DataRead>
 8001718:	4603      	mov	r3, r0
 800171a:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb3;
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	f023 0308 	bic.w	r3, r3, #8
 8001722:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb2;
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	f023 0304 	bic.w	r3, r3, #4
 800172a:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	4618      	mov	r0, r3
 8001730:	f000 ff97 	bl	8002662 <LCD_DataWrite>
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <Font_Width_X2>:
void Font_Width_X2(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
01b : X2.
10b : X3.
11b : X4.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCD);
 8001742:	20cd      	movs	r0, #205	; 0xcd
 8001744:	f000 ff80 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001748:	f000 ffa6 	bl	8002698 <LCD_DataRead>
 800174c:	4603      	mov	r3, r0
 800174e:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb3;
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	f023 0308 	bic.w	r3, r3, #8
 8001756:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb2;
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	f043 0304 	orr.w	r3, r3, #4
 800175e:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	4618      	mov	r0, r3
 8001764:	f000 ff7d 	bl	8002662 <LCD_DataWrite>
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <Font_Width_X3>:
void Font_Width_X3(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
01b : X2.
10b : X3.
11b : X4.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCD);
 8001776:	20cd      	movs	r0, #205	; 0xcd
 8001778:	f000 ff66 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 800177c:	f000 ff8c 	bl	8002698 <LCD_DataRead>
 8001780:	4603      	mov	r3, r0
 8001782:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb3;
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	f043 0308 	orr.w	r3, r3, #8
 800178a:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb2;
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	f023 0304 	bic.w	r3, r3, #4
 8001792:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	4618      	mov	r0, r3
 8001798:	f000 ff63 	bl	8002662 <LCD_DataWrite>
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <Font_Width_X4>:
void Font_Width_X4(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
01b : X2.
10b : X3.
11b : X4.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCD);
 80017aa:	20cd      	movs	r0, #205	; 0xcd
 80017ac:	f000 ff4c 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 80017b0:	f000 ff72 	bl	8002698 <LCD_DataRead>
 80017b4:	4603      	mov	r3, r0
 80017b6:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb3;
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	f043 0308 	orr.w	r3, r3, #8
 80017be:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb2;
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	f043 0304 	orr.w	r3, r3, #4
 80017c6:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 ff49 	bl	8002662 <LCD_DataWrite>
}
 80017d0:	bf00      	nop
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <Font_Height_X1>:
void Font_Height_X1(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
01b : X2.
10b : X3.
11b : X4.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCD);
 80017de:	20cd      	movs	r0, #205	; 0xcd
 80017e0:	f000 ff32 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 80017e4:	f000 ff58 	bl	8002698 <LCD_DataRead>
 80017e8:	4603      	mov	r3, r0
 80017ea:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb1;
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	f023 0302 	bic.w	r3, r3, #2
 80017f2:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb0;
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	f023 0301 	bic.w	r3, r3, #1
 80017fa:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 ff2f 	bl	8002662 <LCD_DataWrite>
}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <Font_Height_X2>:
void Font_Height_X2(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
01b : X2.
10b : X3.
11b : X4.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCD);
 8001812:	20cd      	movs	r0, #205	; 0xcd
 8001814:	f000 ff18 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001818:	f000 ff3e 	bl	8002698 <LCD_DataRead>
 800181c:	4603      	mov	r3, r0
 800181e:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb1;
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	f023 0302 	bic.w	r3, r3, #2
 8001826:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb0;
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	4618      	mov	r0, r3
 8001834:	f000 ff15 	bl	8002662 <LCD_DataWrite>
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <Font_Height_X3>:
void Font_Height_X3(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
01b : X2.
10b : X3.
11b : X4.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCD);
 8001846:	20cd      	movs	r0, #205	; 0xcd
 8001848:	f000 fefe 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 800184c:	f000 ff24 	bl	8002698 <LCD_DataRead>
 8001850:	4603      	mov	r3, r0
 8001852:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb1;
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	f043 0302 	orr.w	r3, r3, #2
 800185a:	71fb      	strb	r3, [r7, #7]
    temp &= cClrb0;
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	f023 0301 	bic.w	r3, r3, #1
 8001862:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	4618      	mov	r0, r3
 8001868:	f000 fefb 	bl	8002662 <LCD_DataWrite>
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <Font_Height_X4>:
void Font_Height_X4(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
01b : X2.
10b : X3.
11b : X4.
*/
	unsigned char temp;
	LCD_CmdWrite(0xCD);
 800187a:	20cd      	movs	r0, #205	; 0xcd
 800187c:	f000 fee4 	bl	8002648 <LCD_CmdWrite>
	temp = LCD_DataRead();
 8001880:	f000 ff0a 	bl	8002698 <LCD_DataRead>
 8001884:	4603      	mov	r3, r0
 8001886:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb1;
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	f043 0302 	orr.w	r3, r3, #2
 800188e:	71fb      	strb	r3, [r7, #7]
    temp |= cSetb0;
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	71fb      	strb	r3, [r7, #7]
	LCD_DataWrite(temp);
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	4618      	mov	r0, r3
 800189c:	f000 fee1 	bl	8002662 <LCD_DataWrite>
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <Foreground_color_65k>:
	LCD_DataWrite(temp<<6);
}
 
//Input data format:R5G6B5 
void Foreground_color_65k(unsigned short temp)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	80fb      	strh	r3, [r7, #6]
    LCD_CmdWrite(0xD2);
 80018b2:	20d2      	movs	r0, #210	; 0xd2
 80018b4:	f000 fec8 	bl	8002648 <LCD_CmdWrite>
 	LCD_DataWrite(temp>>8);
 80018b8:	88fb      	ldrh	r3, [r7, #6]
 80018ba:	0a1b      	lsrs	r3, r3, #8
 80018bc:	b29b      	uxth	r3, r3
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 fece 	bl	8002662 <LCD_DataWrite>
 
    LCD_CmdWrite(0xD3);
 80018c6:	20d3      	movs	r0, #211	; 0xd3
 80018c8:	f000 febe 	bl	8002648 <LCD_CmdWrite>
 	LCD_DataWrite(temp>>3);
 80018cc:	88fb      	ldrh	r3, [r7, #6]
 80018ce:	08db      	lsrs	r3, r3, #3
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	4618      	mov	r0, r3
 80018d6:	f000 fec4 	bl	8002662 <LCD_DataWrite>
  
    LCD_CmdWrite(0xD4);
 80018da:	20d4      	movs	r0, #212	; 0xd4
 80018dc:	f000 feb4 	bl	8002648 <LCD_CmdWrite>
 	LCD_DataWrite(temp<<3);
 80018e0:	88fb      	ldrh	r3, [r7, #6]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 feba 	bl	8002662 <LCD_DataWrite>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <Background_color_65k>:
 	LCD_DataWrite(temp<<6);
}
 
//Input data format:R5G6B6
void Background_color_65k(unsigned short temp)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	4603      	mov	r3, r0
 80018fe:	80fb      	strh	r3, [r7, #6]
    LCD_CmdWrite(0xD5);
 8001900:	20d5      	movs	r0, #213	; 0xd5
 8001902:	f000 fea1 	bl	8002648 <LCD_CmdWrite>
 	LCD_DataWrite(temp>>8);
 8001906:	88fb      	ldrh	r3, [r7, #6]
 8001908:	0a1b      	lsrs	r3, r3, #8
 800190a:	b29b      	uxth	r3, r3
 800190c:	b2db      	uxtb	r3, r3
 800190e:	4618      	mov	r0, r3
 8001910:	f000 fea7 	bl	8002662 <LCD_DataWrite>
  
    LCD_CmdWrite(0xD6);
 8001914:	20d6      	movs	r0, #214	; 0xd6
 8001916:	f000 fe97 	bl	8002648 <LCD_CmdWrite>
 	LCD_DataWrite(temp>>3);
 800191a:	88fb      	ldrh	r3, [r7, #6]
 800191c:	08db      	lsrs	r3, r3, #3
 800191e:	b29b      	uxth	r3, r3
 8001920:	b2db      	uxtb	r3, r3
 8001922:	4618      	mov	r0, r3
 8001924:	f000 fe9d 	bl	8002662 <LCD_DataWrite>
   
    LCD_CmdWrite(0xD7);
 8001928:	20d7      	movs	r0, #215	; 0xd7
 800192a:	f000 fe8d 	bl	8002648 <LCD_CmdWrite>
 	LCD_DataWrite(temp<<3);
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	b2db      	uxtb	r3, r3
 8001936:	4618      	mov	r0, r3
 8001938:	f000 fe93 	bl	8002662 <LCD_DataWrite>
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <Show_String>:
}



void Show_String(char *str)
{   
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  	Text_Mode();	   //�ı�ģʽ
 800194c:	f7fe fef9 	bl	8000742 <Text_Mode>
  	LCD_CmdWrite(0x04);
 8001950:	2004      	movs	r0, #4
 8001952:	f000 fe79 	bl	8002648 <LCD_CmdWrite>
  	while(*str != '\0')
 8001956:	e009      	b.n	800196c <Show_String+0x28>
  	{
   		LCD_DataWrite(*str);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f000 fe80 	bl	8002662 <LCD_DataWrite>
   		Check_Mem_WR_FIFO_not_Full();
 8001962:	f7fe fe3b 	bl	80005dc <Check_Mem_WR_FIFO_not_Full>
  		++str;   
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	3301      	adds	r3, #1
 800196a:	607b      	str	r3, [r7, #4]
  	while(*str != '\0')
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1f1      	bne.n	8001958 <Show_String+0x14>
  	}
   	Check_2D_Busy();
 8001974:	f7fe fe3d 	bl	80005f2 <Check_2D_Busy>

   	Graphic_Mode(); //back to graphic mode;ͼ��ģʽ
 8001978:	f7fe fecd 	bl	8000716 <Graphic_Mode>
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <LT768_HW_Reset>:
int8_t PwmControl = 50;
//---------------------------------------------------------------------------------------------------------------------------------

//Reset LT768
void LT768_HW_Reset(void)
{	
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
//	
//	GPIO_ResetBits(GPIOE, GPIO_Pin_1);
//	Delay_ms(100);				   
//    GPIO_SetBits(GPIOE, GPIO_Pin_1);		 	 
//    Delay_ms(100);	
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0,GPIO_PIN_RESET );
 8001988:	2200      	movs	r2, #0
 800198a:	2101      	movs	r1, #1
 800198c:	4807      	ldr	r0, [pc, #28]	; (80019ac <LT768_HW_Reset+0x28>)
 800198e:	f003 fd8b 	bl	80054a8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001992:	2064      	movs	r0, #100	; 0x64
 8001994:	f003 fa9c 	bl	8004ed0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0,GPIO_PIN_SET );
 8001998:	2201      	movs	r2, #1
 800199a:	2101      	movs	r1, #1
 800199c:	4803      	ldr	r0, [pc, #12]	; (80019ac <LT768_HW_Reset+0x28>)
 800199e:	f003 fd83 	bl	80054a8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80019a2:	2064      	movs	r0, #100	; 0x64
 80019a4:	f003 fa94 	bl	8004ed0 <HAL_Delay>
}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40020c00 	.word	0x40020c00

080019b0 <System_Check_Temp>:

//Check the LT768 system

void System_Check_Temp(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
	unsigned char i=0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	71fb      	strb	r3, [r7, #7]
	unsigned char temp=0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	717b      	strb	r3, [r7, #5]
	unsigned char system_ok=0;
 80019be:	2300      	movs	r3, #0
 80019c0:	71bb      	strb	r3, [r7, #6]
	unsigned char temp1 = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	713b      	strb	r3, [r7, #4]
		
*/
		
		
		//printf("%x \r\n",LCD_StatusRead());
		temp1 = LCD_StatusRead();//0X50
 80019c6:	f000 fe59 	bl	800267c <LCD_StatusRead>
 80019ca:	4603      	mov	r3, r0
 80019cc:	713b      	strb	r3, [r7, #4]
		printf("temp1=%x \r\n",temp1);
 80019ce:	793b      	ldrb	r3, [r7, #4]
 80019d0:	4619      	mov	r1, r3
 80019d2:	4825      	ldr	r0, [pc, #148]	; (8001a68 <System_Check_Temp+0xb8>)
 80019d4:	f005 fe1e 	bl	8007614 <iprintf>
		
		
		
		printf("hdz \r\n");
 80019d8:	4824      	ldr	r0, [pc, #144]	; (8001a6c <System_Check_Temp+0xbc>)
 80019da:	f005 fea1 	bl	8007720 <puts>
		if((temp1&0x02)==0x00)    
 80019de:	793b      	ldrb	r3, [r7, #4]
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d127      	bne.n	8001a38 <System_Check_Temp+0x88>
		{
			
			Delay_ms(1);                  //If the MCU speed is too fast, use it if necessary
 80019e8:	2001      	movs	r0, #1
 80019ea:	f000 fe7f 	bl	80026ec <Delay_ms>
			LCD_CmdWrite(0x01);//0X01
 80019ee:	2001      	movs	r0, #1
 80019f0:	f000 fe2a 	bl	8002648 <LCD_CmdWrite>
			Delay_ms(1);                  //If the MCU speed is too fast, use it if necessary
 80019f4:	2001      	movs	r0, #1
 80019f6:	f000 fe79 	bl	80026ec <Delay_ms>
			temp =LCD_DataRead(); //c8
 80019fa:	f000 fe4d 	bl	8002698 <LCD_DataRead>
 80019fe:	4603      	mov	r3, r0
 8001a00:	717b      	strb	r3, [r7, #5]
			printf("%x \r\n",temp);
 8001a02:	797b      	ldrb	r3, [r7, #5]
 8001a04:	4619      	mov	r1, r3
 8001a06:	481a      	ldr	r0, [pc, #104]	; (8001a70 <System_Check_Temp+0xc0>)
 8001a08:	f005 fe04 	bl	8007614 <iprintf>
			if((temp & 0x80)==0x80)       //Check if the CCR register PLL is ready
 8001a0c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	da04      	bge.n	8001a1e <System_Check_Temp+0x6e>
			{
				system_ok=1;
 8001a14:	2301      	movs	r3, #1
 8001a16:	71bb      	strb	r3, [r7, #6]
				i=0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	71fb      	strb	r3, [r7, #7]
 8001a1c:	e011      	b.n	8001a42 <System_Check_Temp+0x92>
			}
			else
			{
				Delay_ms(1); //If the MCU speed is too fast, use it if necessary
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f000 fe64 	bl	80026ec <Delay_ms>
				LCD_CmdWrite(0x01);
 8001a24:	2001      	movs	r0, #1
 8001a26:	f000 fe0f 	bl	8002648 <LCD_CmdWrite>
				Delay_ms(1); //If the MCU speed is too fast, use it if necessary
 8001a2a:	2001      	movs	r0, #1
 8001a2c:	f000 fe5e 	bl	80026ec <Delay_ms>
				LCD_DataWrite(0x80);
 8001a30:	2080      	movs	r0, #128	; 0x80
 8001a32:	f000 fe16 	bl	8002662 <LCD_DataWrite>
 8001a36:	e004      	b.n	8001a42 <System_Check_Temp+0x92>
			}
		}
		else
		{
			system_ok=0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	71bb      	strb	r3, [r7, #6]
			i++;
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	71fb      	strb	r3, [r7, #7]
		}
		if(system_ok==0 && i==5)
 8001a42:	79bb      	ldrb	r3, [r7, #6]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d106      	bne.n	8001a56 <System_Check_Temp+0xa6>
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	2b05      	cmp	r3, #5
 8001a4c:	d103      	bne.n	8001a56 <System_Check_Temp+0xa6>
		{
			LT768_HW_Reset(); //note1
 8001a4e:	f7ff ff99 	bl	8001984 <LT768_HW_Reset>
			i=0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	71fb      	strb	r3, [r7, #7]
		}
	}while(system_ok==0);
 8001a56:	79bb      	ldrb	r3, [r7, #6]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0b4      	beq.n	80019c6 <System_Check_Temp+0x16>
}
 8001a5c:	bf00      	nop
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	08008810 	.word	0x08008810
 8001a6c:	0800881c 	.word	0x0800881c
 8001a70:	08008824 	.word	0x08008824

08001a74 <LT768_PLL_Initial>:

void LT768_PLL_Initial(void) 
{    
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af00      	add	r7, sp, #0
	unsigned int  temp = 0,temp1 =0 ;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61bb      	str	r3, [r7, #24]
	
	unsigned short lpllOD_sclk, lpllOD_cclk, lpllOD_mclk;
	unsigned short lpllR_sclk, lpllR_cclk, lpllR_mclk;
	unsigned short lpllN_sclk, lpllN_cclk, lpllN_mclk;
	
	temp = (LCD_HBPD + LCD_HFPD + LCD_HSPW + LCD_XSIZE_TFT) * (LCD_VBPD + LCD_VFPD + LCD_VSPW+LCD_YSIZE_TFT) * 60;   
 8001a82:	4b60      	ldr	r3, [pc, #384]	; (8001c04 <LT768_PLL_Initial+0x190>)
 8001a84:	61fb      	str	r3, [r7, #28]
	
	temp1=(temp%1000000)/100000;
 8001a86:	69fa      	ldr	r2, [r7, #28]
 8001a88:	4b5f      	ldr	r3, [pc, #380]	; (8001c08 <LT768_PLL_Initial+0x194>)
 8001a8a:	fba3 1302 	umull	r1, r3, r3, r2
 8001a8e:	0c9b      	lsrs	r3, r3, #18
 8001a90:	495e      	ldr	r1, [pc, #376]	; (8001c0c <LT768_PLL_Initial+0x198>)
 8001a92:	fb01 f303 	mul.w	r3, r1, r3
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	095b      	lsrs	r3, r3, #5
 8001a9a:	4a5d      	ldr	r2, [pc, #372]	; (8001c10 <LT768_PLL_Initial+0x19c>)
 8001a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa0:	09db      	lsrs	r3, r3, #7
 8001aa2:	61bb      	str	r3, [r7, #24]
	if(temp1>=5) 
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d907      	bls.n	8001aba <LT768_PLL_Initial+0x46>
		 temp = temp / 1000000 + 1;
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	4a56      	ldr	r2, [pc, #344]	; (8001c08 <LT768_PLL_Initial+0x194>)
 8001aae:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab2:	0c9b      	lsrs	r3, r3, #18
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	61fb      	str	r3, [r7, #28]
 8001ab8:	e005      	b.n	8001ac6 <LT768_PLL_Initial+0x52>
	else temp = temp / 1000000;
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	4a52      	ldr	r2, [pc, #328]	; (8001c08 <LT768_PLL_Initial+0x194>)
 8001abe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac2:	0c9b      	lsrs	r3, r3, #18
 8001ac4:	61fb      	str	r3, [r7, #28]
	
	
	SCLK = temp;
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	4b52      	ldr	r3, [pc, #328]	; (8001c14 <LT768_PLL_Initial+0x1a0>)
 8001acc:	701a      	strb	r2, [r3, #0]
	temp = temp * 3;
 8001ace:	69fa      	ldr	r2, [r7, #28]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	4413      	add	r3, r2
 8001ad6:	61fb      	str	r3, [r7, #28]
	MCLK = temp;
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	4b4e      	ldr	r3, [pc, #312]	; (8001c18 <LT768_PLL_Initial+0x1a4>)
 8001ade:	701a      	strb	r2, [r3, #0]
	CCLK = temp;
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	4b4d      	ldr	r3, [pc, #308]	; (8001c1c <LT768_PLL_Initial+0x1a8>)
 8001ae6:	701a      	strb	r2, [r3, #0]
	
	MCLK = 133;
 8001ae8:	4b4b      	ldr	r3, [pc, #300]	; (8001c18 <LT768_PLL_Initial+0x1a4>)
 8001aea:	2285      	movs	r2, #133	; 0x85
 8001aec:	701a      	strb	r2, [r3, #0]
	CCLK = 100;
 8001aee:	4b4b      	ldr	r3, [pc, #300]	; (8001c1c <LT768_PLL_Initial+0x1a8>)
 8001af0:	2264      	movs	r2, #100	; 0x64
 8001af2:	701a      	strb	r2, [r3, #0]
	
#endif

#if XI_10M 	
	
	lpllOD_sclk = 3;
 8001af4:	2303      	movs	r3, #3
 8001af6:	82fb      	strh	r3, [r7, #22]
	lpllOD_cclk = 2;
 8001af8:	2302      	movs	r3, #2
 8001afa:	82bb      	strh	r3, [r7, #20]
	lpllOD_mclk = 2;
 8001afc:	2302      	movs	r3, #2
 8001afe:	827b      	strh	r3, [r7, #18]
	lpllR_sclk  = 5;
 8001b00:	2305      	movs	r3, #5
 8001b02:	823b      	strh	r3, [r7, #16]
	lpllR_cclk  = 5;
 8001b04:	2305      	movs	r3, #5
 8001b06:	81fb      	strh	r3, [r7, #14]
	lpllR_mclk  = 5;
 8001b08:	2305      	movs	r3, #5
 8001b0a:	81bb      	strh	r3, [r7, #12]
	lpllN_mclk  = MCLK;      
 8001b0c:	4b42      	ldr	r3, [pc, #264]	; (8001c18 <LT768_PLL_Initial+0x1a4>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	817b      	strh	r3, [r7, #10]
	lpllN_cclk  = CCLK;    
 8001b12:	4b42      	ldr	r3, [pc, #264]	; (8001c1c <LT768_PLL_Initial+0x1a8>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	813b      	strh	r3, [r7, #8]
	lpllN_sclk  = 2*SCLK; 
 8001b18:	4b3e      	ldr	r3, [pc, #248]	; (8001c14 <LT768_PLL_Initial+0x1a0>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	80fb      	strh	r3, [r7, #6]
	lpllN_cclk  = CCLK;    
	lpllN_sclk  = SCLK; 
	
#endif

	LCD_CmdWrite(0x05);
 8001b22:	2005      	movs	r0, #5
 8001b24:	f000 fd90 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite((lpllOD_sclk<<6) | (lpllR_sclk<<1) | ((lpllN_sclk>>8)&0x1));
 8001b28:	8afb      	ldrh	r3, [r7, #22]
 8001b2a:	019b      	lsls	r3, r3, #6
 8001b2c:	b25a      	sxtb	r2, r3
 8001b2e:	8a3b      	ldrh	r3, [r7, #16]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	b25b      	sxtb	r3, r3
 8001b34:	4313      	orrs	r3, r2
 8001b36:	b25a      	sxtb	r2, r3
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	0a1b      	lsrs	r3, r3, #8
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	b25b      	sxtb	r3, r3
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	b25b      	sxtb	r3, r3
 8001b46:	4313      	orrs	r3, r2
 8001b48:	b25b      	sxtb	r3, r3
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f000 fd88 	bl	8002662 <LCD_DataWrite>
	LCD_CmdWrite(0x07);
 8001b52:	2007      	movs	r0, #7
 8001b54:	f000 fd78 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite((lpllOD_mclk<<6) | (lpllR_mclk<<1) | ((lpllN_mclk>>8)&0x1));
 8001b58:	8a7b      	ldrh	r3, [r7, #18]
 8001b5a:	019b      	lsls	r3, r3, #6
 8001b5c:	b25a      	sxtb	r2, r3
 8001b5e:	89bb      	ldrh	r3, [r7, #12]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	b25b      	sxtb	r3, r3
 8001b64:	4313      	orrs	r3, r2
 8001b66:	b25a      	sxtb	r2, r3
 8001b68:	897b      	ldrh	r3, [r7, #10]
 8001b6a:	0a1b      	lsrs	r3, r3, #8
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	b25b      	sxtb	r3, r3
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	b25b      	sxtb	r3, r3
 8001b76:	4313      	orrs	r3, r2
 8001b78:	b25b      	sxtb	r3, r3
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f000 fd70 	bl	8002662 <LCD_DataWrite>
	LCD_CmdWrite(0x09);
 8001b82:	2009      	movs	r0, #9
 8001b84:	f000 fd60 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite((lpllOD_cclk<<6) | (lpllR_cclk<<1) | ((lpllN_cclk>>8)&0x1));
 8001b88:	8abb      	ldrh	r3, [r7, #20]
 8001b8a:	019b      	lsls	r3, r3, #6
 8001b8c:	b25a      	sxtb	r2, r3
 8001b8e:	89fb      	ldrh	r3, [r7, #14]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	b25b      	sxtb	r3, r3
 8001b94:	4313      	orrs	r3, r2
 8001b96:	b25a      	sxtb	r2, r3
 8001b98:	893b      	ldrh	r3, [r7, #8]
 8001b9a:	0a1b      	lsrs	r3, r3, #8
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	b25b      	sxtb	r3, r3
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	b25b      	sxtb	r3, r3
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	b25b      	sxtb	r3, r3
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	4618      	mov	r0, r3
 8001bae:	f000 fd58 	bl	8002662 <LCD_DataWrite>

	LCD_CmdWrite(0x06);
 8001bb2:	2006      	movs	r0, #6
 8001bb4:	f000 fd48 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(lpllN_sclk);
 8001bb8:	88fb      	ldrh	r3, [r7, #6]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f000 fd50 	bl	8002662 <LCD_DataWrite>
	LCD_CmdWrite(0x08);
 8001bc2:	2008      	movs	r0, #8
 8001bc4:	f000 fd40 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(lpllN_mclk);
 8001bc8:	897b      	ldrh	r3, [r7, #10]
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f000 fd48 	bl	8002662 <LCD_DataWrite>
	LCD_CmdWrite(0x0a);
 8001bd2:	200a      	movs	r0, #10
 8001bd4:	f000 fd38 	bl	8002648 <LCD_CmdWrite>
	LCD_DataWrite(lpllN_cclk);
 8001bd8:	893b      	ldrh	r3, [r7, #8]
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f000 fd40 	bl	8002662 <LCD_DataWrite>
      
	LCD_CmdWrite(0x00);
 8001be2:	2000      	movs	r0, #0
 8001be4:	f000 fd30 	bl	8002648 <LCD_CmdWrite>
	Delay_us(1);
 8001be8:	2001      	movs	r0, #1
 8001bea:	f000 fd63 	bl	80026b4 <Delay_us>
	LCD_DataWrite(0x80);
 8001bee:	2080      	movs	r0, #128	; 0x80
 8001bf0:	f000 fd37 	bl	8002662 <LCD_DataWrite>

	Delay_ms(1);	//Single PLL riveting
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	f000 fd79 	bl	80026ec <Delay_ms>
}
 8001bfa:	bf00      	nop
 8001bfc:	3720      	adds	r7, #32
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	02101380 	.word	0x02101380
 8001c08:	431bde83 	.word	0x431bde83
 8001c0c:	000f4240 	.word	0x000f4240
 8001c10:	0a7c5ac5 	.word	0x0a7c5ac5
 8001c14:	2000031a 	.word	0x2000031a
 8001c18:	20000319 	.word	0x20000319
 8001c1c:	20000318 	.word	0x20000318

08001c20 <LT768_SDRAM_initail>:


void LT768_SDRAM_initail(unsigned char mclk)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
	unsigned short sdram_itv;
	
	LCD_RegisterWrite(0xe0,0x29);      
 8001c2a:	2129      	movs	r1, #41	; 0x29
 8001c2c:	20e0      	movs	r0, #224	; 0xe0
 8001c2e:	f7fe fcc1 	bl	80005b4 <LCD_RegisterWrite>
	LCD_RegisterWrite(0xe1,0x03);	//CAS:2=0x02�ACAS:3=0x03
 8001c32:	2103      	movs	r1, #3
 8001c34:	20e1      	movs	r0, #225	; 0xe1
 8001c36:	f7fe fcbd 	bl	80005b4 <LCD_RegisterWrite>
  sdram_itv = (64000000 / 8192) / (1000/mclk) ;
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c40:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c44:	f641 6284 	movw	r2, #7812	; 0x1e84
 8001c48:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c4c:	81fb      	strh	r3, [r7, #14]
  sdram_itv-=2;
 8001c4e:	89fb      	ldrh	r3, [r7, #14]
 8001c50:	3b02      	subs	r3, #2
 8001c52:	81fb      	strh	r3, [r7, #14]

	LCD_RegisterWrite(0xe2,sdram_itv);
 8001c54:	89fb      	ldrh	r3, [r7, #14]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	4619      	mov	r1, r3
 8001c5a:	20e2      	movs	r0, #226	; 0xe2
 8001c5c:	f7fe fcaa 	bl	80005b4 <LCD_RegisterWrite>
	LCD_RegisterWrite(0xe3,sdram_itv >>8);
 8001c60:	89fb      	ldrh	r3, [r7, #14]
 8001c62:	0a1b      	lsrs	r3, r3, #8
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	4619      	mov	r1, r3
 8001c6a:	20e3      	movs	r0, #227	; 0xe3
 8001c6c:	f7fe fca2 	bl	80005b4 <LCD_RegisterWrite>
	LCD_RegisterWrite(0xe4,0x01);
 8001c70:	2101      	movs	r1, #1
 8001c72:	20e4      	movs	r0, #228	; 0xe4
 8001c74:	f7fe fc9e 	bl	80005b4 <LCD_RegisterWrite>
	Check_SDRAM_Ready();
 8001c78:	f7fe fcc7 	bl	800060a <Check_SDRAM_Ready>
	Delay_ms(1);
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	f000 fd35 	bl	80026ec <Delay_ms>
}
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <Set_LCD_Panel>:


void Set_LCD_Panel(void)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	af00      	add	r7, sp, #0
	//**[01h]**//   
	TFT_16bit();	
 8001c8e:	f7fe fcde 	bl	800064e <TFT_16bit>
	//TFT_24bit(); 
	
	#if STM32_FSMC_8
	Host_Bus_8bit();    //Host bus 8bit
	#else
	Host_Bus_16bit();	//Host bus 16bit
 8001c92:	f7fe fcf6 	bl	8000682 <Host_Bus_16bit>
	#endif
      
	//**[02h]**//
	RGB_16b_16bpp();
 8001c96:	f7fe fd0a 	bl	80006ae <RGB_16b_16bpp>
	//RGB_16b_24bpp_mode1();
	//MemWrite_Left_Right_Top_Down();	
	MemWrite_Down_Top_Left_Right();
 8001c9a:	f7fe fd22 	bl	80006e2 <MemWrite_Down_Top_Left_Right>
      
	//**[03h]**//
	Graphic_Mode();
 8001c9e:	f7fe fd3a 	bl	8000716 <Graphic_Mode>
	Memory_Select_SDRAM();
 8001ca2:	f7fe fd64 	bl	800076e <Memory_Select_SDRAM>
     
	PCLK_Falling();	       	//REG[12h]:falling edge
 8001ca6:	f7fe fd96 	bl	80007d6 <PCLK_Falling>
	//PCLK_Rising();
	
	VSCAN_T_to_B();	        //REG[12h]:top to bottom
 8001caa:	f7fe fdc0 	bl	800082e <VSCAN_T_to_B>
	//VSCAN_B_to_T();				//bottom to top
	
	PDATA_Set_RGB();        //REG[12h]:Select RGB output
 8001cae:	f7fe fdd4 	bl	800085a <PDATA_Set_RGB>
	//PDATA_Set_GRB();
	//PDATA_Set_GBR();
	//PDATA_Set_BRG();
	//PDATA_Set_BGR();

	HSYNC_Low_Active();     //REG[13h]:		  
 8001cb2:	f7fe fde8 	bl	8000886 <HSYNC_Low_Active>
	//HSYNC_High_Active();
	
	VSYNC_Low_Active();     //REG[13h]:			
 8001cb6:	f7fe fdfc 	bl	80008b2 <VSYNC_Low_Active>
	//VSYNC_High_Active();
	
	DE_High_Active();       //REG[13h]:	
 8001cba:	f7fe fe10 	bl	80008de <DE_High_Active>
	//DE_Low_Active();
 
	LCD_HorizontalWidth_VerticalHeight(LCD_XSIZE_TFT ,LCD_YSIZE_TFT);	
 8001cbe:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001cc2:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001cc6:	f7fe fe20 	bl	800090a <LCD_HorizontalWidth_VerticalHeight>
	LCD_Horizontal_Non_Display(LCD_HBPD);	                            
 8001cca:	208c      	movs	r0, #140	; 0x8c
 8001ccc:	f7fe fe80 	bl	80009d0 <LCD_Horizontal_Non_Display>
	LCD_HSYNC_Start_Position(LCD_HFPD);	                              
 8001cd0:	20a0      	movs	r0, #160	; 0xa0
 8001cd2:	f7fe feb1 	bl	8000a38 <LCD_HSYNC_Start_Position>
	LCD_HSYNC_Pulse_Width(LCD_HSPW);		                            	
 8001cd6:	2014      	movs	r0, #20
 8001cd8:	f7fe fece 	bl	8000a78 <LCD_HSYNC_Pulse_Width>
	LCD_Vertical_Non_Display(LCD_VBPD);	                                
 8001cdc:	2014      	movs	r0, #20
 8001cde:	f7fe feeb 	bl	8000ab8 <LCD_Vertical_Non_Display>
	LCD_VSYNC_Start_Position(LCD_VFPD);	                              
 8001ce2:	200c      	movs	r0, #12
 8001ce4:	f7fe ff05 	bl	8000af2 <LCD_VSYNC_Start_Position>
	LCD_VSYNC_Pulse_Width(LCD_VSPW);		                            	
 8001ce8:	2003      	movs	r0, #3
 8001cea:	f7fe ff16 	bl	8000b1a <LCD_VSYNC_Pulse_Width>

	Memory_XY_Mode();	//Block mode (X-Y coordination addressing);block mode
 8001cee:	f7ff f814 	bl	8000d1a <Memory_XY_Mode>
	Memory_16bpp_Mode();	
 8001cf2:	f7ff f828 	bl	8000d46 <Memory_16bpp_Mode>
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <LT768_initial>:

void LT768_initial(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  LT768_PLL_Initial();
 8001d00:	f7ff feb8 	bl	8001a74 <LT768_PLL_Initial>
	//printf("3\r\n");
  LT768_SDRAM_initail(MCLK);
 8001d04:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <LT768_initial+0x1c>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff89 	bl	8001c20 <LT768_SDRAM_initail>
	//printf("4\r\n");
  Set_LCD_Panel();
 8001d0e:	f7ff ffbc 	bl	8001c8a <Set_LCD_Panel>
	//printf("5\r\n");


}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000319 	.word	0x20000319

08001d1c <LT768_Init>:


void LT768_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
	Delay_ms(100);                    //delay for LT768 power on
 8001d20:	2064      	movs	r0, #100	; 0x64
 8001d22:	f000 fce3 	bl	80026ec <Delay_ms>
	
	//PA8 TO external reset the microcontroller
	LT768_HW_Reset();                 //LT768 reset
 8001d26:	f7ff fe2d 	bl	8001984 <LT768_HW_Reset>
	printf("1\r\n");
 8001d2a:	480b      	ldr	r0, [pc, #44]	; (8001d58 <LT768_Init+0x3c>)
 8001d2c:	f005 fcf8 	bl	8007720 <puts>
	System_Check_Temp();	            //Check if reset is successful
 8001d30:	f7ff fe3e 	bl	80019b0 <System_Check_Temp>
	Delay_ms(100);
 8001d34:	2064      	movs	r0, #100	; 0x64
 8001d36:	f000 fcd9 	bl	80026ec <Delay_ms>
	printf("2\r\n");
 8001d3a:	4808      	ldr	r0, [pc, #32]	; (8001d5c <LT768_Init+0x40>)
 8001d3c:	f005 fcf0 	bl	8007720 <puts>
	while(LCD_StatusRead()&0x02);	    //Initial_Display_test	and  set SW2 pin2 = 1
 8001d40:	bf00      	nop
 8001d42:	f000 fc9b 	bl	800267c <LCD_StatusRead>
 8001d46:	4603      	mov	r3, r0
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1f8      	bne.n	8001d42 <LT768_Init+0x26>
	LT768_initial();
 8001d50:	f7ff ffd4 	bl	8001cfc <LT768_initial>
	
}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	0800882c 	.word	0x0800882c
 8001d5c:	08008830 	.word	0x08008830

08001d60 <LT768_setMainWindow>:


//--------------------------------------------------------------------------------------------------------------------------------------------

void LT768_setMainWindow(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af04      	add	r7, sp, #16

	Select_Main_Window_16bpp();
 8001d66:	f7fe fd1c 	bl	80007a2 <Select_Main_Window_16bpp>

	Main_Image_Start_Address(layer1_start_addr);
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f7fe fee9 	bl	8000b42 <Main_Image_Start_Address>

	Main_Image_Width(LCD_XSIZE_TFT);
 8001d70:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001d74:	f7fe ff08 	bl	8000b88 <Main_Image_Width>
	Main_Window_Start_XY(0,0);
 8001d78:	2100      	movs	r1, #0
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f7fe ff1b 	bl	8000bb6 <Main_Window_Start_XY>

	Canvas_Image_Start_address(layer1_start_addr);
 8001d80:	2000      	movs	r0, #0
 8001d82:	f7fe ff40 	bl	8000c06 <Canvas_Image_Start_address>
	Canvas_image_width(LCD_XSIZE_TFT);
 8001d86:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001d8a:	f7fe ff5f 	bl	8000c4c <Canvas_image_width>

	Active_Window_XY(0,0);
 8001d8e:	2100      	movs	r1, #0
 8001d90:	2000      	movs	r0, #0
 8001d92:	f7fe ff72 	bl	8000c7a <Active_Window_XY>
	Active_Window_WH(LCD_XSIZE_TFT,LCD_YSIZE_TFT);
 8001d96:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001d9a:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001d9e:	f7fe ff94 	bl	8000cca <Active_Window_WH>
	LT768_DrawCircleSquare_Fill(0, 0, 800, 480, 0, 0, BGcolor);
 8001da2:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001da6:	9302      	str	r3, [sp, #8]
 8001da8:	2300      	movs	r3, #0
 8001daa:	9301      	str	r3, [sp, #4]
 8001dac:	2300      	movs	r3, #0
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001db4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001db8:	2100      	movs	r1, #0
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f000 f8bf 	bl	8001f3e <LT768_DrawCircleSquare_Fill>
	//LT768_DMA_24bit_Block(1, 0, 200, 150, 355, 137, 355, 0x000000);
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <LT768_DrawLine>:
,unsigned short Y1        // Y1����
,unsigned short X2        // X2����
,unsigned short Y2        // Y2����
,unsigned long  LineColor //line color
)
{
 8001dc6:	b590      	push	{r4, r7, lr}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	4604      	mov	r4, r0
 8001dce:	4608      	mov	r0, r1
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4623      	mov	r3, r4
 8001dd6:	80fb      	strh	r3, [r7, #6]
 8001dd8:	4603      	mov	r3, r0
 8001dda:	80bb      	strh	r3, [r7, #4]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	807b      	strh	r3, [r7, #2]
 8001de0:	4613      	mov	r3, r2
 8001de2:	803b      	strh	r3, [r7, #0]
	Foreground_color_65k(LineColor);
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff fd5d 	bl	80018a8 <Foreground_color_65k>
	Line_Start_XY(X1,Y1);
 8001dee:	88ba      	ldrh	r2, [r7, #4]
 8001df0:	88fb      	ldrh	r3, [r7, #6]
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe fff4 	bl	8000de2 <Line_Start_XY>
	Line_End_XY(X2,Y2);
 8001dfa:	883a      	ldrh	r2, [r7, #0]
 8001dfc:	887b      	ldrh	r3, [r7, #2]
 8001dfe:	4611      	mov	r1, r2
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff f81e 	bl	8000e42 <Line_End_XY>
	Start_Line();
 8001e06:	f7fe ffe0 	bl	8000dca <Start_Line>
	Check_2D_Busy();
 8001e0a:	f7fe fbf2 	bl	80005f2 <Check_2D_Busy>
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd90      	pop	{r4, r7, pc}

08001e16 <LT768_DrawLine_Width>:
,unsigned short X2        // X2����
,unsigned short Y2        // Y2����
,unsigned long  LineColor // �߶���ɫ
,unsigned short Width     // �߶ο��
)
{
 8001e16:	b590      	push	{r4, r7, lr}
 8001e18:	b087      	sub	sp, #28
 8001e1a:	af02      	add	r7, sp, #8
 8001e1c:	4604      	mov	r4, r0
 8001e1e:	4608      	mov	r0, r1
 8001e20:	4611      	mov	r1, r2
 8001e22:	461a      	mov	r2, r3
 8001e24:	4623      	mov	r3, r4
 8001e26:	80fb      	strh	r3, [r7, #6]
 8001e28:	4603      	mov	r3, r0
 8001e2a:	80bb      	strh	r3, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	807b      	strh	r3, [r7, #2]
 8001e30:	4613      	mov	r3, r2
 8001e32:	803b      	strh	r3, [r7, #0]
	unsigned short  i = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	81fb      	strh	r3, [r7, #14]
	while(Width--)
 8001e38:	e011      	b.n	8001e5e <LT768_DrawLine_Width+0x48>
	{
		LT768_DrawLine(X1,Y1+i,X2,Y2+i,LineColor);
 8001e3a:	88ba      	ldrh	r2, [r7, #4]
 8001e3c:	89fb      	ldrh	r3, [r7, #14]
 8001e3e:	4413      	add	r3, r2
 8001e40:	b299      	uxth	r1, r3
 8001e42:	883a      	ldrh	r2, [r7, #0]
 8001e44:	89fb      	ldrh	r3, [r7, #14]
 8001e46:	4413      	add	r3, r2
 8001e48:	b29c      	uxth	r4, r3
 8001e4a:	887a      	ldrh	r2, [r7, #2]
 8001e4c:	88f8      	ldrh	r0, [r7, #6]
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	4623      	mov	r3, r4
 8001e54:	f7ff ffb7 	bl	8001dc6 <LT768_DrawLine>
		i++;
 8001e58:	89fb      	ldrh	r3, [r7, #14]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	81fb      	strh	r3, [r7, #14]
	while(Width--)
 8001e5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e60:	1e5a      	subs	r2, r3, #1
 8001e62:	84ba      	strh	r2, [r7, #36]	; 0x24
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1e8      	bne.n	8001e3a <LT768_DrawLine_Width+0x24>
	}
}
 8001e68:	bf00      	nop
 8001e6a:	bf00      	nop
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd90      	pop	{r4, r7, pc}

08001e72 <LT768_DrawCircle_Fill>:
 unsigned short XCenter           // Բ��Xλ��
,unsigned short YCenter           // Բ��Yλ��
,unsigned short R                 // �뾶
,unsigned long ForegroundColor    // ������ɫ
)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b084      	sub	sp, #16
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	607b      	str	r3, [r7, #4]
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	81fb      	strh	r3, [r7, #14]
 8001e7e:	460b      	mov	r3, r1
 8001e80:	81bb      	strh	r3, [r7, #12]
 8001e82:	4613      	mov	r3, r2
 8001e84:	817b      	strh	r3, [r7, #10]
	Foreground_color_65k(ForegroundColor);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff fd0c 	bl	80018a8 <Foreground_color_65k>
	Circle_Center_XY(XCenter,YCenter);
 8001e90:	89ba      	ldrh	r2, [r7, #12]
 8001e92:	89fb      	ldrh	r3, [r7, #14]
 8001e94:	4611      	mov	r1, r2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff f893 	bl	8000fc2 <Circle_Center_XY>
  Circle_Radius_R(R);
 8001e9c:	897b      	ldrh	r3, [r7, #10]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff f8ef 	bl	8001082 <Circle_Radius_R>
  Start_Circle_or_Ellipse_Fill();
 8001ea4:	f7ff f85d 	bl	8000f62 <Start_Circle_or_Ellipse_Fill>
  Check_2D_Busy(); 
 8001ea8:	f7fe fba3 	bl	80005f2 <Check_2D_Busy>
}
 8001eac:	bf00      	nop
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <LT768_DrawCircle_Width>:
,unsigned short R                // �뾶
,unsigned long CircleColor       // ������ɫ
,unsigned long ForegroundColor   // ������ɫ
,unsigned short Width            // �߿�
)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	607b      	str	r3, [r7, #4]
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	81fb      	strh	r3, [r7, #14]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	81bb      	strh	r3, [r7, #12]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	817b      	strh	r3, [r7, #10]
	LT768_DrawCircle_Fill(XCenter,YCenter,R+Width,CircleColor);
 8001ec8:	897a      	ldrh	r2, [r7, #10]
 8001eca:	8bbb      	ldrh	r3, [r7, #28]
 8001ecc:	4413      	add	r3, r2
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	89b9      	ldrh	r1, [r7, #12]
 8001ed2:	89f8      	ldrh	r0, [r7, #14]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f7ff ffcc 	bl	8001e72 <LT768_DrawCircle_Fill>
	LT768_DrawCircle_Fill(XCenter,YCenter,R,ForegroundColor);
 8001eda:	897a      	ldrh	r2, [r7, #10]
 8001edc:	89b9      	ldrh	r1, [r7, #12]
 8001ede:	89f8      	ldrh	r0, [r7, #14]
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	f7ff ffc6 	bl	8001e72 <LT768_DrawCircle_Fill>
}
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <LT768_DrawSquare_Fill>:
,unsigned short Y1                // Y1λ��
,unsigned short X2                // X2λ��
,unsigned short Y2                // Y2λ��
,unsigned long ForegroundColor    // ������ɫ
)
{
 8001eee:	b590      	push	{r4, r7, lr}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4604      	mov	r4, r0
 8001ef6:	4608      	mov	r0, r1
 8001ef8:	4611      	mov	r1, r2
 8001efa:	461a      	mov	r2, r3
 8001efc:	4623      	mov	r3, r4
 8001efe:	80fb      	strh	r3, [r7, #6]
 8001f00:	4603      	mov	r3, r0
 8001f02:	80bb      	strh	r3, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	807b      	strh	r3, [r7, #2]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	803b      	strh	r3, [r7, #0]
	Foreground_color_65k(ForegroundColor);
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fcc9 	bl	80018a8 <Foreground_color_65k>
  Square_Start_XY(X1,Y1);
 8001f16:	88ba      	ldrh	r2, [r7, #4]
 8001f18:	88fb      	ldrh	r3, [r7, #6]
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe ffc0 	bl	8000ea2 <Square_Start_XY>
  Square_End_XY(X2,Y2);
 8001f22:	883a      	ldrh	r2, [r7, #0]
 8001f24:	887b      	ldrh	r3, [r7, #2]
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe ffea 	bl	8000f02 <Square_End_XY>
  Start_Square_Fill();
 8001f2e:	f7ff f830 	bl	8000f92 <Start_Square_Fill>
  Check_2D_Busy();
 8001f32:	f7fe fb5e 	bl	80005f2 <Check_2D_Busy>
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd90      	pop	{r4, r7, pc}

08001f3e <LT768_DrawCircleSquare_Fill>:
,unsigned short Y2                // Y2λ��
,unsigned short X_R               // ��뾶
,unsigned short Y_R               // ���뾶
,unsigned long ForegroundColor  // ������ɫ
)
{
 8001f3e:	b590      	push	{r4, r7, lr}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4604      	mov	r4, r0
 8001f46:	4608      	mov	r0, r1
 8001f48:	4611      	mov	r1, r2
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	4623      	mov	r3, r4
 8001f4e:	80fb      	strh	r3, [r7, #6]
 8001f50:	4603      	mov	r3, r0
 8001f52:	80bb      	strh	r3, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	807b      	strh	r3, [r7, #2]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	803b      	strh	r3, [r7, #0]
	Foreground_color_65k(ForegroundColor);
 8001f5c:	6a3b      	ldr	r3, [r7, #32]
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff fca1 	bl	80018a8 <Foreground_color_65k>
  Square_Start_XY(X1,Y1);
 8001f66:	88ba      	ldrh	r2, [r7, #4]
 8001f68:	88fb      	ldrh	r3, [r7, #6]
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe ff98 	bl	8000ea2 <Square_Start_XY>
  Square_End_XY(X2,Y2); 
 8001f72:	883a      	ldrh	r2, [r7, #0]
 8001f74:	887b      	ldrh	r3, [r7, #2]
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe ffc2 	bl	8000f02 <Square_End_XY>
  Circle_Square_Radius_RxRy(X_R,Y_R);
 8001f7e:	8bba      	ldrh	r2, [r7, #28]
 8001f80:	8b3b      	ldrh	r3, [r7, #24]
 8001f82:	4611      	mov	r1, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff f8d9 	bl	800113c <Circle_Square_Radius_RxRy>
  Start_Circle_Square_Fill();
 8001f8a:	f7ff f80e 	bl	8000faa <Start_Circle_Square_Fill>
  Check_2D_Busy(); 
 8001f8e:	f7fe fb30 	bl	80005f2 <Check_2D_Busy>
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd90      	pop	{r4, r7, pc}

08001f9a <LT768_DrawCircleSquare_Width>:
,unsigned short Y_R               // ���뾶
,unsigned long ForegroundColor  // ������ɫ
,unsigned long CircleSquareColor    // ������ɫ
,unsigned short Width             // ���
)
{
 8001f9a:	b590      	push	{r4, r7, lr}
 8001f9c:	b087      	sub	sp, #28
 8001f9e:	af04      	add	r7, sp, #16
 8001fa0:	4604      	mov	r4, r0
 8001fa2:	4608      	mov	r0, r1
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	4623      	mov	r3, r4
 8001faa:	80fb      	strh	r3, [r7, #6]
 8001fac:	4603      	mov	r3, r0
 8001fae:	80bb      	strh	r3, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	807b      	strh	r3, [r7, #2]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	803b      	strh	r3, [r7, #0]
	LT768_DrawCircleSquare_Fill(X1-Width,Y1-Width,X2+Width,Y2+Width,X_R,Y_R,ForegroundColor);
 8001fb8:	88fa      	ldrh	r2, [r7, #6]
 8001fba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	b298      	uxth	r0, r3
 8001fc0:	88ba      	ldrh	r2, [r7, #4]
 8001fc2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	b299      	uxth	r1, r3
 8001fc8:	887a      	ldrh	r2, [r7, #2]
 8001fca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001fcc:	4413      	add	r3, r2
 8001fce:	b29c      	uxth	r4, r3
 8001fd0:	883a      	ldrh	r2, [r7, #0]
 8001fd2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001fd4:	4413      	add	r3, r2
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	6a3b      	ldr	r3, [r7, #32]
 8001fda:	9302      	str	r3, [sp, #8]
 8001fdc:	8bbb      	ldrh	r3, [r7, #28]
 8001fde:	9301      	str	r3, [sp, #4]
 8001fe0:	8b3b      	ldrh	r3, [r7, #24]
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	4622      	mov	r2, r4
 8001fe8:	f7ff ffa9 	bl	8001f3e <LT768_DrawCircleSquare_Fill>
	LT768_DrawCircleSquare_Fill(X1,Y1,X2,Y2,X_R,Y_R,CircleSquareColor);
 8001fec:	883c      	ldrh	r4, [r7, #0]
 8001fee:	887a      	ldrh	r2, [r7, #2]
 8001ff0:	88b9      	ldrh	r1, [r7, #4]
 8001ff2:	88f8      	ldrh	r0, [r7, #6]
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	9302      	str	r3, [sp, #8]
 8001ff8:	8bbb      	ldrh	r3, [r7, #28]
 8001ffa:	9301      	str	r3, [sp, #4]
 8001ffc:	8b3b      	ldrh	r3, [r7, #24]
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	4623      	mov	r3, r4
 8002002:	f7ff ff9c 	bl	8001f3e <LT768_DrawCircleSquare_Fill>
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	bd90      	pop	{r4, r7, pc}

0800200e <LT768_DrawLeftUpCurve_Fill>:
,unsigned short YCenter           // ����Yλ��
,unsigned short X_R               // ��뾶
,unsigned short Y_R               // ���뾶
,unsigned long ForegroundColor    // ������ɫ
)
{
 800200e:	b590      	push	{r4, r7, lr}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	4604      	mov	r4, r0
 8002016:	4608      	mov	r0, r1
 8002018:	4611      	mov	r1, r2
 800201a:	461a      	mov	r2, r3
 800201c:	4623      	mov	r3, r4
 800201e:	80fb      	strh	r3, [r7, #6]
 8002020:	4603      	mov	r3, r0
 8002022:	80bb      	strh	r3, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	807b      	strh	r3, [r7, #2]
 8002028:	4613      	mov	r3, r2
 800202a:	803b      	strh	r3, [r7, #0]
  Foreground_color_65k(ForegroundColor);
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	b29b      	uxth	r3, r3
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff fc39 	bl	80018a8 <Foreground_color_65k>
  Ellipse_Center_XY(XCenter,YCenter);
 8002036:	88ba      	ldrh	r2, [r7, #4]
 8002038:	88fb      	ldrh	r3, [r7, #6]
 800203a:	4611      	mov	r1, r2
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe fff0 	bl	8001022 <Ellipse_Center_XY>
  Ellipse_Radius_RxRy(X_R,Y_R);
 8002042:	883a      	ldrh	r2, [r7, #0]
 8002044:	887b      	ldrh	r3, [r7, #2]
 8002046:	4611      	mov	r1, r2
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff f847 	bl	80010dc <Ellipse_Radius_RxRy>
  Start_Left_Up_Curve_Fill();
 800204e:	f7fe ff94 	bl	8000f7a <Start_Left_Up_Curve_Fill>
  Check_2D_Busy(); 
 8002052:	f7fe face 	bl	80005f2 <Check_2D_Busy>
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	bd90      	pop	{r4, r7, pc}

0800205e <LT768_Select_Internal_Font_Init>:
,unsigned char XxN          // ����Ŀ�ȷŴ�����1~4
,unsigned char YxN          // ����ĸ߶ȷŴ�����1~4
,unsigned char ChromaKey    // 0�����屳��ɫ͸��    1��������������ı���ɫ
,unsigned char Alignment    // 0�������岻����      1���������
)
{
 800205e:	b590      	push	{r4, r7, lr}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	4604      	mov	r4, r0
 8002066:	4608      	mov	r0, r1
 8002068:	4611      	mov	r1, r2
 800206a:	461a      	mov	r2, r3
 800206c:	4623      	mov	r3, r4
 800206e:	71fb      	strb	r3, [r7, #7]
 8002070:	4603      	mov	r3, r0
 8002072:	71bb      	strb	r3, [r7, #6]
 8002074:	460b      	mov	r3, r1
 8002076:	717b      	strb	r3, [r7, #5]
 8002078:	4613      	mov	r3, r2
 800207a:	713b      	strb	r3, [r7, #4]
	if(Size==16)	Font_Select_8x16_16x16();
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	2b10      	cmp	r3, #16
 8002080:	d101      	bne.n	8002086 <LT768_Select_Internal_Font_Init+0x28>
 8002082:	f7ff fa9b 	bl	80015bc <Font_Select_8x16_16x16>
	if(Size==24)	Font_Select_12x24_24x24();
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	2b18      	cmp	r3, #24
 800208a:	d101      	bne.n	8002090 <LT768_Select_Internal_Font_Init+0x32>
 800208c:	f7ff fab0 	bl	80015f0 <Font_Select_12x24_24x24>
	if(Size==32)	Font_Select_16x32_32x32();
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	2b20      	cmp	r3, #32
 8002094:	d101      	bne.n	800209a <LT768_Select_Internal_Font_Init+0x3c>
 8002096:	f7ff fac5 	bl	8001624 <Font_Select_16x32_32x32>

	//(*)
	if(XxN==1)	Font_Width_X1();
 800209a:	79bb      	ldrb	r3, [r7, #6]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d101      	bne.n	80020a4 <LT768_Select_Internal_Font_Init+0x46>
 80020a0:	f7ff fb32 	bl	8001708 <Font_Width_X1>
	if(XxN==2)	Font_Width_X2();
 80020a4:	79bb      	ldrb	r3, [r7, #6]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d101      	bne.n	80020ae <LT768_Select_Internal_Font_Init+0x50>
 80020aa:	f7ff fb47 	bl	800173c <Font_Width_X2>
	if(XxN==3)	Font_Width_X3();
 80020ae:	79bb      	ldrb	r3, [r7, #6]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d101      	bne.n	80020b8 <LT768_Select_Internal_Font_Init+0x5a>
 80020b4:	f7ff fb5c 	bl	8001770 <Font_Width_X3>
	if(XxN==4)	Font_Width_X4();
 80020b8:	79bb      	ldrb	r3, [r7, #6]
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d101      	bne.n	80020c2 <LT768_Select_Internal_Font_Init+0x64>
 80020be:	f7ff fb71 	bl	80017a4 <Font_Width_X4>

	//(*)	
	if(YxN==1)	Font_Height_X1();
 80020c2:	797b      	ldrb	r3, [r7, #5]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d101      	bne.n	80020cc <LT768_Select_Internal_Font_Init+0x6e>
 80020c8:	f7ff fb86 	bl	80017d8 <Font_Height_X1>
	if(YxN==2)	Font_Height_X2();
 80020cc:	797b      	ldrb	r3, [r7, #5]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d101      	bne.n	80020d6 <LT768_Select_Internal_Font_Init+0x78>
 80020d2:	f7ff fb9b 	bl	800180c <Font_Height_X2>
	if(YxN==3)	Font_Height_X3();
 80020d6:	797b      	ldrb	r3, [r7, #5]
 80020d8:	2b03      	cmp	r3, #3
 80020da:	d101      	bne.n	80020e0 <LT768_Select_Internal_Font_Init+0x82>
 80020dc:	f7ff fbb0 	bl	8001840 <Font_Height_X3>
	if(YxN==4)	Font_Height_X4();
 80020e0:	797b      	ldrb	r3, [r7, #5]
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d101      	bne.n	80020ea <LT768_Select_Internal_Font_Init+0x8c>
 80020e6:	f7ff fbc5 	bl	8001874 <Font_Height_X4>

	//(*)
	if(ChromaKey==0)	Font_Background_select_Color();	
 80020ea:	793b      	ldrb	r3, [r7, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <LT768_Select_Internal_Font_Init+0x96>
 80020f0:	f7ff faf4 	bl	80016dc <Font_Background_select_Color>
	if(ChromaKey==1)	Font_Background_select_Transparency();	
 80020f4:	793b      	ldrb	r3, [r7, #4]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d101      	bne.n	80020fe <LT768_Select_Internal_Font_Init+0xa0>
 80020fa:	f7ff fad9 	bl	80016b0 <Font_Background_select_Transparency>

	//(*)
	if(Alignment==0)	Disable_Font_Alignment();
 80020fe:	7e3b      	ldrb	r3, [r7, #24]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <LT768_Select_Internal_Font_Init+0xaa>
 8002104:	f7ff fabe 	bl	8001684 <Disable_Font_Alignment>
	if(Alignment==1)	Enable_Font_Alignment();
 8002108:	7e3b      	ldrb	r3, [r7, #24]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d101      	bne.n	8002112 <LT768_Select_Internal_Font_Init+0xb4>
 800210e:	f7ff faa3 	bl	8001658 <Enable_Font_Alignment>
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	bd90      	pop	{r4, r7, pc}

0800211a <LT768_Print_Internal_Font_String>:
,unsigned short y               // ���忪ʼ��ʾ��yλ��
,unsigned long FontColor        // �������ɫ
,unsigned long BackGroundColor  // ����ı���ɫ��ע�⣺�����屳����ʼ����͸��ʱ�����ø�ֵ��Ч��
,char *c                        // ���ݻ�����׵�ַ
)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b084      	sub	sp, #16
 800211e:	af00      	add	r7, sp, #0
 8002120:	60ba      	str	r2, [r7, #8]
 8002122:	607b      	str	r3, [r7, #4]
 8002124:	4603      	mov	r3, r0
 8002126:	81fb      	strh	r3, [r7, #14]
 8002128:	460b      	mov	r3, r1
 800212a:	81bb      	strh	r3, [r7, #12]
  Text_Mode();
 800212c:	f7fe fb09 	bl	8000742 <Text_Mode>
	CGROM_Select_Internal_CGROM();
 8002130:	f7ff fa2a 	bl	8001588 <CGROM_Select_Internal_CGROM>
  Foreground_color_65k(FontColor);
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	b29b      	uxth	r3, r3
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fbb5 	bl	80018a8 <Foreground_color_65k>
	Background_color_65k(BackGroundColor);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	b29b      	uxth	r3, r3
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff fbd7 	bl	80018f6 <Background_color_65k>
	Goto_Text_XY(x,y);
 8002148:	89ba      	ldrh	r2, [r7, #12]
 800214a:	89fb      	ldrh	r3, [r7, #14]
 800214c:	4611      	mov	r1, r2
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe fe13 	bl	8000d7a <Goto_Text_XY>
	Show_String(c);
 8002154:	69b8      	ldr	r0, [r7, #24]
 8002156:	f7ff fbf5 	bl	8001944 <Show_String>
}
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <LT768_PWM0_Init>:
,unsigned char Clock_Divided                // PWMʱ�ӷ�Ƶ  ȡֵ��Χ 0~3(1,1/2,1/4,1/8)
,unsigned char Prescalar                    // ʱ�ӷ�Ƶ     ȡֵ��Χ 1~256
,unsigned short Count_Buffer                // ����PWM���������
,unsigned short Compare_Buffer              // ����ռ�ձ�
)
{
 8002162:	b590      	push	{r4, r7, lr}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	4604      	mov	r4, r0
 800216a:	4608      	mov	r0, r1
 800216c:	4611      	mov	r1, r2
 800216e:	461a      	mov	r2, r3
 8002170:	4623      	mov	r3, r4
 8002172:	71fb      	strb	r3, [r7, #7]
 8002174:	4603      	mov	r3, r0
 8002176:	71bb      	strb	r3, [r7, #6]
 8002178:	460b      	mov	r3, r1
 800217a:	717b      	strb	r3, [r7, #5]
 800217c:	4613      	mov	r3, r2
 800217e:	807b      	strh	r3, [r7, #2]
	 Select_PWM0();
 8002180:	f7ff f90a 	bl	8001398 <Select_PWM0>
   Set_PWM_Prescaler_1_to_256(Prescalar);
 8002184:	797b      	ldrb	r3, [r7, #5]
 8002186:	b29b      	uxth	r3, r3
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff f807 	bl	800119c <Set_PWM_Prescaler_1_to_256>

	if(Clock_Divided ==0)	Select_PWM0_Clock_Divided_By_1();
 800218e:	79bb      	ldrb	r3, [r7, #6]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <LT768_PWM0_Init+0x36>
 8002194:	f7ff f87e 	bl	8001294 <Select_PWM0_Clock_Divided_By_1>
	if(Clock_Divided ==1)	Select_PWM0_Clock_Divided_By_2();
 8002198:	79bb      	ldrb	r3, [r7, #6]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <LT768_PWM0_Init+0x40>
 800219e:	f7ff f893 	bl	80012c8 <Select_PWM0_Clock_Divided_By_2>
	if(Clock_Divided ==2)	Select_PWM0_Clock_Divided_By_4();
 80021a2:	79bb      	ldrb	r3, [r7, #6]
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d101      	bne.n	80021ac <LT768_PWM0_Init+0x4a>
 80021a8:	f7ff f8a8 	bl	80012fc <Select_PWM0_Clock_Divided_By_4>
	if(Clock_Divided ==3) Select_PWM0_Clock_Divided_By_8();
 80021ac:	79bb      	ldrb	r3, [r7, #6]
 80021ae:	2b03      	cmp	r3, #3
 80021b0:	d101      	bne.n	80021b6 <LT768_PWM0_Init+0x54>
 80021b2:	f7ff f8bd 	bl	8001330 <Select_PWM0_Clock_Divided_By_8>

	Set_Timer0_Count_Buffer(Count_Buffer);  
 80021b6:	887b      	ldrh	r3, [r7, #2]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff f97a 	bl	80014b2 <Set_Timer0_Count_Buffer>
	Set_Timer0_Compare_Buffer(Compare_Buffer);	
 80021be:	8b3b      	ldrh	r3, [r7, #24]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff f95b 	bl	800147c <Set_Timer0_Compare_Buffer>
		
	if (on_off == 1)	Start_PWM0(); 
 80021c6:	79fb      	ldrb	r3, [r7, #7]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <LT768_PWM0_Init+0x6e>
 80021cc:	f7ff f92a 	bl	8001424 <Start_PWM0>
	if (on_off == 0)	Stop_PWM0();
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <LT768_PWM0_Init+0x78>
 80021d6:	f7ff f93b 	bl	8001450 <Stop_PWM0>
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd90      	pop	{r4, r7, pc}

080021e2 <LT768_PWM1_Init>:
,unsigned char Clock_Divided                // PWMʱ�ӷ�Ƶ  ȡֵ��Χ 0~3(1,1/2,1/4,1/8)
,unsigned char Prescalar                    // ʱ�ӷ�Ƶ     ȡֵ��Χ 1~256
,unsigned short Count_Buffer                // ����PWM���������
,unsigned short Compare_Buffer              // ����ռ�ձ�
)
{
 80021e2:	b590      	push	{r4, r7, lr}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	4604      	mov	r4, r0
 80021ea:	4608      	mov	r0, r1
 80021ec:	4611      	mov	r1, r2
 80021ee:	461a      	mov	r2, r3
 80021f0:	4623      	mov	r3, r4
 80021f2:	71fb      	strb	r3, [r7, #7]
 80021f4:	4603      	mov	r3, r0
 80021f6:	71bb      	strb	r3, [r7, #6]
 80021f8:	460b      	mov	r3, r1
 80021fa:	717b      	strb	r3, [r7, #5]
 80021fc:	4613      	mov	r3, r2
 80021fe:	807b      	strh	r3, [r7, #2]
	Select_PWM1();
 8002200:	f7ff f8b0 	bl	8001364 <Select_PWM1>
	Set_PWM_Prescaler_1_to_256(Prescalar);
 8002204:	797b      	ldrb	r3, [r7, #5]
 8002206:	b29b      	uxth	r3, r3
 8002208:	4618      	mov	r0, r3
 800220a:	f7fe ffc7 	bl	800119c <Set_PWM_Prescaler_1_to_256>
 
	if(Clock_Divided ==0)	Select_PWM1_Clock_Divided_By_1();
 800220e:	79bb      	ldrb	r3, [r7, #6]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <LT768_PWM1_Init+0x36>
 8002214:	f7fe ffd6 	bl	80011c4 <Select_PWM1_Clock_Divided_By_1>
	if(Clock_Divided ==1)	Select_PWM1_Clock_Divided_By_2();
 8002218:	79bb      	ldrb	r3, [r7, #6]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <LT768_PWM1_Init+0x40>
 800221e:	f7fe ffeb 	bl	80011f8 <Select_PWM1_Clock_Divided_By_2>
	if(Clock_Divided ==2) Select_PWM1_Clock_Divided_By_4();
 8002222:	79bb      	ldrb	r3, [r7, #6]
 8002224:	2b02      	cmp	r3, #2
 8002226:	d101      	bne.n	800222c <LT768_PWM1_Init+0x4a>
 8002228:	f7ff f800 	bl	800122c <Select_PWM1_Clock_Divided_By_4>
	if(Clock_Divided ==3)	Select_PWM1_Clock_Divided_By_8();
 800222c:	79bb      	ldrb	r3, [r7, #6]
 800222e:	2b03      	cmp	r3, #3
 8002230:	d101      	bne.n	8002236 <LT768_PWM1_Init+0x54>
 8002232:	f7ff f815 	bl	8001260 <Select_PWM1_Clock_Divided_By_8>

	Set_Timer1_Count_Buffer(Count_Buffer); 
 8002236:	887b      	ldrh	r3, [r7, #2]
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff f970 	bl	800151e <Set_Timer1_Count_Buffer>
	Set_Timer1_Compare_Buffer(Compare_Buffer); 
 800223e:	8b3b      	ldrh	r3, [r7, #24]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff f951 	bl	80014e8 <Set_Timer1_Compare_Buffer>

	if (on_off == 1)	Start_PWM1(); 
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <LT768_PWM1_Init+0x6e>
 800224c:	f7ff f8be 	bl	80013cc <Start_PWM1>
	if (on_off == 0)	Stop_PWM1();
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <LT768_PWM1_Init+0x78>
 8002256:	f7ff f8cf 	bl	80013f8 <Stop_PWM1>
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	bd90      	pop	{r4, r7, pc}
	...

08002264 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08a      	sub	sp, #40	; 0x28
 8002268:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226a:	f107 0314 	add.w	r3, r7, #20
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	605a      	str	r2, [r3, #4]
 8002274:	609a      	str	r2, [r3, #8]
 8002276:	60da      	str	r2, [r3, #12]
 8002278:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	613b      	str	r3, [r7, #16]
 800227e:	4b4d      	ldr	r3, [pc, #308]	; (80023b4 <MX_GPIO_Init+0x150>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	4a4c      	ldr	r2, [pc, #304]	; (80023b4 <MX_GPIO_Init+0x150>)
 8002284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002288:	6313      	str	r3, [r2, #48]	; 0x30
 800228a:	4b4a      	ldr	r3, [pc, #296]	; (80023b4 <MX_GPIO_Init+0x150>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	4b46      	ldr	r3, [pc, #280]	; (80023b4 <MX_GPIO_Init+0x150>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	4a45      	ldr	r2, [pc, #276]	; (80023b4 <MX_GPIO_Init+0x150>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6313      	str	r3, [r2, #48]	; 0x30
 80022a6:	4b43      	ldr	r3, [pc, #268]	; (80023b4 <MX_GPIO_Init+0x150>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	4b3f      	ldr	r3, [pc, #252]	; (80023b4 <MX_GPIO_Init+0x150>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	4a3e      	ldr	r2, [pc, #248]	; (80023b4 <MX_GPIO_Init+0x150>)
 80022bc:	f043 0304 	orr.w	r3, r3, #4
 80022c0:	6313      	str	r3, [r2, #48]	; 0x30
 80022c2:	4b3c      	ldr	r3, [pc, #240]	; (80023b4 <MX_GPIO_Init+0x150>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f003 0304 	and.w	r3, r3, #4
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	607b      	str	r3, [r7, #4]
 80022d2:	4b38      	ldr	r3, [pc, #224]	; (80023b4 <MX_GPIO_Init+0x150>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4a37      	ldr	r2, [pc, #220]	; (80023b4 <MX_GPIO_Init+0x150>)
 80022d8:	f043 0308 	orr.w	r3, r3, #8
 80022dc:	6313      	str	r3, [r2, #48]	; 0x30
 80022de:	4b35      	ldr	r3, [pc, #212]	; (80023b4 <MX_GPIO_Init+0x150>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	607b      	str	r3, [r7, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	603b      	str	r3, [r7, #0]
 80022ee:	4b31      	ldr	r3, [pc, #196]	; (80023b4 <MX_GPIO_Init+0x150>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	4a30      	ldr	r2, [pc, #192]	; (80023b4 <MX_GPIO_Init+0x150>)
 80022f4:	f043 0302 	orr.w	r3, r3, #2
 80022f8:	6313      	str	r3, [r2, #48]	; 0x30
 80022fa:	4b2e      	ldr	r3, [pc, #184]	; (80023b4 <MX_GPIO_Init+0x150>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	603b      	str	r3, [r7, #0]
 8002304:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_5V_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8002306:	2200      	movs	r2, #0
 8002308:	f248 0101 	movw	r1, #32769	; 0x8001
 800230c:	482a      	ldr	r0, [pc, #168]	; (80023b8 <MX_GPIO_Init+0x154>)
 800230e:	f003 f8cb 	bl	80054a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_PIN_TP_GPIO_Port, RST_PIN_TP_Pin, GPIO_PIN_RESET);
 8002312:	2200      	movs	r2, #0
 8002314:	2101      	movs	r1, #1
 8002316:	4829      	ldr	r0, [pc, #164]	; (80023bc <MX_GPIO_Init+0x158>)
 8002318:	f003 f8c6 	bl	80054a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800231c:	2200      	movs	r2, #0
 800231e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002322:	4827      	ldr	r0, [pc, #156]	; (80023c0 <MX_GPIO_Init+0x15c>)
 8002324:	f003 f8c0 	bl	80054a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_5V_Pin|SPI_CS_Pin;
 8002328:	f248 0301 	movw	r3, #32769	; 0x8001
 800232c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800232e:	2301      	movs	r3, #1
 8002330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002336:	2300      	movs	r3, #0
 8002338:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233a:	f107 0314 	add.w	r3, r7, #20
 800233e:	4619      	mov	r1, r3
 8002340:	481d      	ldr	r0, [pc, #116]	; (80023b8 <MX_GPIO_Init+0x154>)
 8002342:	f002 ff2d 	bl	80051a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_PIN_TP_Pin;
 8002346:	2301      	movs	r3, #1
 8002348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234a:	2301      	movs	r3, #1
 800234c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002352:	2300      	movs	r3, #0
 8002354:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST_PIN_TP_GPIO_Port, &GPIO_InitStruct);
 8002356:	f107 0314 	add.w	r3, r7, #20
 800235a:	4619      	mov	r1, r3
 800235c:	4817      	ldr	r0, [pc, #92]	; (80023bc <MX_GPIO_Init+0x158>)
 800235e:	f002 ff1f 	bl	80051a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CTP_INT_PIN_Pin;
 8002362:	2302      	movs	r3, #2
 8002364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002366:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800236a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CTP_INT_PIN_GPIO_Port, &GPIO_InitStruct);
 8002370:	f107 0314 	add.w	r3, r7, #20
 8002374:	4619      	mov	r1, r3
 8002376:	4811      	ldr	r0, [pc, #68]	; (80023bc <MX_GPIO_Init+0x158>)
 8002378:	f002 ff12 	bl	80051a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800237c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002382:	2301      	movs	r3, #1
 8002384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238a:	2300      	movs	r3, #0
 800238c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800238e:	f107 0314 	add.w	r3, r7, #20
 8002392:	4619      	mov	r1, r3
 8002394:	480a      	ldr	r0, [pc, #40]	; (80023c0 <MX_GPIO_Init+0x15c>)
 8002396:	f002 ff03 	bl	80051a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800239a:	2200      	movs	r2, #0
 800239c:	2100      	movs	r1, #0
 800239e:	2007      	movs	r0, #7
 80023a0:	f002 feb9 	bl	8005116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80023a4:	2007      	movs	r0, #7
 80023a6:	f002 fed2 	bl	800514e <HAL_NVIC_EnableIRQ>

}
 80023aa:	bf00      	nop
 80023ac:	3728      	adds	r7, #40	; 0x28
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40020000 	.word	0x40020000
 80023bc:	40020c00 	.word	0x40020c00
 80023c0:	40020400 	.word	0x40020400

080023c4 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80023c8:	4b12      	ldr	r3, [pc, #72]	; (8002414 <MX_I2C3_Init+0x50>)
 80023ca:	4a13      	ldr	r2, [pc, #76]	; (8002418 <MX_I2C3_Init+0x54>)
 80023cc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80023ce:	4b11      	ldr	r3, [pc, #68]	; (8002414 <MX_I2C3_Init+0x50>)
 80023d0:	4a12      	ldr	r2, [pc, #72]	; (800241c <MX_I2C3_Init+0x58>)
 80023d2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023d4:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <MX_I2C3_Init+0x50>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80023da:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <MX_I2C3_Init+0x50>)
 80023dc:	2200      	movs	r2, #0
 80023de:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023e0:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <MX_I2C3_Init+0x50>)
 80023e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023e6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023e8:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <MX_I2C3_Init+0x50>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80023ee:	4b09      	ldr	r3, [pc, #36]	; (8002414 <MX_I2C3_Init+0x50>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023f4:	4b07      	ldr	r3, [pc, #28]	; (8002414 <MX_I2C3_Init+0x50>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <MX_I2C3_Init+0x50>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002400:	4804      	ldr	r0, [pc, #16]	; (8002414 <MX_I2C3_Init+0x50>)
 8002402:	f003 f883 	bl	800550c <HAL_I2C_Init>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800240c:	f001 fc9c 	bl	8003d48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002410:	bf00      	nop
 8002412:	bd80      	pop	{r7, pc}
 8002414:	2000031c 	.word	0x2000031c
 8002418:	40005c00 	.word	0x40005c00
 800241c:	000186a0 	.word	0x000186a0

08002420 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08a      	sub	sp, #40	; 0x28
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a29      	ldr	r2, [pc, #164]	; (80024e4 <HAL_I2C_MspInit+0xc4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d14b      	bne.n	80024da <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	4b28      	ldr	r3, [pc, #160]	; (80024e8 <HAL_I2C_MspInit+0xc8>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	4a27      	ldr	r2, [pc, #156]	; (80024e8 <HAL_I2C_MspInit+0xc8>)
 800244c:	f043 0304 	orr.w	r3, r3, #4
 8002450:	6313      	str	r3, [r2, #48]	; 0x30
 8002452:	4b25      	ldr	r3, [pc, #148]	; (80024e8 <HAL_I2C_MspInit+0xc8>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	4b21      	ldr	r3, [pc, #132]	; (80024e8 <HAL_I2C_MspInit+0xc8>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	4a20      	ldr	r2, [pc, #128]	; (80024e8 <HAL_I2C_MspInit+0xc8>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	6313      	str	r3, [r2, #48]	; 0x30
 800246e:	4b1e      	ldr	r3, [pc, #120]	; (80024e8 <HAL_I2C_MspInit+0xc8>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800247a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800247e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002480:	2312      	movs	r3, #18
 8002482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002488:	2303      	movs	r3, #3
 800248a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800248c:	2304      	movs	r3, #4
 800248e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002490:	f107 0314 	add.w	r3, r7, #20
 8002494:	4619      	mov	r1, r3
 8002496:	4815      	ldr	r0, [pc, #84]	; (80024ec <HAL_I2C_MspInit+0xcc>)
 8002498:	f002 fe82 	bl	80051a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800249c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024a2:	2312      	movs	r3, #18
 80024a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024aa:	2303      	movs	r3, #3
 80024ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80024ae:	2304      	movs	r3, #4
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b2:	f107 0314 	add.w	r3, r7, #20
 80024b6:	4619      	mov	r1, r3
 80024b8:	480d      	ldr	r0, [pc, #52]	; (80024f0 <HAL_I2C_MspInit+0xd0>)
 80024ba:	f002 fe71 	bl	80051a0 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <HAL_I2C_MspInit+0xc8>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	4a08      	ldr	r2, [pc, #32]	; (80024e8 <HAL_I2C_MspInit+0xc8>)
 80024c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024cc:	6413      	str	r3, [r2, #64]	; 0x40
 80024ce:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_I2C_MspInit+0xc8>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024d6:	60bb      	str	r3, [r7, #8]
 80024d8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80024da:	bf00      	nop
 80024dc:	3728      	adds	r7, #40	; 0x28
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40005c00 	.word	0x40005c00
 80024e8:	40023800 	.word	0x40023800
 80024ec:	40020800 	.word	0x40020800
 80024f0:	40020000 	.word	0x40020000

080024f4 <SPI2_ReadWriteByte>:

#if STM32_SPI_8


uint16_t SPI2_ReadWriteByte(uint16_t TxData)
{		
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	80fb      	strh	r3, [r7, #6]
	//uint16_t retry=0;				 
	while((SPI1->SR&1<<1)==0)		//Wait for the sending area to be empty
 80024fe:	bf00      	nop
 8002500:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <SPI2_ReadWriteByte+0x40>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0f9      	beq.n	8002500 <SPI2_ReadWriteByte+0xc>
	{
//		retry++;
//		if(retry>=0XFFFE)return 0; 	//Exit after timeout
	}			  
	SPI1->DR=TxData;	 	  		// send a byte
 800250c:	4a09      	ldr	r2, [pc, #36]	; (8002534 <SPI2_ReadWriteByte+0x40>)
 800250e:	88fb      	ldrh	r3, [r7, #6]
 8002510:	60d3      	str	r3, [r2, #12]
//	retry=0;
	while((SPI1->SR&1<<0)==0) 		//Wait to receive a byte
 8002512:	bf00      	nop
 8002514:	4b07      	ldr	r3, [pc, #28]	; (8002534 <SPI2_ReadWriteByte+0x40>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0f9      	beq.n	8002514 <SPI2_ReadWriteByte+0x20>
	{
	//	retry++;
//		if(retry>=0XFFFE)return 0;	//Exit after timeout
	}	  						    
	return SPI1->DR;          		//return the received data
 8002520:	4b04      	ldr	r3, [pc, #16]	; (8002534 <SPI2_ReadWriteByte+0x40>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	b29b      	uxth	r3, r3
}
 8002526:	4618      	mov	r0, r3
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40013000 	.word	0x40013000

08002538 <SPI_CmdWrite_8>:

void SPI_CmdWrite_8(uint8_t cmd)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	71fb      	strb	r3, [r7, #7]
	uint8_t variable_CmdWrite=0;
 8002542:	2300      	movs	r3, #0
 8002544:	73fb      	strb	r3, [r7, #15]
	SS_RESET; 	      
 8002546:	2200      	movs	r2, #0
 8002548:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800254c:	480b      	ldr	r0, [pc, #44]	; (800257c <SPI_CmdWrite_8+0x44>)
 800254e:	f002 ffab 	bl	80054a8 <HAL_GPIO_WritePin>
	SPI2_ReadWriteByte(0x00);
 8002552:	2000      	movs	r0, #0
 8002554:	f7ff ffce 	bl	80024f4 <SPI2_ReadWriteByte>

	variable_CmdWrite=SPI2_ReadWriteByte(cmd);
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	b29b      	uxth	r3, r3
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ffc9 	bl	80024f4 <SPI2_ReadWriteByte>
 8002562:	4603      	mov	r3, r0
 8002564:	73fb      	strb	r3, [r7, #15]
	//printf("myvariable:%x \r\n",variable_CmdWrite);
	SS_SET;
 8002566:	2201      	movs	r2, #1
 8002568:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800256c:	4803      	ldr	r0, [pc, #12]	; (800257c <SPI_CmdWrite_8+0x44>)
 800256e:	f002 ff9b 	bl	80054a8 <HAL_GPIO_WritePin>
}
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40020000 	.word	0x40020000

08002580 <SPI_DataWrite_8>:

void SPI_DataWrite_8(uint8_t data)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	71fb      	strb	r3, [r7, #7]
	SS_RESET; 	      
 800258a:	2200      	movs	r2, #0
 800258c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002590:	480a      	ldr	r0, [pc, #40]	; (80025bc <SPI_DataWrite_8+0x3c>)
 8002592:	f002 ff89 	bl	80054a8 <HAL_GPIO_WritePin>
	SPI2_ReadWriteByte(0x80);
 8002596:	2080      	movs	r0, #128	; 0x80
 8002598:	f7ff ffac 	bl	80024f4 <SPI2_ReadWriteByte>
	SPI2_ReadWriteByte(data);
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff ffa7 	bl	80024f4 <SPI2_ReadWriteByte>
	SS_SET;
 80025a6:	2201      	movs	r2, #1
 80025a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025ac:	4803      	ldr	r0, [pc, #12]	; (80025bc <SPI_DataWrite_8+0x3c>)
 80025ae:	f002 ff7b 	bl	80054a8 <HAL_GPIO_WritePin>
}
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40020000 	.word	0x40020000

080025c0 <SPI_StatusRead_8>:
	SPI2_ReadWriteByte(data>>8);
	SS_SET;
}

uint8_t SPI_StatusRead_8(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	71fb      	strb	r3, [r7, #7]
	uint8_t myvariable=0; //var for checking code working
 80025ca:	2300      	movs	r3, #0
 80025cc:	71bb      	strb	r3, [r7, #6]
	SS_RESET; 	
 80025ce:	2200      	movs	r2, #0
 80025d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025d4:	480b      	ldr	r0, [pc, #44]	; (8002604 <SPI_StatusRead_8+0x44>)
 80025d6:	f002 ff67 	bl	80054a8 <HAL_GPIO_WritePin>
	myvariable=SPI2_ReadWriteByte(0x40);//0X40
 80025da:	2040      	movs	r0, #64	; 0x40
 80025dc:	f7ff ff8a 	bl	80024f4 <SPI2_ReadWriteByte>
 80025e0:	4603      	mov	r3, r0
 80025e2:	71bb      	strb	r3, [r7, #6]
	//printf("myvariable:%x \r\n",myvariable);
	temp = SPI2_ReadWriteByte(0xff);
 80025e4:	20ff      	movs	r0, #255	; 0xff
 80025e6:	f7ff ff85 	bl	80024f4 <SPI2_ReadWriteByte>
 80025ea:	4603      	mov	r3, r0
 80025ec:	71fb      	strb	r3, [r7, #7]
	SS_SET;
 80025ee:	2201      	movs	r2, #1
 80025f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025f4:	4803      	ldr	r0, [pc, #12]	; (8002604 <SPI_StatusRead_8+0x44>)
 80025f6:	f002 ff57 	bl	80054a8 <HAL_GPIO_WritePin>
	return temp;
 80025fa:	79fb      	ldrb	r3, [r7, #7]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40020000 	.word	0x40020000

08002608 <SPI_DataRead_8>:

uint16_t SPI_DataRead_8(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
	uint16_t temp = 0;
 800260e:	2300      	movs	r3, #0
 8002610:	80fb      	strh	r3, [r7, #6]
	SS_RESET; 	      
 8002612:	2200      	movs	r2, #0
 8002614:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002618:	480a      	ldr	r0, [pc, #40]	; (8002644 <SPI_DataRead_8+0x3c>)
 800261a:	f002 ff45 	bl	80054a8 <HAL_GPIO_WritePin>
	SPI2_ReadWriteByte(0xc0);
 800261e:	20c0      	movs	r0, #192	; 0xc0
 8002620:	f7ff ff68 	bl	80024f4 <SPI2_ReadWriteByte>
	temp = SPI2_ReadWriteByte(0xff);
 8002624:	20ff      	movs	r0, #255	; 0xff
 8002626:	f7ff ff65 	bl	80024f4 <SPI2_ReadWriteByte>
 800262a:	4603      	mov	r3, r0
 800262c:	80fb      	strh	r3, [r7, #6]
	SS_SET;
 800262e:	2201      	movs	r2, #1
 8002630:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002634:	4803      	ldr	r0, [pc, #12]	; (8002644 <SPI_DataRead_8+0x3c>)
 8002636:	f002 ff37 	bl	80054a8 <HAL_GPIO_WritePin>
	return temp;
 800263a:	88fb      	ldrh	r3, [r7, #6]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40020000 	.word	0x40020000

08002648 <LCD_CmdWrite>:


//-----------------------------------------------------------------------------------------------------------------------------------

void LCD_CmdWrite(uint8_t cmd)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	71fb      	strb	r3, [r7, #7]
	
	#if STM32_SPI_8
	SPI_CmdWrite_8(cmd);
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff ff6f 	bl	8002538 <SPI_CmdWrite_8>
	#endif
}
 800265a:	bf00      	nop
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <LCD_DataWrite>:

void LCD_DataWrite(uint8_t data)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b082      	sub	sp, #8
 8002666:	af00      	add	r7, sp, #0
 8002668:	4603      	mov	r3, r0
 800266a:	71fb      	strb	r3, [r7, #7]
	
	#if STM32_SPI_8
	SPI_DataWrite_8(data);
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff ff86 	bl	8002580 <SPI_DataWrite_8>
	#endif
	

}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <LCD_StatusRead>:
    
}


uint8_t LCD_StatusRead(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 8002682:	2300      	movs	r3, #0
 8002684:	71fb      	strb	r3, [r7, #7]

	
	#if STM32_SPI_8
	temp = SPI_StatusRead_8();
 8002686:	f7ff ff9b 	bl	80025c0 <SPI_StatusRead_8>
 800268a:	4603      	mov	r3, r0
 800268c:	71fb      	strb	r3, [r7, #7]
	#endif

	return temp;
 800268e:	79fb      	ldrb	r3, [r7, #7]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <LCD_DataRead>:

uint16_t LCD_DataRead(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
	uint16_t temp = 0;
 800269e:	2300      	movs	r3, #0
 80026a0:	80fb      	strh	r3, [r7, #6]
	
	#if STM32_SPI_8
	temp = SPI_DataRead_8();
 80026a2:	f7ff ffb1 	bl	8002608 <SPI_DataRead_8>
 80026a6:	4603      	mov	r3, r0
 80026a8:	80fb      	strh	r3, [r7, #6]
	#endif
	
	return temp;
 80026aa:	88fb      	ldrh	r3, [r7, #6]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <Delay_us>:
	  
	 
void Delay_us(uint16_t time)
{    
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	80fb      	strh	r3, [r7, #6]
   uint16_t i=0;  
 80026be:	2300      	movs	r3, #0
 80026c0:	81fb      	strh	r3, [r7, #14]
   while(time--)
 80026c2:	e007      	b.n	80026d4 <Delay_us+0x20>
   {
      i=12;        //�Լ�����
 80026c4:	230c      	movs	r3, #12
 80026c6:	81fb      	strh	r3, [r7, #14]
      while(i--) ;    
 80026c8:	bf00      	nop
 80026ca:	89fb      	ldrh	r3, [r7, #14]
 80026cc:	1e5a      	subs	r2, r3, #1
 80026ce:	81fa      	strh	r2, [r7, #14]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1fa      	bne.n	80026ca <Delay_us+0x16>
   while(time--)
 80026d4:	88fb      	ldrh	r3, [r7, #6]
 80026d6:	1e5a      	subs	r2, r3, #1
 80026d8:	80fa      	strh	r2, [r7, #6]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f2      	bne.n	80026c4 <Delay_us+0x10>
   }
}
 80026de:	bf00      	nop
 80026e0:	bf00      	nop
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <Delay_ms>:

void Delay_ms(uint16_t time)
{    
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	80fb      	strh	r3, [r7, #6]
   uint16_t i=0;  
 80026f6:	2300      	movs	r3, #0
 80026f8:	81fb      	strh	r3, [r7, #14]
   while(time--)
 80026fa:	e008      	b.n	800270e <Delay_ms+0x22>
   {
      i=12000;    //�Լ�����
 80026fc:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8002700:	81fb      	strh	r3, [r7, #14]
      while(i--) ;    
 8002702:	bf00      	nop
 8002704:	89fb      	ldrh	r3, [r7, #14]
 8002706:	1e5a      	subs	r2, r3, #1
 8002708:	81fa      	strh	r2, [r7, #14]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1fa      	bne.n	8002704 <Delay_ms+0x18>
   while(time--)
 800270e:	88fb      	ldrh	r3, [r7, #6]
 8002710:	1e5a      	subs	r2, r3, #1
 8002712:	80fa      	strh	r2, [r7, #6]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f1      	bne.n	80026fc <Delay_ms+0x10>
   }
}
 8002718:	bf00      	nop
 800271a:	bf00      	nop
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
	...

08002728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800272e:	f002 fb5d 	bl	8004dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002732:	f000 fb17 	bl	8002d64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002736:	f7ff fd95 	bl	8002264 <MX_GPIO_Init>
  MX_SPI1_Init();
 800273a:	f001 fb0b 	bl	8003d54 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800273e:	f002 fab9 	bl	8004cb4 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8002742:	f7ff fe3f 	bl	80023c4 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  // 5 volt for the LCD to get ON
  HAL_GPIO_WritePin(GPIOA, LCD_5V_Pin, GPIO_PIN_SET);
 8002746:	2201      	movs	r2, #1
 8002748:	2101      	movs	r1, #1
 800274a:	48a6      	ldr	r0, [pc, #664]	; (80029e4 <main+0x2bc>)
 800274c:	f002 feac 	bl	80054a8 <HAL_GPIO_WritePin>
  /*LCD initialization */
    LT768_Init();
 8002750:	f7ff fae4 	bl	8001d1c <LT768_Init>
  	Select_SFI_Dual_Mode0();
 8002754:	f7fe fefe 	bl	8001554 <Select_SFI_Dual_Mode0>
  	LT768_PWM0_Init(1,0,200,100,0);
 8002758:	2300      	movs	r3, #0
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	2364      	movs	r3, #100	; 0x64
 800275e:	22c8      	movs	r2, #200	; 0xc8
 8002760:	2100      	movs	r1, #0
 8002762:	2001      	movs	r0, #1
 8002764:	f7ff fcfd 	bl	8002162 <LT768_PWM0_Init>
  	LT768_PWM1_Init(1,0,200,100,PwmControl);
 8002768:	4b9f      	ldr	r3, [pc, #636]	; (80029e8 <main+0x2c0>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	b29b      	uxth	r3, r3
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	2364      	movs	r3, #100	; 0x64
 8002772:	22c8      	movs	r2, #200	; 0xc8
 8002774:	2100      	movs	r1, #0
 8002776:	2001      	movs	r0, #1
 8002778:	f7ff fd33 	bl	80021e2 <LT768_PWM1_Init>
  	CTP_Init_Panel(); //touch panel
 800277c:	f001 febc 	bl	80044f8 <CTP_Init_Panel>
  	Display_ON(); //turn on display
 8002780:	f7fe f83f 	bl	8000802 <Display_ON>
  	LT768_setMainWindow();
 8002784:	f7ff faec 	bl	8001d60 <LT768_setMainWindow>
  	//Main Screen Heading
  	LT768_DrawCircleSquare_Fill(158, 15, 590, 67,25, 25, MSColor);
 8002788:	f64a 1365 	movw	r3, #43365	; 0xa965
 800278c:	9302      	str	r3, [sp, #8]
 800278e:	2319      	movs	r3, #25
 8002790:	9301      	str	r3, [sp, #4]
 8002792:	2319      	movs	r3, #25
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	2343      	movs	r3, #67	; 0x43
 8002798:	f240 224e 	movw	r2, #590	; 0x24e
 800279c:	210f      	movs	r1, #15
 800279e:	209e      	movs	r0, #158	; 0x9e
 80027a0:	f7ff fbcd 	bl	8001f3e <LT768_DrawCircleSquare_Fill>
  	LT768_DrawCircleSquare_Fill(513, 15, 641, 67,25, 25, MSIndicator);
 80027a4:	f640 4374 	movw	r3, #3188	; 0xc74
 80027a8:	9302      	str	r3, [sp, #8]
 80027aa:	2319      	movs	r3, #25
 80027ac:	9301      	str	r3, [sp, #4]
 80027ae:	2319      	movs	r3, #25
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	2343      	movs	r3, #67	; 0x43
 80027b4:	f240 2281 	movw	r2, #641	; 0x281
 80027b8:	210f      	movs	r1, #15
 80027ba:	f240 2001 	movw	r0, #513	; 0x201
 80027be:	f7ff fbbe 	bl	8001f3e <LT768_DrawCircleSquare_Fill>
  	LT768_DrawLeftUpCurve_Fill(540, 67, 60, 52, White);
 80027c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	2334      	movs	r3, #52	; 0x34
 80027ca:	223c      	movs	r2, #60	; 0x3c
 80027cc:	2143      	movs	r1, #67	; 0x43
 80027ce:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80027d2:	f7ff fc1c 	bl	800200e <LT768_DrawLeftUpCurve_Fill>
  	LT768_DrawLeftUpCurve_Fill(540, 67, 48, 52, MSIndicator);
 80027d6:	f640 4374 	movw	r3, #3188	; 0xc74
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	2334      	movs	r3, #52	; 0x34
 80027de:	2230      	movs	r2, #48	; 0x30
 80027e0:	2143      	movs	r1, #67	; 0x43
 80027e2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80027e6:	f7ff fc12 	bl	800200e <LT768_DrawLeftUpCurve_Fill>
  	LT768_Select_Internal_Font_Init(32, 1, 1, 1, 1);
 80027ea:	2301      	movs	r3, #1
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	2301      	movs	r3, #1
 80027f0:	2201      	movs	r2, #1
 80027f2:	2101      	movs	r1, #1
 80027f4:	2020      	movs	r0, #32
 80027f6:	f7ff fc32 	bl	800205e <LT768_Select_Internal_Font_Init>
  	//Fonts Writing
  	LT768_Print_Internal_Font_String(187, 25, White, White, "INSTRUMENT AIR");
 80027fa:	4b7c      	ldr	r3, [pc, #496]	; (80029ec <main+0x2c4>)
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002802:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002806:	2119      	movs	r1, #25
 8002808:	20bb      	movs	r0, #187	; 0xbb
 800280a:	f7ff fc86 	bl	800211a <LT768_Print_Internal_Font_String>
  	LT768_Select_Internal_Font_Init(24, 1, 1, 1, 1);
 800280e:	2301      	movs	r3, #1
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	2301      	movs	r3, #1
 8002814:	2201      	movs	r2, #1
 8002816:	2101      	movs	r1, #1
 8002818:	2018      	movs	r0, #24
 800281a:	f7ff fc20 	bl	800205e <LT768_Select_Internal_Font_Init>
  	LT768_Print_Internal_Font_String(530, 30, White, White, "NORMAL");
 800281e:	4b74      	ldr	r3, [pc, #464]	; (80029f0 <main+0x2c8>)
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002826:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800282a:	211e      	movs	r1, #30
 800282c:	f240 2012 	movw	r0, #530	; 0x212
 8002830:	f7ff fc73 	bl	800211a <LT768_Print_Internal_Font_String>

  	/*
  	 * KeyPad Scanner
  	 * pass the starting x and y address
  	 */
  	drawKeyPad(317 , 150, PASSWORD_LENGTH);
 8002834:	2204      	movs	r2, #4
 8002836:	2196      	movs	r1, #150	; 0x96
 8002838:	f240 103d 	movw	r0, #317	; 0x13d
 800283c:	f000 fafc 	bl	8002e38 <drawKeyPad>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t x1 = 11,y1 = 14,x2 = 68,y2 = 72;
 8002840:	230b      	movs	r3, #11
 8002842:	80fb      	strh	r3, [r7, #6]
 8002844:	230e      	movs	r3, #14
 8002846:	80bb      	strh	r3, [r7, #4]
 8002848:	2344      	movs	r3, #68	; 0x44
 800284a:	807b      	strh	r3, [r7, #2]
 800284c:	2348      	movs	r3, #72	; 0x48
 800284e:	803b      	strh	r3, [r7, #0]
  while (1)
  {
	 if((point.input_x >= (xStart+x1) && point.input_y >= (yStart+y1) ) &&
 8002850:	4b68      	ldr	r3, [pc, #416]	; (80029f4 <main+0x2cc>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a68      	ldr	r2, [pc, #416]	; (80029f8 <main+0x2d0>)
 8002856:	8812      	ldrh	r2, [r2, #0]
 8002858:	4611      	mov	r1, r2
 800285a:	88fa      	ldrh	r2, [r7, #6]
 800285c:	440a      	add	r2, r1
 800285e:	4293      	cmp	r3, r2
 8002860:	d327      	bcc.n	80028b2 <main+0x18a>
 8002862:	4b64      	ldr	r3, [pc, #400]	; (80029f4 <main+0x2cc>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	4a65      	ldr	r2, [pc, #404]	; (80029fc <main+0x2d4>)
 8002868:	8812      	ldrh	r2, [r2, #0]
 800286a:	4611      	mov	r1, r2
 800286c:	88ba      	ldrh	r2, [r7, #4]
 800286e:	440a      	add	r2, r1
 8002870:	4293      	cmp	r3, r2
 8002872:	d31e      	bcc.n	80028b2 <main+0x18a>
			 ( point.input_x < (xStart+x2) && point.input_y < (yStart+y2)) )
 8002874:	4b5f      	ldr	r3, [pc, #380]	; (80029f4 <main+0x2cc>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a5f      	ldr	r2, [pc, #380]	; (80029f8 <main+0x2d0>)
 800287a:	8812      	ldrh	r2, [r2, #0]
 800287c:	4611      	mov	r1, r2
 800287e:	887a      	ldrh	r2, [r7, #2]
 8002880:	440a      	add	r2, r1
	 if((point.input_x >= (xStart+x1) && point.input_y >= (yStart+y1) ) &&
 8002882:	4293      	cmp	r3, r2
 8002884:	d215      	bcs.n	80028b2 <main+0x18a>
			 ( point.input_x < (xStart+x2) && point.input_y < (yStart+y2)) )
 8002886:	4b5b      	ldr	r3, [pc, #364]	; (80029f4 <main+0x2cc>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	4a5c      	ldr	r2, [pc, #368]	; (80029fc <main+0x2d4>)
 800288c:	8812      	ldrh	r2, [r2, #0]
 800288e:	4611      	mov	r1, r2
 8002890:	883a      	ldrh	r2, [r7, #0]
 8002892:	440a      	add	r2, r1
 8002894:	4293      	cmp	r3, r2
 8002896:	d20c      	bcs.n	80028b2 <main+0x18a>
			  {
				  point.input_x=0;
 8002898:	4b56      	ldr	r3, [pc, #344]	; (80029f4 <main+0x2cc>)
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
				  point.input_y=0;
 800289e:	4b55      	ldr	r3, [pc, #340]	; (80029f4 <main+0x2cc>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	605a      	str	r2, [r3, #4]
				  updatewidget(1);
 80028a4:	2001      	movs	r0, #1
 80028a6:	f000 fe5d 	bl	8003564 <updatewidget>
				  Keypad_storePassword(1);
 80028aa:	2001      	movs	r0, #1
 80028ac:	f000 fd30 	bl	8003310 <Keypad_storePassword>
 80028b0:	e1e8      	b.n	8002c84 <main+0x55c>
			  }
		  //touch detection for 2
		  else if((point.input_x >= (xStart+x1+77) && point.input_y >= (yStart+y1) ) &&
 80028b2:	4b50      	ldr	r3, [pc, #320]	; (80029f4 <main+0x2cc>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a50      	ldr	r2, [pc, #320]	; (80029f8 <main+0x2d0>)
 80028b8:	8812      	ldrh	r2, [r2, #0]
 80028ba:	4611      	mov	r1, r2
 80028bc:	88fa      	ldrh	r2, [r7, #6]
 80028be:	440a      	add	r2, r1
 80028c0:	324d      	adds	r2, #77	; 0x4d
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d328      	bcc.n	8002918 <main+0x1f0>
 80028c6:	4b4b      	ldr	r3, [pc, #300]	; (80029f4 <main+0x2cc>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	4a4c      	ldr	r2, [pc, #304]	; (80029fc <main+0x2d4>)
 80028cc:	8812      	ldrh	r2, [r2, #0]
 80028ce:	4611      	mov	r1, r2
 80028d0:	88ba      	ldrh	r2, [r7, #4]
 80028d2:	440a      	add	r2, r1
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d31f      	bcc.n	8002918 <main+0x1f0>
				 ( point.input_x < (xStart+x2+77) && point.input_y < (yStart+y2)) )
 80028d8:	4b46      	ldr	r3, [pc, #280]	; (80029f4 <main+0x2cc>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a46      	ldr	r2, [pc, #280]	; (80029f8 <main+0x2d0>)
 80028de:	8812      	ldrh	r2, [r2, #0]
 80028e0:	4611      	mov	r1, r2
 80028e2:	887a      	ldrh	r2, [r7, #2]
 80028e4:	440a      	add	r2, r1
 80028e6:	324d      	adds	r2, #77	; 0x4d
		  else if((point.input_x >= (xStart+x1+77) && point.input_y >= (yStart+y1) ) &&
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d215      	bcs.n	8002918 <main+0x1f0>
				 ( point.input_x < (xStart+x2+77) && point.input_y < (yStart+y2)) )
 80028ec:	4b41      	ldr	r3, [pc, #260]	; (80029f4 <main+0x2cc>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	4a42      	ldr	r2, [pc, #264]	; (80029fc <main+0x2d4>)
 80028f2:	8812      	ldrh	r2, [r2, #0]
 80028f4:	4611      	mov	r1, r2
 80028f6:	883a      	ldrh	r2, [r7, #0]
 80028f8:	440a      	add	r2, r1
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d20c      	bcs.n	8002918 <main+0x1f0>
				  {
					  point.input_x=0;
 80028fe:	4b3d      	ldr	r3, [pc, #244]	; (80029f4 <main+0x2cc>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
					  point.input_y=0;
 8002904:	4b3b      	ldr	r3, [pc, #236]	; (80029f4 <main+0x2cc>)
 8002906:	2200      	movs	r2, #0
 8002908:	605a      	str	r2, [r3, #4]
					  updatewidget(2);
 800290a:	2002      	movs	r0, #2
 800290c:	f000 fe2a 	bl	8003564 <updatewidget>
					  Keypad_storePassword(2);
 8002910:	2002      	movs	r0, #2
 8002912:	f000 fcfd 	bl	8003310 <Keypad_storePassword>
 8002916:	e1b5      	b.n	8002c84 <main+0x55c>
					}
		  //touch detection for 3
		  else if((point.input_x >= (xStart+x1+154) && point.input_y >= (yStart+y1) ) &&
 8002918:	4b36      	ldr	r3, [pc, #216]	; (80029f4 <main+0x2cc>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a36      	ldr	r2, [pc, #216]	; (80029f8 <main+0x2d0>)
 800291e:	8812      	ldrh	r2, [r2, #0]
 8002920:	4611      	mov	r1, r2
 8002922:	88fa      	ldrh	r2, [r7, #6]
 8002924:	440a      	add	r2, r1
 8002926:	329a      	adds	r2, #154	; 0x9a
 8002928:	4293      	cmp	r3, r2
 800292a:	d328      	bcc.n	800297e <main+0x256>
 800292c:	4b31      	ldr	r3, [pc, #196]	; (80029f4 <main+0x2cc>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	4a32      	ldr	r2, [pc, #200]	; (80029fc <main+0x2d4>)
 8002932:	8812      	ldrh	r2, [r2, #0]
 8002934:	4611      	mov	r1, r2
 8002936:	88ba      	ldrh	r2, [r7, #4]
 8002938:	440a      	add	r2, r1
 800293a:	4293      	cmp	r3, r2
 800293c:	d31f      	bcc.n	800297e <main+0x256>
				 ( point.input_x < (xStart+x2+154) && point.input_y < (yStart+y2)) )
 800293e:	4b2d      	ldr	r3, [pc, #180]	; (80029f4 <main+0x2cc>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a2d      	ldr	r2, [pc, #180]	; (80029f8 <main+0x2d0>)
 8002944:	8812      	ldrh	r2, [r2, #0]
 8002946:	4611      	mov	r1, r2
 8002948:	887a      	ldrh	r2, [r7, #2]
 800294a:	440a      	add	r2, r1
 800294c:	329a      	adds	r2, #154	; 0x9a
		  else if((point.input_x >= (xStart+x1+154) && point.input_y >= (yStart+y1) ) &&
 800294e:	4293      	cmp	r3, r2
 8002950:	d215      	bcs.n	800297e <main+0x256>
				 ( point.input_x < (xStart+x2+154) && point.input_y < (yStart+y2)) )
 8002952:	4b28      	ldr	r3, [pc, #160]	; (80029f4 <main+0x2cc>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	4a29      	ldr	r2, [pc, #164]	; (80029fc <main+0x2d4>)
 8002958:	8812      	ldrh	r2, [r2, #0]
 800295a:	4611      	mov	r1, r2
 800295c:	883a      	ldrh	r2, [r7, #0]
 800295e:	440a      	add	r2, r1
 8002960:	4293      	cmp	r3, r2
 8002962:	d20c      	bcs.n	800297e <main+0x256>
				  {
					  point.input_x=0;
 8002964:	4b23      	ldr	r3, [pc, #140]	; (80029f4 <main+0x2cc>)
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]
					  point.input_y=0;
 800296a:	4b22      	ldr	r3, [pc, #136]	; (80029f4 <main+0x2cc>)
 800296c:	2200      	movs	r2, #0
 800296e:	605a      	str	r2, [r3, #4]
					  updatewidget(3);
 8002970:	2003      	movs	r0, #3
 8002972:	f000 fdf7 	bl	8003564 <updatewidget>
					  Keypad_storePassword(3);
 8002976:	2003      	movs	r0, #3
 8002978:	f000 fcca 	bl	8003310 <Keypad_storePassword>
 800297c:	e182      	b.n	8002c84 <main+0x55c>
					}
		  //touch detection for 4
		  else if((point.input_x >= (xStart+x1) && point.input_y >= (yStart+y2+10) ) &&
 800297e:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <main+0x2cc>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a1d      	ldr	r2, [pc, #116]	; (80029f8 <main+0x2d0>)
 8002984:	8812      	ldrh	r2, [r2, #0]
 8002986:	4611      	mov	r1, r2
 8002988:	88fa      	ldrh	r2, [r7, #6]
 800298a:	440a      	add	r2, r1
 800298c:	4293      	cmp	r3, r2
 800298e:	d337      	bcc.n	8002a00 <main+0x2d8>
 8002990:	4b18      	ldr	r3, [pc, #96]	; (80029f4 <main+0x2cc>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	4a19      	ldr	r2, [pc, #100]	; (80029fc <main+0x2d4>)
 8002996:	8812      	ldrh	r2, [r2, #0]
 8002998:	4611      	mov	r1, r2
 800299a:	883a      	ldrh	r2, [r7, #0]
 800299c:	440a      	add	r2, r1
 800299e:	320a      	adds	r2, #10
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d32d      	bcc.n	8002a00 <main+0x2d8>
				 ( point.input_x < (xStart+x2) && point.input_y < (yStart+y2+66)) )
 80029a4:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <main+0x2cc>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a13      	ldr	r2, [pc, #76]	; (80029f8 <main+0x2d0>)
 80029aa:	8812      	ldrh	r2, [r2, #0]
 80029ac:	4611      	mov	r1, r2
 80029ae:	887a      	ldrh	r2, [r7, #2]
 80029b0:	440a      	add	r2, r1
		  else if((point.input_x >= (xStart+x1) && point.input_y >= (yStart+y2+10) ) &&
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d224      	bcs.n	8002a00 <main+0x2d8>
				 ( point.input_x < (xStart+x2) && point.input_y < (yStart+y2+66)) )
 80029b6:	4b0f      	ldr	r3, [pc, #60]	; (80029f4 <main+0x2cc>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	4a10      	ldr	r2, [pc, #64]	; (80029fc <main+0x2d4>)
 80029bc:	8812      	ldrh	r2, [r2, #0]
 80029be:	4611      	mov	r1, r2
 80029c0:	883a      	ldrh	r2, [r7, #0]
 80029c2:	440a      	add	r2, r1
 80029c4:	3242      	adds	r2, #66	; 0x42
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d21a      	bcs.n	8002a00 <main+0x2d8>
				  {
					  point.input_x=0;
 80029ca:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <main+0x2cc>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
					  point.input_y=0;
 80029d0:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <main+0x2cc>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	605a      	str	r2, [r3, #4]
					  updatewidget(4);
 80029d6:	2004      	movs	r0, #4
 80029d8:	f000 fdc4 	bl	8003564 <updatewidget>
					  Keypad_storePassword(4);
 80029dc:	2004      	movs	r0, #4
 80029de:	f000 fc97 	bl	8003310 <Keypad_storePassword>
 80029e2:	e14f      	b.n	8002c84 <main+0x55c>
 80029e4:	40020000 	.word	0x40020000
 80029e8:	20000000 	.word	0x20000000
 80029ec:	08008834 	.word	0x08008834
 80029f0:	08008844 	.word	0x08008844
 80029f4:	200003ec 	.word	0x200003ec
 80029f8:	2000037a 	.word	0x2000037a
 80029fc:	2000037c 	.word	0x2000037c
					}
		  //touch detection for 5
		  else if((point.input_x >= (xStart+x1+77) && point.input_y >= (yStart+y2+10) ) &&
 8002a00:	4b83      	ldr	r3, [pc, #524]	; (8002c10 <main+0x4e8>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a83      	ldr	r2, [pc, #524]	; (8002c14 <main+0x4ec>)
 8002a06:	8812      	ldrh	r2, [r2, #0]
 8002a08:	4611      	mov	r1, r2
 8002a0a:	88fa      	ldrh	r2, [r7, #6]
 8002a0c:	440a      	add	r2, r1
 8002a0e:	324d      	adds	r2, #77	; 0x4d
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d32a      	bcc.n	8002a6a <main+0x342>
 8002a14:	4b7e      	ldr	r3, [pc, #504]	; (8002c10 <main+0x4e8>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	4a7f      	ldr	r2, [pc, #508]	; (8002c18 <main+0x4f0>)
 8002a1a:	8812      	ldrh	r2, [r2, #0]
 8002a1c:	4611      	mov	r1, r2
 8002a1e:	883a      	ldrh	r2, [r7, #0]
 8002a20:	440a      	add	r2, r1
 8002a22:	320a      	adds	r2, #10
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d320      	bcc.n	8002a6a <main+0x342>
				 ( point.input_x < (xStart+x2+77) && point.input_y < (yStart+y2+66)) )
 8002a28:	4b79      	ldr	r3, [pc, #484]	; (8002c10 <main+0x4e8>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a79      	ldr	r2, [pc, #484]	; (8002c14 <main+0x4ec>)
 8002a2e:	8812      	ldrh	r2, [r2, #0]
 8002a30:	4611      	mov	r1, r2
 8002a32:	887a      	ldrh	r2, [r7, #2]
 8002a34:	440a      	add	r2, r1
 8002a36:	324d      	adds	r2, #77	; 0x4d
		  else if((point.input_x >= (xStart+x1+77) && point.input_y >= (yStart+y2+10) ) &&
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d216      	bcs.n	8002a6a <main+0x342>
				 ( point.input_x < (xStart+x2+77) && point.input_y < (yStart+y2+66)) )
 8002a3c:	4b74      	ldr	r3, [pc, #464]	; (8002c10 <main+0x4e8>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	4a75      	ldr	r2, [pc, #468]	; (8002c18 <main+0x4f0>)
 8002a42:	8812      	ldrh	r2, [r2, #0]
 8002a44:	4611      	mov	r1, r2
 8002a46:	883a      	ldrh	r2, [r7, #0]
 8002a48:	440a      	add	r2, r1
 8002a4a:	3242      	adds	r2, #66	; 0x42
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d20c      	bcs.n	8002a6a <main+0x342>
				  {
					  point.input_x=0;
 8002a50:	4b6f      	ldr	r3, [pc, #444]	; (8002c10 <main+0x4e8>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
					  point.input_y=0;
 8002a56:	4b6e      	ldr	r3, [pc, #440]	; (8002c10 <main+0x4e8>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	605a      	str	r2, [r3, #4]
					  updatewidget(5);
 8002a5c:	2005      	movs	r0, #5
 8002a5e:	f000 fd81 	bl	8003564 <updatewidget>
					  Keypad_storePassword(5);
 8002a62:	2005      	movs	r0, #5
 8002a64:	f000 fc54 	bl	8003310 <Keypad_storePassword>
 8002a68:	e10c      	b.n	8002c84 <main+0x55c>
					}
		  //touch detection for 6
		  else if((point.input_x >= (xStart+x1+154) && point.input_y >= (yStart+y2+10) ) &&
 8002a6a:	4b69      	ldr	r3, [pc, #420]	; (8002c10 <main+0x4e8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a69      	ldr	r2, [pc, #420]	; (8002c14 <main+0x4ec>)
 8002a70:	8812      	ldrh	r2, [r2, #0]
 8002a72:	4611      	mov	r1, r2
 8002a74:	88fa      	ldrh	r2, [r7, #6]
 8002a76:	440a      	add	r2, r1
 8002a78:	329a      	adds	r2, #154	; 0x9a
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d32a      	bcc.n	8002ad4 <main+0x3ac>
 8002a7e:	4b64      	ldr	r3, [pc, #400]	; (8002c10 <main+0x4e8>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	4a65      	ldr	r2, [pc, #404]	; (8002c18 <main+0x4f0>)
 8002a84:	8812      	ldrh	r2, [r2, #0]
 8002a86:	4611      	mov	r1, r2
 8002a88:	883a      	ldrh	r2, [r7, #0]
 8002a8a:	440a      	add	r2, r1
 8002a8c:	320a      	adds	r2, #10
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d320      	bcc.n	8002ad4 <main+0x3ac>
				 ( point.input_x < (xStart+x2+154) && point.input_y < (yStart+y2+66)) )
 8002a92:	4b5f      	ldr	r3, [pc, #380]	; (8002c10 <main+0x4e8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a5f      	ldr	r2, [pc, #380]	; (8002c14 <main+0x4ec>)
 8002a98:	8812      	ldrh	r2, [r2, #0]
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	887a      	ldrh	r2, [r7, #2]
 8002a9e:	440a      	add	r2, r1
 8002aa0:	329a      	adds	r2, #154	; 0x9a
		  else if((point.input_x >= (xStart+x1+154) && point.input_y >= (yStart+y2+10) ) &&
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d216      	bcs.n	8002ad4 <main+0x3ac>
				 ( point.input_x < (xStart+x2+154) && point.input_y < (yStart+y2+66)) )
 8002aa6:	4b5a      	ldr	r3, [pc, #360]	; (8002c10 <main+0x4e8>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	4a5b      	ldr	r2, [pc, #364]	; (8002c18 <main+0x4f0>)
 8002aac:	8812      	ldrh	r2, [r2, #0]
 8002aae:	4611      	mov	r1, r2
 8002ab0:	883a      	ldrh	r2, [r7, #0]
 8002ab2:	440a      	add	r2, r1
 8002ab4:	3242      	adds	r2, #66	; 0x42
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d20c      	bcs.n	8002ad4 <main+0x3ac>
				  {
					  point.input_x=0;
 8002aba:	4b55      	ldr	r3, [pc, #340]	; (8002c10 <main+0x4e8>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
					  point.input_y=0;
 8002ac0:	4b53      	ldr	r3, [pc, #332]	; (8002c10 <main+0x4e8>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	605a      	str	r2, [r3, #4]
					  updatewidget(6);
 8002ac6:	2006      	movs	r0, #6
 8002ac8:	f000 fd4c 	bl	8003564 <updatewidget>
					  Keypad_storePassword(6);
 8002acc:	2006      	movs	r0, #6
 8002ace:	f000 fc1f 	bl	8003310 <Keypad_storePassword>
 8002ad2:	e0d7      	b.n	8002c84 <main+0x55c>
					}
		  //touch detection for 7
		  else if((point.input_x >= (xStart+x1) && point.input_y >= (yStart+y2+76) ) &&
 8002ad4:	4b4e      	ldr	r3, [pc, #312]	; (8002c10 <main+0x4e8>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a4e      	ldr	r2, [pc, #312]	; (8002c14 <main+0x4ec>)
 8002ada:	8812      	ldrh	r2, [r2, #0]
 8002adc:	4611      	mov	r1, r2
 8002ade:	88fa      	ldrh	r2, [r7, #6]
 8002ae0:	440a      	add	r2, r1
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d329      	bcc.n	8002b3a <main+0x412>
 8002ae6:	4b4a      	ldr	r3, [pc, #296]	; (8002c10 <main+0x4e8>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	4a4b      	ldr	r2, [pc, #300]	; (8002c18 <main+0x4f0>)
 8002aec:	8812      	ldrh	r2, [r2, #0]
 8002aee:	4611      	mov	r1, r2
 8002af0:	883a      	ldrh	r2, [r7, #0]
 8002af2:	440a      	add	r2, r1
 8002af4:	324c      	adds	r2, #76	; 0x4c
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d31f      	bcc.n	8002b3a <main+0x412>
				 ( point.input_x < (xStart+x2) && point.input_y < (yStart+y2+132)) )
 8002afa:	4b45      	ldr	r3, [pc, #276]	; (8002c10 <main+0x4e8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a45      	ldr	r2, [pc, #276]	; (8002c14 <main+0x4ec>)
 8002b00:	8812      	ldrh	r2, [r2, #0]
 8002b02:	4611      	mov	r1, r2
 8002b04:	887a      	ldrh	r2, [r7, #2]
 8002b06:	440a      	add	r2, r1
		  else if((point.input_x >= (xStart+x1) && point.input_y >= (yStart+y2+76) ) &&
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d216      	bcs.n	8002b3a <main+0x412>
				 ( point.input_x < (xStart+x2) && point.input_y < (yStart+y2+132)) )
 8002b0c:	4b40      	ldr	r3, [pc, #256]	; (8002c10 <main+0x4e8>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	4a41      	ldr	r2, [pc, #260]	; (8002c18 <main+0x4f0>)
 8002b12:	8812      	ldrh	r2, [r2, #0]
 8002b14:	4611      	mov	r1, r2
 8002b16:	883a      	ldrh	r2, [r7, #0]
 8002b18:	440a      	add	r2, r1
 8002b1a:	3284      	adds	r2, #132	; 0x84
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d20c      	bcs.n	8002b3a <main+0x412>
				  {
					  point.input_x=0;
 8002b20:	4b3b      	ldr	r3, [pc, #236]	; (8002c10 <main+0x4e8>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
					  point.input_y=0;
 8002b26:	4b3a      	ldr	r3, [pc, #232]	; (8002c10 <main+0x4e8>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	605a      	str	r2, [r3, #4]
					  updatewidget(7);
 8002b2c:	2007      	movs	r0, #7
 8002b2e:	f000 fd19 	bl	8003564 <updatewidget>
					  Keypad_storePassword(7);
 8002b32:	2007      	movs	r0, #7
 8002b34:	f000 fbec 	bl	8003310 <Keypad_storePassword>
 8002b38:	e0a4      	b.n	8002c84 <main+0x55c>
					}
		  //touch detection for 8
		  else if((point.input_x >= (xStart+x1+77) && point.input_y >= (yStart+y2+76) ) &&
 8002b3a:	4b35      	ldr	r3, [pc, #212]	; (8002c10 <main+0x4e8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a35      	ldr	r2, [pc, #212]	; (8002c14 <main+0x4ec>)
 8002b40:	8812      	ldrh	r2, [r2, #0]
 8002b42:	4611      	mov	r1, r2
 8002b44:	88fa      	ldrh	r2, [r7, #6]
 8002b46:	440a      	add	r2, r1
 8002b48:	324d      	adds	r2, #77	; 0x4d
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d32a      	bcc.n	8002ba4 <main+0x47c>
 8002b4e:	4b30      	ldr	r3, [pc, #192]	; (8002c10 <main+0x4e8>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	4a31      	ldr	r2, [pc, #196]	; (8002c18 <main+0x4f0>)
 8002b54:	8812      	ldrh	r2, [r2, #0]
 8002b56:	4611      	mov	r1, r2
 8002b58:	883a      	ldrh	r2, [r7, #0]
 8002b5a:	440a      	add	r2, r1
 8002b5c:	324c      	adds	r2, #76	; 0x4c
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d320      	bcc.n	8002ba4 <main+0x47c>
				 ( point.input_x < (xStart+x2+77) && point.input_y < (yStart+y2+132)) )
 8002b62:	4b2b      	ldr	r3, [pc, #172]	; (8002c10 <main+0x4e8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a2b      	ldr	r2, [pc, #172]	; (8002c14 <main+0x4ec>)
 8002b68:	8812      	ldrh	r2, [r2, #0]
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	887a      	ldrh	r2, [r7, #2]
 8002b6e:	440a      	add	r2, r1
 8002b70:	324d      	adds	r2, #77	; 0x4d
		  else if((point.input_x >= (xStart+x1+77) && point.input_y >= (yStart+y2+76) ) &&
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d216      	bcs.n	8002ba4 <main+0x47c>
				 ( point.input_x < (xStart+x2+77) && point.input_y < (yStart+y2+132)) )
 8002b76:	4b26      	ldr	r3, [pc, #152]	; (8002c10 <main+0x4e8>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	4a27      	ldr	r2, [pc, #156]	; (8002c18 <main+0x4f0>)
 8002b7c:	8812      	ldrh	r2, [r2, #0]
 8002b7e:	4611      	mov	r1, r2
 8002b80:	883a      	ldrh	r2, [r7, #0]
 8002b82:	440a      	add	r2, r1
 8002b84:	3284      	adds	r2, #132	; 0x84
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d20c      	bcs.n	8002ba4 <main+0x47c>
				  {
					  point.input_x=0;
 8002b8a:	4b21      	ldr	r3, [pc, #132]	; (8002c10 <main+0x4e8>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
					  point.input_y=0;
 8002b90:	4b1f      	ldr	r3, [pc, #124]	; (8002c10 <main+0x4e8>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	605a      	str	r2, [r3, #4]
					  updatewidget(8);
 8002b96:	2008      	movs	r0, #8
 8002b98:	f000 fce4 	bl	8003564 <updatewidget>
					  Keypad_storePassword(8);
 8002b9c:	2008      	movs	r0, #8
 8002b9e:	f000 fbb7 	bl	8003310 <Keypad_storePassword>
 8002ba2:	e06f      	b.n	8002c84 <main+0x55c>
					}
		  //touch detection for 9
		  else if((point.input_x >= (xStart+x1+154) && point.input_y >= (yStart+y2+76) ) &&
 8002ba4:	4b1a      	ldr	r3, [pc, #104]	; (8002c10 <main+0x4e8>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a1a      	ldr	r2, [pc, #104]	; (8002c14 <main+0x4ec>)
 8002baa:	8812      	ldrh	r2, [r2, #0]
 8002bac:	4611      	mov	r1, r2
 8002bae:	88fa      	ldrh	r2, [r7, #6]
 8002bb0:	440a      	add	r2, r1
 8002bb2:	329a      	adds	r2, #154	; 0x9a
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d331      	bcc.n	8002c1c <main+0x4f4>
 8002bb8:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <main+0x4e8>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	4a16      	ldr	r2, [pc, #88]	; (8002c18 <main+0x4f0>)
 8002bbe:	8812      	ldrh	r2, [r2, #0]
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	883a      	ldrh	r2, [r7, #0]
 8002bc4:	440a      	add	r2, r1
 8002bc6:	324c      	adds	r2, #76	; 0x4c
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d327      	bcc.n	8002c1c <main+0x4f4>
				 ( point.input_x < (xStart+x2+154) && point.input_y < (yStart+y2+132)) )
 8002bcc:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <main+0x4e8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a10      	ldr	r2, [pc, #64]	; (8002c14 <main+0x4ec>)
 8002bd2:	8812      	ldrh	r2, [r2, #0]
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	887a      	ldrh	r2, [r7, #2]
 8002bd8:	440a      	add	r2, r1
 8002bda:	329a      	adds	r2, #154	; 0x9a
		  else if((point.input_x >= (xStart+x1+154) && point.input_y >= (yStart+y2+76) ) &&
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d21d      	bcs.n	8002c1c <main+0x4f4>
				 ( point.input_x < (xStart+x2+154) && point.input_y < (yStart+y2+132)) )
 8002be0:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <main+0x4e8>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	4a0c      	ldr	r2, [pc, #48]	; (8002c18 <main+0x4f0>)
 8002be6:	8812      	ldrh	r2, [r2, #0]
 8002be8:	4611      	mov	r1, r2
 8002bea:	883a      	ldrh	r2, [r7, #0]
 8002bec:	440a      	add	r2, r1
 8002bee:	3284      	adds	r2, #132	; 0x84
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d213      	bcs.n	8002c1c <main+0x4f4>
				  {
					  point.input_x=0;
 8002bf4:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <main+0x4e8>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
					  point.input_y=0;
 8002bfa:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <main+0x4e8>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	605a      	str	r2, [r3, #4]
					  updatewidget(9);
 8002c00:	2009      	movs	r0, #9
 8002c02:	f000 fcaf 	bl	8003564 <updatewidget>
					  Keypad_storePassword(9);
 8002c06:	2009      	movs	r0, #9
 8002c08:	f000 fb82 	bl	8003310 <Keypad_storePassword>
 8002c0c:	e03a      	b.n	8002c84 <main+0x55c>
 8002c0e:	bf00      	nop
 8002c10:	200003ec 	.word	0x200003ec
 8002c14:	2000037a 	.word	0x2000037a
 8002c18:	2000037c 	.word	0x2000037c
					}

		  //touch detection for 0
		  else if((point.input_x >= (xStart+x1+77) && point.input_y >= (yStart+y2+142) ) &&
 8002c1c:	4b4e      	ldr	r3, [pc, #312]	; (8002d58 <main+0x630>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a4e      	ldr	r2, [pc, #312]	; (8002d5c <main+0x634>)
 8002c22:	8812      	ldrh	r2, [r2, #0]
 8002c24:	4611      	mov	r1, r2
 8002c26:	88fa      	ldrh	r2, [r7, #6]
 8002c28:	440a      	add	r2, r1
 8002c2a:	324d      	adds	r2, #77	; 0x4d
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d329      	bcc.n	8002c84 <main+0x55c>
 8002c30:	4b49      	ldr	r3, [pc, #292]	; (8002d58 <main+0x630>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4a4a      	ldr	r2, [pc, #296]	; (8002d60 <main+0x638>)
 8002c36:	8812      	ldrh	r2, [r2, #0]
 8002c38:	4611      	mov	r1, r2
 8002c3a:	883a      	ldrh	r2, [r7, #0]
 8002c3c:	440a      	add	r2, r1
 8002c3e:	328e      	adds	r2, #142	; 0x8e
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d31f      	bcc.n	8002c84 <main+0x55c>
				 ( point.input_x < (xStart+x2+77) && point.input_y < (yStart+y2+198)) )
 8002c44:	4b44      	ldr	r3, [pc, #272]	; (8002d58 <main+0x630>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a44      	ldr	r2, [pc, #272]	; (8002d5c <main+0x634>)
 8002c4a:	8812      	ldrh	r2, [r2, #0]
 8002c4c:	4611      	mov	r1, r2
 8002c4e:	887a      	ldrh	r2, [r7, #2]
 8002c50:	440a      	add	r2, r1
 8002c52:	324d      	adds	r2, #77	; 0x4d
		  else if((point.input_x >= (xStart+x1+77) && point.input_y >= (yStart+y2+142) ) &&
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d215      	bcs.n	8002c84 <main+0x55c>
				 ( point.input_x < (xStart+x2+77) && point.input_y < (yStart+y2+198)) )
 8002c58:	4b3f      	ldr	r3, [pc, #252]	; (8002d58 <main+0x630>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	4a40      	ldr	r2, [pc, #256]	; (8002d60 <main+0x638>)
 8002c5e:	8812      	ldrh	r2, [r2, #0]
 8002c60:	4611      	mov	r1, r2
 8002c62:	883a      	ldrh	r2, [r7, #0]
 8002c64:	440a      	add	r2, r1
 8002c66:	32c6      	adds	r2, #198	; 0xc6
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d20b      	bcs.n	8002c84 <main+0x55c>
				  {
					  point.input_x=0;
 8002c6c:	4b3a      	ldr	r3, [pc, #232]	; (8002d58 <main+0x630>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
					  point.input_y=0;
 8002c72:	4b39      	ldr	r3, [pc, #228]	; (8002d58 <main+0x630>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	605a      	str	r2, [r3, #4]
					  updatewidget(11);  //11 indicating as 0
 8002c78:	200b      	movs	r0, #11
 8002c7a:	f000 fc73 	bl	8003564 <updatewidget>
					  Keypad_storePassword(0);
 8002c7e:	2000      	movs	r0, #0
 8002c80:	f000 fb46 	bl	8003310 <Keypad_storePassword>
					}


	 //touch detection for x
	  if((point.input_x >= (xStart+x1) && point.input_y >= (yStart+y2+142) ) &&
 8002c84:	4b34      	ldr	r3, [pc, #208]	; (8002d58 <main+0x630>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a34      	ldr	r2, [pc, #208]	; (8002d5c <main+0x634>)
 8002c8a:	8812      	ldrh	r2, [r2, #0]
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	88fa      	ldrh	r2, [r7, #6]
 8002c90:	440a      	add	r2, r1
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d328      	bcc.n	8002ce8 <main+0x5c0>
 8002c96:	4b30      	ldr	r3, [pc, #192]	; (8002d58 <main+0x630>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	4a31      	ldr	r2, [pc, #196]	; (8002d60 <main+0x638>)
 8002c9c:	8812      	ldrh	r2, [r2, #0]
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	883a      	ldrh	r2, [r7, #0]
 8002ca2:	440a      	add	r2, r1
 8002ca4:	328e      	adds	r2, #142	; 0x8e
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d31e      	bcc.n	8002ce8 <main+0x5c0>
		 ( point.input_x < (xStart+x2) && point.input_y < (yStart+y2+198)) )
 8002caa:	4b2b      	ldr	r3, [pc, #172]	; (8002d58 <main+0x630>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a2b      	ldr	r2, [pc, #172]	; (8002d5c <main+0x634>)
 8002cb0:	8812      	ldrh	r2, [r2, #0]
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	887a      	ldrh	r2, [r7, #2]
 8002cb6:	440a      	add	r2, r1
	  if((point.input_x >= (xStart+x1) && point.input_y >= (yStart+y2+142) ) &&
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d215      	bcs.n	8002ce8 <main+0x5c0>
		 ( point.input_x < (xStart+x2) && point.input_y < (yStart+y2+198)) )
 8002cbc:	4b26      	ldr	r3, [pc, #152]	; (8002d58 <main+0x630>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	4a27      	ldr	r2, [pc, #156]	; (8002d60 <main+0x638>)
 8002cc2:	8812      	ldrh	r2, [r2, #0]
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	883a      	ldrh	r2, [r7, #0]
 8002cc8:	440a      	add	r2, r1
 8002cca:	32c6      	adds	r2, #198	; 0xc6
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d20b      	bcs.n	8002ce8 <main+0x5c0>
		  {
			  point.input_x=0;
 8002cd0:	4b21      	ldr	r3, [pc, #132]	; (8002d58 <main+0x630>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
			  point.input_y=0;
 8002cd6:	4b20      	ldr	r3, [pc, #128]	; (8002d58 <main+0x630>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	605a      	str	r2, [r3, #4]
			  updatewidget(10);
 8002cdc:	200a      	movs	r0, #10
 8002cde:	f000 fc41 	bl	8003564 <updatewidget>
			  remove_last_entry_from_password();
 8002ce2:	f000 fb75 	bl	80033d0 <remove_last_entry_from_password>
 8002ce6:	e036      	b.n	8002d56 <main+0x62e>
			}

	//touch detection for Enter
	  else if((point.input_x >= (xStart+x1+154) && point.input_y >= (yStart+y2+142) ) &&
 8002ce8:	4b1b      	ldr	r3, [pc, #108]	; (8002d58 <main+0x630>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a1b      	ldr	r2, [pc, #108]	; (8002d5c <main+0x634>)
 8002cee:	8812      	ldrh	r2, [r2, #0]
 8002cf0:	4611      	mov	r1, r2
 8002cf2:	88fa      	ldrh	r2, [r7, #6]
 8002cf4:	440a      	add	r2, r1
 8002cf6:	329a      	adds	r2, #154	; 0x9a
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	f4ff ada9 	bcc.w	8002850 <main+0x128>
 8002cfe:	4b16      	ldr	r3, [pc, #88]	; (8002d58 <main+0x630>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	4a17      	ldr	r2, [pc, #92]	; (8002d60 <main+0x638>)
 8002d04:	8812      	ldrh	r2, [r2, #0]
 8002d06:	4611      	mov	r1, r2
 8002d08:	883a      	ldrh	r2, [r7, #0]
 8002d0a:	440a      	add	r2, r1
 8002d0c:	328e      	adds	r2, #142	; 0x8e
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	f4ff ad9e 	bcc.w	8002850 <main+0x128>
			 ( point.input_x < (xStart+x2+154) && point.input_y < (yStart+y2+198)) )
 8002d14:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <main+0x630>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a10      	ldr	r2, [pc, #64]	; (8002d5c <main+0x634>)
 8002d1a:	8812      	ldrh	r2, [r2, #0]
 8002d1c:	4611      	mov	r1, r2
 8002d1e:	887a      	ldrh	r2, [r7, #2]
 8002d20:	440a      	add	r2, r1
 8002d22:	329a      	adds	r2, #154	; 0x9a
	  else if((point.input_x >= (xStart+x1+154) && point.input_y >= (yStart+y2+142) ) &&
 8002d24:	4293      	cmp	r3, r2
 8002d26:	f4bf ad93 	bcs.w	8002850 <main+0x128>
			 ( point.input_x < (xStart+x2+154) && point.input_y < (yStart+y2+198)) )
 8002d2a:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <main+0x630>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	4a0c      	ldr	r2, [pc, #48]	; (8002d60 <main+0x638>)
 8002d30:	8812      	ldrh	r2, [r2, #0]
 8002d32:	4611      	mov	r1, r2
 8002d34:	883a      	ldrh	r2, [r7, #0]
 8002d36:	440a      	add	r2, r1
 8002d38:	32c6      	adds	r2, #198	; 0xc6
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	f4bf ad88 	bcs.w	8002850 <main+0x128>
			  {
				  point.input_x=0;
 8002d40:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <main+0x630>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]
				  point.input_y=0;
 8002d46:	4b04      	ldr	r3, [pc, #16]	; (8002d58 <main+0x630>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	605a      	str	r2, [r3, #4]
				  updatewidget(12);
 8002d4c:	200c      	movs	r0, #12
 8002d4e:	f000 fc09 	bl	8003564 <updatewidget>
				  check_Password();
 8002d52:	f000 fb83 	bl	800345c <check_Password>
	 if((point.input_x >= (xStart+x1) && point.input_y >= (yStart+y1) ) &&
 8002d56:	e57b      	b.n	8002850 <main+0x128>
 8002d58:	200003ec 	.word	0x200003ec
 8002d5c:	2000037a 	.word	0x2000037a
 8002d60:	2000037c 	.word	0x2000037c

08002d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b094      	sub	sp, #80	; 0x50
 8002d68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d6a:	f107 031c 	add.w	r3, r7, #28
 8002d6e:	2234      	movs	r2, #52	; 0x34
 8002d70:	2100      	movs	r1, #0
 8002d72:	4618      	mov	r0, r3
 8002d74:	f004 fb66 	bl	8007444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d78:	f107 0308 	add.w	r3, r7, #8
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	60da      	str	r2, [r3, #12]
 8002d86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d88:	2300      	movs	r3, #0
 8002d8a:	607b      	str	r3, [r7, #4]
 8002d8c:	4b28      	ldr	r3, [pc, #160]	; (8002e30 <SystemClock_Config+0xcc>)
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	4a27      	ldr	r2, [pc, #156]	; (8002e30 <SystemClock_Config+0xcc>)
 8002d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d96:	6413      	str	r3, [r2, #64]	; 0x40
 8002d98:	4b25      	ldr	r3, [pc, #148]	; (8002e30 <SystemClock_Config+0xcc>)
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da0:	607b      	str	r3, [r7, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002da4:	2300      	movs	r3, #0
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	4b22      	ldr	r3, [pc, #136]	; (8002e34 <SystemClock_Config+0xd0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a21      	ldr	r2, [pc, #132]	; (8002e34 <SystemClock_Config+0xd0>)
 8002dae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	4b1f      	ldr	r3, [pc, #124]	; (8002e34 <SystemClock_Config+0xd0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002dbc:	603b      	str	r3, [r7, #0]
 8002dbe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002dc8:	2310      	movs	r3, #16
 8002dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002dd4:	2308      	movs	r3, #8
 8002dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002dd8:	2364      	movs	r3, #100	; 0x64
 8002dda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002de0:	2302      	movs	r3, #2
 8002de2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002de4:	2302      	movs	r3, #2
 8002de6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002de8:	f107 031c 	add.w	r3, r7, #28
 8002dec:	4618      	mov	r0, r3
 8002dee:	f003 fd03 	bl	80067f8 <HAL_RCC_OscConfig>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002df8:	f000 ffa6 	bl	8003d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dfc:	230f      	movs	r3, #15
 8002dfe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e00:	2302      	movs	r3, #2
 8002e02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e04:	2300      	movs	r3, #0
 8002e06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002e12:	f107 0308 	add.w	r3, r7, #8
 8002e16:	2103      	movs	r1, #3
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f003 fb0d 	bl	8006438 <HAL_RCC_ClockConfig>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002e24:	f000 ff90 	bl	8003d48 <Error_Handler>
  }
}
 8002e28:	bf00      	nop
 8002e2a:	3750      	adds	r7, #80	; 0x50
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40023800 	.word	0x40023800
 8002e34:	40007000 	.word	0x40007000

08002e38 <drawKeyPad>:

/* USER CODE BEGIN 4 */
void drawKeyPad(int x , int y,uint8_t pwl)
{
 8002e38:	b590      	push	{r4, r7, lr}
 8002e3a:	b095      	sub	sp, #84	; 0x54
 8002e3c:	af06      	add	r7, sp, #24
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	4613      	mov	r3, r2
 8002e44:	71fb      	strb	r3, [r7, #7]
	xStart = x , yStart = y, x_jump = 40, y_jump = 43;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	4b9f      	ldr	r3, [pc, #636]	; (80030c8 <drawKeyPad+0x290>)
 8002e4c:	801a      	strh	r2, [r3, #0]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	4b9e      	ldr	r3, [pc, #632]	; (80030cc <drawKeyPad+0x294>)
 8002e54:	801a      	strh	r2, [r3, #0]
 8002e56:	4b9e      	ldr	r3, [pc, #632]	; (80030d0 <drawKeyPad+0x298>)
 8002e58:	2228      	movs	r2, #40	; 0x28
 8002e5a:	801a      	strh	r2, [r3, #0]
 8002e5c:	4b9d      	ldr	r3, [pc, #628]	; (80030d4 <drawKeyPad+0x29c>)
 8002e5e:	222b      	movs	r2, #43	; 0x2b
 8002e60:	801a      	strh	r2, [r3, #0]
	int xEnd = x + 212 , yEnd = y + 284;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	33d4      	adds	r3, #212	; 0xd4
 8002e66:	623b      	str	r3, [r7, #32]
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8002e6e:	61fb      	str	r3, [r7, #28]
	uint8_t fillCount = 0,countnum = 1 ,count = 0, num = 1, checknum = 1;
 8002e70:	2300      	movs	r3, #0
 8002e72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002e76:	2301      	movs	r3, #1
 8002e78:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002e82:	2301      	movs	r3, #1
 8002e84:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002e88:	2301      	movs	r3, #1
 8002e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t line = pwl;  //for password entires
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	/*
	 * updating password lines according to passward length
	 */
	if(0 == (line % 2))
 8002e94:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d17b      	bne.n	8002f9a <drawKeyPad+0x162>
		{
			//if password length is even
			uint8_t y1_2 = 22;
 8002ea2:	2316      	movs	r3, #22
 8002ea4:	75fb      	strb	r3, [r7, #23]
			uint16_t centerRec = xStart + 106;
 8002ea6:	4b88      	ldr	r3, [pc, #544]	; (80030c8 <drawKeyPad+0x290>)
 8002ea8:	881b      	ldrh	r3, [r3, #0]
 8002eaa:	336a      	adds	r3, #106	; 0x6a
 8002eac:	82bb      	strh	r3, [r7, #20]
			uint16_t x1 = 11, x2 = x1+32;
 8002eae:	230b      	movs	r3, #11
 8002eb0:	863b      	strh	r3, [r7, #48]	; 0x30
 8002eb2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002eb4:	3320      	adds	r3, #32
 8002eb6:	85fb      	strh	r3, [r7, #46]	; 0x2e
			line /= 2;
 8002eb8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002ebc:	085b      	lsrs	r3, r3, #1
 8002ebe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			uint8_t temp = line;
 8002ec2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002ec6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			while(line--)    //first half to the right from the center
 8002eca:	e02b      	b.n	8002f24 <drawKeyPad+0xec>
			{
				LT768_DrawLine_Width((centerRec + x1), (yStart - y1_2) , (centerRec + x2) , (yStart - y1_2), White, 4);
 8002ecc:	8aba      	ldrh	r2, [r7, #20]
 8002ece:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002ed0:	4413      	add	r3, r2
 8002ed2:	b298      	uxth	r0, r3
 8002ed4:	4b7d      	ldr	r3, [pc, #500]	; (80030cc <drawKeyPad+0x294>)
 8002ed6:	881a      	ldrh	r2, [r3, #0]
 8002ed8:	7dfb      	ldrb	r3, [r7, #23]
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	b299      	uxth	r1, r3
 8002ee0:	8aba      	ldrh	r2, [r7, #20]
 8002ee2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ee4:	4413      	add	r3, r2
 8002ee6:	b29c      	uxth	r4, r3
 8002ee8:	4b78      	ldr	r3, [pc, #480]	; (80030cc <drawKeyPad+0x294>)
 8002eea:	881a      	ldrh	r2, [r3, #0]
 8002eec:	7dfb      	ldrb	r3, [r7, #23]
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	2204      	movs	r2, #4
 8002ef6:	9201      	str	r2, [sp, #4]
 8002ef8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002efc:	9200      	str	r2, [sp, #0]
 8002efe:	4622      	mov	r2, r4
 8002f00:	f7fe ff89 	bl	8001e16 <LT768_DrawLine_Width>
				if(!line)	clearDigitScreen_x2 = (centerRec + x2);
 8002f04:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d105      	bne.n	8002f18 <drawKeyPad+0xe0>
 8002f0c:	8aba      	ldrh	r2, [r7, #20]
 8002f0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f10:	4413      	add	r3, r2
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	4b70      	ldr	r3, [pc, #448]	; (80030d8 <drawKeyPad+0x2a0>)
 8002f16:	801a      	strh	r2, [r3, #0]
				x1+=54;
 8002f18:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002f1a:	3336      	adds	r3, #54	; 0x36
 8002f1c:	863b      	strh	r3, [r7, #48]	; 0x30
				x2+=54;
 8002f1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f20:	3336      	adds	r3, #54	; 0x36
 8002f22:	85fb      	strh	r3, [r7, #46]	; 0x2e
			while(line--)    //first half to the right from the center
 8002f24:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002f28:	1e5a      	subs	r2, r3, #1
 8002f2a:	f887 2032 	strb.w	r2, [r7, #50]	; 0x32
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1cc      	bne.n	8002ecc <drawKeyPad+0x94>
			}
			x1 = centerRec-11, x2 = x1-32;
 8002f32:	8abb      	ldrh	r3, [r7, #20]
 8002f34:	3b0b      	subs	r3, #11
 8002f36:	863b      	strh	r3, [r7, #48]	; 0x30
 8002f38:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002f3a:	3b20      	subs	r3, #32
 8002f3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
			while(temp--) //second half to the left from center
 8002f3e:	e024      	b.n	8002f8a <drawKeyPad+0x152>
			{
				LT768_DrawLine_Width(x1, (yStart - y1_2) , x2 , (yStart - y1_2), White, 4);
 8002f40:	4b62      	ldr	r3, [pc, #392]	; (80030cc <drawKeyPad+0x294>)
 8002f42:	881a      	ldrh	r2, [r3, #0]
 8002f44:	7dfb      	ldrb	r3, [r7, #23]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	b299      	uxth	r1, r3
 8002f4c:	4b5f      	ldr	r3, [pc, #380]	; (80030cc <drawKeyPad+0x294>)
 8002f4e:	881a      	ldrh	r2, [r3, #0]
 8002f50:	7dfb      	ldrb	r3, [r7, #23]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002f5a:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 8002f5c:	2404      	movs	r4, #4
 8002f5e:	9401      	str	r4, [sp, #4]
 8002f60:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002f64:	9400      	str	r4, [sp, #0]
 8002f66:	f7fe ff56 	bl	8001e16 <LT768_DrawLine_Width>
				if(!temp)
 8002f6a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d105      	bne.n	8002f7e <drawKeyPad+0x146>
					{
						clearDigitScreen_x1 = x2; //to remove the digits
 8002f72:	4a5a      	ldr	r2, [pc, #360]	; (80030dc <drawKeyPad+0x2a4>)
 8002f74:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f76:	8013      	strh	r3, [r2, #0]
						passwordStart = x2 ;
 8002f78:	4a59      	ldr	r2, [pc, #356]	; (80030e0 <drawKeyPad+0x2a8>)
 8002f7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f7c:	8013      	strh	r3, [r2, #0]
					}
				x1-=54;
 8002f7e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002f80:	3b36      	subs	r3, #54	; 0x36
 8002f82:	863b      	strh	r3, [r7, #48]	; 0x30
				x2-=54;
 8002f84:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f86:	3b36      	subs	r3, #54	; 0x36
 8002f88:	85fb      	strh	r3, [r7, #46]	; 0x2e
			while(temp--) //second half to the left from center
 8002f8a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f8e:	1e5a      	subs	r2, r3, #1
 8002f90:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1d3      	bne.n	8002f40 <drawKeyPad+0x108>
 8002f98:	e0ad      	b.n	80030f6 <drawKeyPad+0x2be>
			}

		}
	else
		{
			uint8_t y1_2 = 22;
 8002f9a:	2316      	movs	r3, #22
 8002f9c:	76fb      	strb	r3, [r7, #27]
			uint16_t centerRec = xStart + 106;
 8002f9e:	4b4a      	ldr	r3, [pc, #296]	; (80030c8 <drawKeyPad+0x290>)
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	336a      	adds	r3, #106	; 0x6a
 8002fa4:	833b      	strh	r3, [r7, #24]
			uint16_t x1 = centerRec-16, x2 = centerRec+16;
 8002fa6:	8b3b      	ldrh	r3, [r7, #24]
 8002fa8:	3b10      	subs	r3, #16
 8002faa:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002fac:	8b3b      	ldrh	r3, [r7, #24]
 8002fae:	3310      	adds	r3, #16
 8002fb0:	853b      	strh	r3, [r7, #40]	; 0x28
			LT768_DrawLine_Width(x1, (yStart - y1_2) , x2 , (yStart - y1_2), White, 4); //centerd bar
 8002fb2:	4b46      	ldr	r3, [pc, #280]	; (80030cc <drawKeyPad+0x294>)
 8002fb4:	881a      	ldrh	r2, [r3, #0]
 8002fb6:	7efb      	ldrb	r3, [r7, #27]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	b299      	uxth	r1, r3
 8002fbe:	4b43      	ldr	r3, [pc, #268]	; (80030cc <drawKeyPad+0x294>)
 8002fc0:	881a      	ldrh	r2, [r3, #0]
 8002fc2:	7efb      	ldrb	r3, [r7, #27]
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002fcc:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
 8002fce:	2404      	movs	r4, #4
 8002fd0:	9401      	str	r4, [sp, #4]
 8002fd2:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002fd6:	9400      	str	r4, [sp, #0]
 8002fd8:	f7fe ff1d 	bl	8001e16 <LT768_DrawLine_Width>
			if(line>1)
 8002fdc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d97f      	bls.n	80030e4 <drawKeyPad+0x2ac>
			{
				line--;
 8002fe4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
				line /= 2;
 8002fee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002ff2:	085b      	lsrs	r3, r3, #1
 8002ff4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
				uint8_t temp = line;
 8002ff8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002ffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				x1 -= 22;		//starting x-point of bars in the left direction from center
 8003000:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003002:	3b16      	subs	r3, #22
 8003004:	857b      	strh	r3, [r7, #42]	; 0x2a
				x2 = (x1-32); //starting y-point of bars in the left direction	from center
 8003006:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003008:	3b20      	subs	r3, #32
 800300a:	853b      	strh	r3, [r7, #40]	; 0x28
				while(line--)
 800300c:	e024      	b.n	8003058 <drawKeyPad+0x220>
				{
					LT768_DrawLine_Width(x1, (yStart - y1_2) , x2 , (yStart - y1_2), White, 4);
 800300e:	4b2f      	ldr	r3, [pc, #188]	; (80030cc <drawKeyPad+0x294>)
 8003010:	881a      	ldrh	r2, [r3, #0]
 8003012:	7efb      	ldrb	r3, [r7, #27]
 8003014:	b29b      	uxth	r3, r3
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	b299      	uxth	r1, r3
 800301a:	4b2c      	ldr	r3, [pc, #176]	; (80030cc <drawKeyPad+0x294>)
 800301c:	881a      	ldrh	r2, [r3, #0]
 800301e:	7efb      	ldrb	r3, [r7, #27]
 8003020:	b29b      	uxth	r3, r3
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	b29b      	uxth	r3, r3
 8003026:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003028:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
 800302a:	2404      	movs	r4, #4
 800302c:	9401      	str	r4, [sp, #4]
 800302e:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003032:	9400      	str	r4, [sp, #0]
 8003034:	f7fe feef 	bl	8001e16 <LT768_DrawLine_Width>
					if(!(line))
 8003038:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800303c:	2b00      	cmp	r3, #0
 800303e:	d105      	bne.n	800304c <drawKeyPad+0x214>
						{
							clearDigitScreen_x1 = x2; //to remove the digits
 8003040:	4a26      	ldr	r2, [pc, #152]	; (80030dc <drawKeyPad+0x2a4>)
 8003042:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003044:	8013      	strh	r3, [r2, #0]
							passwordStart = x2; // will be the start address of of first digit on the display
 8003046:	4a26      	ldr	r2, [pc, #152]	; (80030e0 <drawKeyPad+0x2a8>)
 8003048:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800304a:	8013      	strh	r3, [r2, #0]
						}
					x1 -= 54;
 800304c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800304e:	3b36      	subs	r3, #54	; 0x36
 8003050:	857b      	strh	r3, [r7, #42]	; 0x2a
					x2 -= 54;
 8003052:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003054:	3b36      	subs	r3, #54	; 0x36
 8003056:	853b      	strh	r3, [r7, #40]	; 0x28
				while(line--)
 8003058:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800305c:	1e5a      	subs	r2, r3, #1
 800305e:	f887 2032 	strb.w	r2, [r7, #50]	; 0x32
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1d3      	bne.n	800300e <drawKeyPad+0x1d6>
				}
				x1 = ((centerRec+16)+22);  //starting x-point of bars in the right direction from center
 8003066:	8b3b      	ldrh	r3, [r7, #24]
 8003068:	3326      	adds	r3, #38	; 0x26
 800306a:	857b      	strh	r3, [r7, #42]	; 0x2a
				x2 = (x1 + 32);			//starting y-point of bars in the right direction from center
 800306c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800306e:	3320      	adds	r3, #32
 8003070:	853b      	strh	r3, [r7, #40]	; 0x28
				while(temp--)
 8003072:	e021      	b.n	80030b8 <drawKeyPad+0x280>
				{
					LT768_DrawLine_Width(x1, (yStart - y1_2) , x2 , (yStart - y1_2), White, 4);
 8003074:	4b15      	ldr	r3, [pc, #84]	; (80030cc <drawKeyPad+0x294>)
 8003076:	881a      	ldrh	r2, [r3, #0]
 8003078:	7efb      	ldrb	r3, [r7, #27]
 800307a:	b29b      	uxth	r3, r3
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	b299      	uxth	r1, r3
 8003080:	4b12      	ldr	r3, [pc, #72]	; (80030cc <drawKeyPad+0x294>)
 8003082:	881a      	ldrh	r2, [r3, #0]
 8003084:	7efb      	ldrb	r3, [r7, #27]
 8003086:	b29b      	uxth	r3, r3
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	b29b      	uxth	r3, r3
 800308c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800308e:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
 8003090:	2404      	movs	r4, #4
 8003092:	9401      	str	r4, [sp, #4]
 8003094:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003098:	9400      	str	r4, [sp, #0]
 800309a:	f7fe febc 	bl	8001e16 <LT768_DrawLine_Width>
					if(!temp)	clearDigitScreen_x2 =  x2;
 800309e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d102      	bne.n	80030ac <drawKeyPad+0x274>
 80030a6:	4a0c      	ldr	r2, [pc, #48]	; (80030d8 <drawKeyPad+0x2a0>)
 80030a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80030aa:	8013      	strh	r3, [r2, #0]
					x1 += 54;
 80030ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80030ae:	3336      	adds	r3, #54	; 0x36
 80030b0:	857b      	strh	r3, [r7, #42]	; 0x2a
					x2 += 54;
 80030b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80030b4:	3336      	adds	r3, #54	; 0x36
 80030b6:	853b      	strh	r3, [r7, #40]	; 0x28
				while(temp--)
 80030b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030bc:	1e5a      	subs	r2, r3, #1
 80030be:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1d6      	bne.n	8003074 <drawKeyPad+0x23c>
 80030c6:	e016      	b.n	80030f6 <drawKeyPad+0x2be>
 80030c8:	2000037a 	.word	0x2000037a
 80030cc:	2000037c 	.word	0x2000037c
 80030d0:	2000037e 	.word	0x2000037e
 80030d4:	20000380 	.word	0x20000380
 80030d8:	2000038a 	.word	0x2000038a
 80030dc:	20000388 	.word	0x20000388
 80030e0:	20000384 	.word	0x20000384
				}

			}
			else
				{
					clearDigitScreen_x1 = x1; //to remove the digits
 80030e4:	4a78      	ldr	r2, [pc, #480]	; (80032c8 <drawKeyPad+0x490>)
 80030e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80030e8:	8013      	strh	r3, [r2, #0]
					clearDigitScreen_x2 = x2;
 80030ea:	4a78      	ldr	r2, [pc, #480]	; (80032cc <drawKeyPad+0x494>)
 80030ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80030ee:	8013      	strh	r3, [r2, #0]
					passwordStart = x1; //in case if user chooses only 1 digit for password
 80030f0:	4a77      	ldr	r2, [pc, #476]	; (80032d0 <drawKeyPad+0x498>)
 80030f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80030f4:	8013      	strh	r3, [r2, #0]
				}

		}


	rawDigitStart = passwordStart; //to store the x-start point for displaying digits.
 80030f6:	4b76      	ldr	r3, [pc, #472]	; (80032d0 <drawKeyPad+0x498>)
 80030f8:	881a      	ldrh	r2, [r3, #0]
 80030fa:	4b76      	ldr	r3, [pc, #472]	; (80032d4 <drawKeyPad+0x49c>)
 80030fc:	801a      	strh	r2, [r3, #0]
	/*
	 * Drawing keypad
	 */
	LT768_DrawCircleSquare_Width(xStart, yStart, xEnd, yEnd, 16, 16, White, BGcolor, 1);
 80030fe:	4b76      	ldr	r3, [pc, #472]	; (80032d8 <drawKeyPad+0x4a0>)
 8003100:	8818      	ldrh	r0, [r3, #0]
 8003102:	4b76      	ldr	r3, [pc, #472]	; (80032dc <drawKeyPad+0x4a4>)
 8003104:	8819      	ldrh	r1, [r3, #0]
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	b29a      	uxth	r2, r3
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	b29b      	uxth	r3, r3
 800310e:	2401      	movs	r4, #1
 8003110:	9404      	str	r4, [sp, #16]
 8003112:	f44f 74b4 	mov.w	r4, #360	; 0x168
 8003116:	9403      	str	r4, [sp, #12]
 8003118:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800311c:	9402      	str	r4, [sp, #8]
 800311e:	2410      	movs	r4, #16
 8003120:	9401      	str	r4, [sp, #4]
 8003122:	2410      	movs	r4, #16
 8003124:	9400      	str	r4, [sp, #0]
 8003126:	f7fe ff38 	bl	8001f9a <LT768_DrawCircleSquare_Width>
	LT768_Select_Internal_Font_Init(32, 1, 1, 1, 1);
 800312a:	2301      	movs	r3, #1
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	2301      	movs	r3, #1
 8003130:	2201      	movs	r2, #1
 8003132:	2101      	movs	r1, #1
 8003134:	2020      	movs	r0, #32
 8003136:	f7fe ff92 	bl	800205e <LT768_Select_Internal_Font_Init>
	while(count<12)
 800313a:	e0bb      	b.n	80032b4 <drawKeyPad+0x47c>
	{
		LT768_DrawCircle_Width(xStart + x_jump, yStart + y_jump , 29, White, BGcolor, 1);
 800313c:	4b66      	ldr	r3, [pc, #408]	; (80032d8 <drawKeyPad+0x4a0>)
 800313e:	881a      	ldrh	r2, [r3, #0]
 8003140:	4b67      	ldr	r3, [pc, #412]	; (80032e0 <drawKeyPad+0x4a8>)
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	4413      	add	r3, r2
 8003146:	b298      	uxth	r0, r3
 8003148:	4b64      	ldr	r3, [pc, #400]	; (80032dc <drawKeyPad+0x4a4>)
 800314a:	881a      	ldrh	r2, [r3, #0]
 800314c:	4b65      	ldr	r3, [pc, #404]	; (80032e4 <drawKeyPad+0x4ac>)
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	4413      	add	r3, r2
 8003152:	b299      	uxth	r1, r3
 8003154:	2301      	movs	r3, #1
 8003156:	9301      	str	r3, [sp, #4]
 8003158:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003162:	221d      	movs	r2, #29
 8003164:	f7fe fea6 	bl	8001eb4 <LT768_DrawCircle_Width>
		count++;
 8003168:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800316c:	3301      	adds	r3, #1
 800316e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		if(!(countnum%4))
 8003172:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d15c      	bne.n	800323a <drawKeyPad+0x402>
			{
				checknum += 1;
 8003180:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003184:	3301      	adds	r3, #1
 8003186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				num = checknum ;
 800318a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800318e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				if(fillCount == 0)
 8003192:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003196:	2b00      	cmp	r3, #0
 8003198:	d12e      	bne.n	80031f8 <drawKeyPad+0x3c0>
				{
					LT768_DrawLine_Width((xStart + 34), (yStart + 250), (xStart + 46), (yStart + 237), White, 3);
 800319a:	4b4f      	ldr	r3, [pc, #316]	; (80032d8 <drawKeyPad+0x4a0>)
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	3322      	adds	r3, #34	; 0x22
 80031a0:	b298      	uxth	r0, r3
 80031a2:	4b4e      	ldr	r3, [pc, #312]	; (80032dc <drawKeyPad+0x4a4>)
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	33fa      	adds	r3, #250	; 0xfa
 80031a8:	b299      	uxth	r1, r3
 80031aa:	4b4b      	ldr	r3, [pc, #300]	; (80032d8 <drawKeyPad+0x4a0>)
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	332e      	adds	r3, #46	; 0x2e
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	4b4a      	ldr	r3, [pc, #296]	; (80032dc <drawKeyPad+0x4a4>)
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	33ed      	adds	r3, #237	; 0xed
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2403      	movs	r4, #3
 80031bc:	9401      	str	r4, [sp, #4]
 80031be:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80031c2:	9400      	str	r4, [sp, #0]
 80031c4:	f7fe fe27 	bl	8001e16 <LT768_DrawLine_Width>
					LT768_DrawLine_Width((xStart + 46), (yStart + 250), (xStart + 34), (yStart + 237), White, 3);
 80031c8:	4b43      	ldr	r3, [pc, #268]	; (80032d8 <drawKeyPad+0x4a0>)
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	332e      	adds	r3, #46	; 0x2e
 80031ce:	b298      	uxth	r0, r3
 80031d0:	4b42      	ldr	r3, [pc, #264]	; (80032dc <drawKeyPad+0x4a4>)
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	33fa      	adds	r3, #250	; 0xfa
 80031d6:	b299      	uxth	r1, r3
 80031d8:	4b3f      	ldr	r3, [pc, #252]	; (80032d8 <drawKeyPad+0x4a0>)
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	3322      	adds	r3, #34	; 0x22
 80031de:	b29a      	uxth	r2, r3
 80031e0:	4b3e      	ldr	r3, [pc, #248]	; (80032dc <drawKeyPad+0x4a4>)
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	33ed      	adds	r3, #237	; 0xed
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2403      	movs	r4, #3
 80031ea:	9401      	str	r4, [sp, #4]
 80031ec:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80031f0:	9400      	str	r4, [sp, #0]
 80031f2:	f7fe fe10 	bl	8001e16 <LT768_DrawLine_Width>
 80031f6:	e01a      	b.n	800322e <drawKeyPad+0x3f6>
				}
				else if(fillCount == 1)
 80031f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d116      	bne.n	800322e <drawKeyPad+0x3f6>
				{
					LT768_Print_Internal_Font_String(((xStart + x_jump) - 8), ((yStart + y_jump)-15), White, Black,"0");
 8003200:	4b35      	ldr	r3, [pc, #212]	; (80032d8 <drawKeyPad+0x4a0>)
 8003202:	881a      	ldrh	r2, [r3, #0]
 8003204:	4b36      	ldr	r3, [pc, #216]	; (80032e0 <drawKeyPad+0x4a8>)
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	4413      	add	r3, r2
 800320a:	b29b      	uxth	r3, r3
 800320c:	3b08      	subs	r3, #8
 800320e:	b298      	uxth	r0, r3
 8003210:	4b32      	ldr	r3, [pc, #200]	; (80032dc <drawKeyPad+0x4a4>)
 8003212:	881a      	ldrh	r2, [r3, #0]
 8003214:	4b33      	ldr	r3, [pc, #204]	; (80032e4 <drawKeyPad+0x4ac>)
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	4413      	add	r3, r2
 800321a:	b29b      	uxth	r3, r3
 800321c:	3b0f      	subs	r3, #15
 800321e:	b299      	uxth	r1, r3
 8003220:	4b31      	ldr	r3, [pc, #196]	; (80032e8 <drawKeyPad+0x4b0>)
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	2300      	movs	r3, #0
 8003226:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800322a:	f7fe ff76 	bl	800211a <LT768_Print_Internal_Font_String>
				}
				else if(fillCount == 2)
				{
					//todo
				}
				fillCount++;
 800322e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003232:	3301      	adds	r3, #1
 8003234:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003238:	e021      	b.n	800327e <drawKeyPad+0x446>
			}
		else
		{
			int_to_string(numToString, num);
 800323a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800323e:	4619      	mov	r1, r3
 8003240:	482a      	ldr	r0, [pc, #168]	; (80032ec <drawKeyPad+0x4b4>)
 8003242:	f000 f855 	bl	80032f0 <int_to_string>
			LT768_Print_Internal_Font_String(((xStart + x_jump) - 8), ((yStart + y_jump)-15), White, Black,numToString);
 8003246:	4b24      	ldr	r3, [pc, #144]	; (80032d8 <drawKeyPad+0x4a0>)
 8003248:	881a      	ldrh	r2, [r3, #0]
 800324a:	4b25      	ldr	r3, [pc, #148]	; (80032e0 <drawKeyPad+0x4a8>)
 800324c:	881b      	ldrh	r3, [r3, #0]
 800324e:	4413      	add	r3, r2
 8003250:	b29b      	uxth	r3, r3
 8003252:	3b08      	subs	r3, #8
 8003254:	b298      	uxth	r0, r3
 8003256:	4b21      	ldr	r3, [pc, #132]	; (80032dc <drawKeyPad+0x4a4>)
 8003258:	881a      	ldrh	r2, [r3, #0]
 800325a:	4b22      	ldr	r3, [pc, #136]	; (80032e4 <drawKeyPad+0x4ac>)
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	4413      	add	r3, r2
 8003260:	b29b      	uxth	r3, r3
 8003262:	3b0f      	subs	r3, #15
 8003264:	b299      	uxth	r1, r3
 8003266:	4b21      	ldr	r3, [pc, #132]	; (80032ec <drawKeyPad+0x4b4>)
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	2300      	movs	r3, #0
 800326c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003270:	f7fe ff53 	bl	800211a <LT768_Print_Internal_Font_String>
			num+=3;
 8003274:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003278:	3303      	adds	r3, #3
 800327a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		}
		y_jump += 67;
 800327e:	4b19      	ldr	r3, [pc, #100]	; (80032e4 <drawKeyPad+0x4ac>)
 8003280:	881b      	ldrh	r3, [r3, #0]
 8003282:	3343      	adds	r3, #67	; 0x43
 8003284:	b29a      	uxth	r2, r3
 8003286:	4b17      	ldr	r3, [pc, #92]	; (80032e4 <drawKeyPad+0x4ac>)
 8003288:	801a      	strh	r2, [r3, #0]
		countnum++;
 800328a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800328e:	3301      	adds	r3, #1
 8003290:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		if(!(count%4))
 8003294:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003298:	f003 0303 	and.w	r3, r3, #3
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d108      	bne.n	80032b4 <drawKeyPad+0x47c>
			{
				x_jump += 67;
 80032a2:	4b0f      	ldr	r3, [pc, #60]	; (80032e0 <drawKeyPad+0x4a8>)
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	3343      	adds	r3, #67	; 0x43
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <drawKeyPad+0x4a8>)
 80032ac:	801a      	strh	r2, [r3, #0]
				y_jump = 43;
 80032ae:	4b0d      	ldr	r3, [pc, #52]	; (80032e4 <drawKeyPad+0x4ac>)
 80032b0:	222b      	movs	r2, #43	; 0x2b
 80032b2:	801a      	strh	r2, [r3, #0]
	while(count<12)
 80032b4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80032b8:	2b0b      	cmp	r3, #11
 80032ba:	f67f af3f 	bls.w	800313c <drawKeyPad+0x304>
			}


	}

}
 80032be:	bf00      	nop
 80032c0:	bf00      	nop
 80032c2:	373c      	adds	r7, #60	; 0x3c
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd90      	pop	{r4, r7, pc}
 80032c8:	20000388 	.word	0x20000388
 80032cc:	2000038a 	.word	0x2000038a
 80032d0:	20000384 	.word	0x20000384
 80032d4:	2000038c 	.word	0x2000038c
 80032d8:	2000037a 	.word	0x2000037a
 80032dc:	2000037c 	.word	0x2000037c
 80032e0:	2000037e 	.word	0x2000037e
 80032e4:	20000380 	.word	0x20000380
 80032e8:	0800884c 	.word	0x0800884c
 80032ec:	20000370 	.word	0x20000370

080032f0 <int_to_string>:

void int_to_string(char *result, int num)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  sprintf(result, "%d", num);
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	4903      	ldr	r1, [pc, #12]	; (800330c <int_to_string+0x1c>)
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f004 fa26 	bl	8007750 <siprintf>
}
 8003304:	bf00      	nop
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	08008850 	.word	0x08008850

08003310 <Keypad_storePassword>:
void Keypad_storePassword(uint8_t PW)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af02      	add	r7, sp, #8
 8003316:	4603      	mov	r3, r0
 8003318:	71fb      	strb	r3, [r7, #7]
	if (password_length < PASSWORD_LENGTH)
 800331a:	4b25      	ldr	r3, [pc, #148]	; (80033b0 <Keypad_storePassword+0xa0>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b03      	cmp	r3, #3
 8003320:	d837      	bhi.n	8003392 <Keypad_storePassword+0x82>
	{
		LT768_Select_Internal_Font_Init(32, 1, 1, 1, 1);
 8003322:	2301      	movs	r3, #1
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	2301      	movs	r3, #1
 8003328:	2201      	movs	r2, #1
 800332a:	2101      	movs	r1, #1
 800332c:	2020      	movs	r0, #32
 800332e:	f7fe fe96 	bl	800205e <LT768_Select_Internal_Font_Init>
		password[password_length] = PW;
 8003332:	4b1f      	ldr	r3, [pc, #124]	; (80033b0 <Keypad_storePassword+0xa0>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	4619      	mov	r1, r3
 8003338:	4a1e      	ldr	r2, [pc, #120]	; (80033b4 <Keypad_storePassword+0xa4>)
 800333a:	79fb      	ldrb	r3, [r7, #7]
 800333c:	5453      	strb	r3, [r2, r1]
		LT768_Print_Internal_Font_String(passwordStart+numx, yStart-numy, White, 0,"*");
 800333e:	4b1e      	ldr	r3, [pc, #120]	; (80033b8 <Keypad_storePassword+0xa8>)
 8003340:	881a      	ldrh	r2, [r3, #0]
 8003342:	4b1e      	ldr	r3, [pc, #120]	; (80033bc <Keypad_storePassword+0xac>)
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	4413      	add	r3, r2
 8003348:	b298      	uxth	r0, r3
 800334a:	4b1d      	ldr	r3, [pc, #116]	; (80033c0 <Keypad_storePassword+0xb0>)
 800334c:	881a      	ldrh	r2, [r3, #0]
 800334e:	4b1d      	ldr	r3, [pc, #116]	; (80033c4 <Keypad_storePassword+0xb4>)
 8003350:	881b      	ldrh	r3, [r3, #0]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	b299      	uxth	r1, r3
 8003356:	4b1c      	ldr	r3, [pc, #112]	; (80033c8 <Keypad_storePassword+0xb8>)
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	2300      	movs	r3, #0
 800335c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003360:	f7fe fedb 	bl	800211a <LT768_Print_Internal_Font_String>
		passRemoveRegion = ((passwordStart+numx) - 8);
 8003364:	4b14      	ldr	r3, [pc, #80]	; (80033b8 <Keypad_storePassword+0xa8>)
 8003366:	881a      	ldrh	r2, [r3, #0]
 8003368:	4b14      	ldr	r3, [pc, #80]	; (80033bc <Keypad_storePassword+0xac>)
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	4413      	add	r3, r2
 800336e:	b29b      	uxth	r3, r3
 8003370:	3b08      	subs	r3, #8
 8003372:	b29a      	uxth	r2, r3
 8003374:	4b15      	ldr	r3, [pc, #84]	; (80033cc <Keypad_storePassword+0xbc>)
 8003376:	801a      	strh	r2, [r3, #0]
		numx+=54;
 8003378:	4b10      	ldr	r3, [pc, #64]	; (80033bc <Keypad_storePassword+0xac>)
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	3336      	adds	r3, #54	; 0x36
 800337e:	b29a      	uxth	r2, r3
 8003380:	4b0e      	ldr	r3, [pc, #56]	; (80033bc <Keypad_storePassword+0xac>)
 8003382:	801a      	strh	r2, [r3, #0]
		password_length++;
 8003384:	4b0a      	ldr	r3, [pc, #40]	; (80033b0 <Keypad_storePassword+0xa0>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	3301      	adds	r3, #1
 800338a:	b2da      	uxtb	r2, r3
 800338c:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <Keypad_storePassword+0xa0>)
 800338e:	701a      	strb	r2, [r3, #0]
		{
			password_length = 0;
			numx = 8;
		}

}
 8003390:	e009      	b.n	80033a6 <Keypad_storePassword+0x96>
	else if(password_length == (PASSWORD_LENGTH+1))
 8003392:	4b07      	ldr	r3, [pc, #28]	; (80033b0 <Keypad_storePassword+0xa0>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b05      	cmp	r3, #5
 8003398:	d105      	bne.n	80033a6 <Keypad_storePassword+0x96>
			password_length = 0;
 800339a:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <Keypad_storePassword+0xa0>)
 800339c:	2200      	movs	r2, #0
 800339e:	701a      	strb	r2, [r3, #0]
			numx = 8;
 80033a0:	4b06      	ldr	r3, [pc, #24]	; (80033bc <Keypad_storePassword+0xac>)
 80033a2:	2208      	movs	r2, #8
 80033a4:	801a      	strh	r2, [r3, #0]
}
 80033a6:	bf00      	nop
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	20000382 	.word	0x20000382
 80033b4:	20000374 	.word	0x20000374
 80033b8:	20000384 	.word	0x20000384
 80033bc:	2000000a 	.word	0x2000000a
 80033c0:	2000037c 	.word	0x2000037c
 80033c4:	2000000c 	.word	0x2000000c
 80033c8:	08008854 	.word	0x08008854
 80033cc:	20000386 	.word	0x20000386

080033d0 <remove_last_entry_from_password>:

void remove_last_entry_from_password()
{
 80033d0:	b590      	push	{r4, r7, lr}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af02      	add	r7, sp, #8
	if (password_length > 0)
 80033d6:	4b1b      	ldr	r3, [pc, #108]	; (8003444 <remove_last_entry_from_password+0x74>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d02e      	beq.n	800343c <remove_last_entry_from_password+0x6c>
		{
			password_length--;
 80033de:	4b19      	ldr	r3, [pc, #100]	; (8003444 <remove_last_entry_from_password+0x74>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	4b17      	ldr	r3, [pc, #92]	; (8003444 <remove_last_entry_from_password+0x74>)
 80033e8:	701a      	strb	r2, [r3, #0]
			password[password_length] = '\0'; // set last character to null terminator
 80033ea:	4b16      	ldr	r3, [pc, #88]	; (8003444 <remove_last_entry_from_password+0x74>)
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	461a      	mov	r2, r3
 80033f0:	4b15      	ldr	r3, [pc, #84]	; (8003448 <remove_last_entry_from_password+0x78>)
 80033f2:	2100      	movs	r1, #0
 80033f4:	5499      	strb	r1, [r3, r2]
			LT768_DrawSquare_Fill(passRemoveRegion, yStart-(numy+5), passRemoveRegion+32, yStart-27, BGcolor);
 80033f6:	4b15      	ldr	r3, [pc, #84]	; (800344c <remove_last_entry_from_password+0x7c>)
 80033f8:	8818      	ldrh	r0, [r3, #0]
 80033fa:	4b15      	ldr	r3, [pc, #84]	; (8003450 <remove_last_entry_from_password+0x80>)
 80033fc:	881a      	ldrh	r2, [r3, #0]
 80033fe:	4b15      	ldr	r3, [pc, #84]	; (8003454 <remove_last_entry_from_password+0x84>)
 8003400:	881b      	ldrh	r3, [r3, #0]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	b29b      	uxth	r3, r3
 8003406:	3b05      	subs	r3, #5
 8003408:	b299      	uxth	r1, r3
 800340a:	4b10      	ldr	r3, [pc, #64]	; (800344c <remove_last_entry_from_password+0x7c>)
 800340c:	881b      	ldrh	r3, [r3, #0]
 800340e:	3320      	adds	r3, #32
 8003410:	b29a      	uxth	r2, r3
 8003412:	4b0f      	ldr	r3, [pc, #60]	; (8003450 <remove_last_entry_from_password+0x80>)
 8003414:	881b      	ldrh	r3, [r3, #0]
 8003416:	3b1b      	subs	r3, #27
 8003418:	b29b      	uxth	r3, r3
 800341a:	f44f 74b4 	mov.w	r4, #360	; 0x168
 800341e:	9400      	str	r4, [sp, #0]
 8003420:	f7fe fd65 	bl	8001eee <LT768_DrawSquare_Fill>
			passwordStart -= 54;
 8003424:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <remove_last_entry_from_password+0x88>)
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	3b36      	subs	r3, #54	; 0x36
 800342a:	b29a      	uxth	r2, r3
 800342c:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <remove_last_entry_from_password+0x88>)
 800342e:	801a      	strh	r2, [r3, #0]
			passRemoveRegion -= 54;
 8003430:	4b06      	ldr	r3, [pc, #24]	; (800344c <remove_last_entry_from_password+0x7c>)
 8003432:	881b      	ldrh	r3, [r3, #0]
 8003434:	3b36      	subs	r3, #54	; 0x36
 8003436:	b29a      	uxth	r2, r3
 8003438:	4b04      	ldr	r3, [pc, #16]	; (800344c <remove_last_entry_from_password+0x7c>)
 800343a:	801a      	strh	r2, [r3, #0]
		}
}
 800343c:	bf00      	nop
 800343e:	3704      	adds	r7, #4
 8003440:	46bd      	mov	sp, r7
 8003442:	bd90      	pop	{r4, r7, pc}
 8003444:	20000382 	.word	0x20000382
 8003448:	20000374 	.word	0x20000374
 800344c:	20000386 	.word	0x20000386
 8003450:	2000037c 	.word	0x2000037c
 8003454:	2000000c 	.word	0x2000000c
 8003458:	20000384 	.word	0x20000384

0800345c <check_Password>:

void check_Password()
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
	if (password_length == PASSWORD_LENGTH) { // we'll make sure password is fully entered
 8003460:	4b09      	ldr	r3, [pc, #36]	; (8003488 <check_Password+0x2c>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b04      	cmp	r3, #4
 8003466:	d10c      	bne.n	8003482 <check_Password+0x26>
	    if (memcmp(password, stored_password, PASSWORD_LENGTH) == 0)
 8003468:	2204      	movs	r2, #4
 800346a:	4908      	ldr	r1, [pc, #32]	; (800348c <check_Password+0x30>)
 800346c:	4808      	ldr	r0, [pc, #32]	; (8003490 <check_Password+0x34>)
 800346e:	f003 ffcb 	bl	8007408 <memcmp>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d102      	bne.n	800347e <check_Password+0x22>
	    {
	      // password is correct
	      initiate_mainScreen();
 8003478:	f000 f852 	bl	8003520 <initiate_mainScreen>
	    else
	    {
	      clear_password();
	    }
	  }
}
 800347c:	e001      	b.n	8003482 <check_Password+0x26>
	      clear_password();
 800347e:	f000 f809 	bl	8003494 <clear_password>
}
 8003482:	bf00      	nop
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	20000382 	.word	0x20000382
 800348c:	20000004 	.word	0x20000004
 8003490:	20000374 	.word	0x20000374

08003494 <clear_password>:


void clear_password()
{
 8003494:	b590      	push	{r4, r7, lr}
 8003496:	b085      	sub	sp, #20
 8003498:	af02      	add	r7, sp, #8
	for (int i = 0; i < PASSWORD_LENGTH; i++)
 800349a:	2300      	movs	r3, #0
 800349c:	607b      	str	r3, [r7, #4]
 800349e:	e007      	b.n	80034b0 <clear_password+0x1c>
		{
	    	password[i] = '\0'; //fill all the spaces with null character
 80034a0:	4a16      	ldr	r2, [pc, #88]	; (80034fc <clear_password+0x68>)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4413      	add	r3, r2
 80034a6:	2200      	movs	r2, #0
 80034a8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < PASSWORD_LENGTH; i++)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3301      	adds	r3, #1
 80034ae:	607b      	str	r3, [r7, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b03      	cmp	r3, #3
 80034b4:	ddf4      	ble.n	80034a0 <clear_password+0xc>
		}
	  password_length = 0;
 80034b6:	4b12      	ldr	r3, [pc, #72]	; (8003500 <clear_password+0x6c>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]
	  LT768_DrawSquare_Fill(clearDigitScreen_x1, yStart-(numy+5), clearDigitScreen_x2, yStart-27, BGcolor);
 80034bc:	4b11      	ldr	r3, [pc, #68]	; (8003504 <clear_password+0x70>)
 80034be:	8818      	ldrh	r0, [r3, #0]
 80034c0:	4b11      	ldr	r3, [pc, #68]	; (8003508 <clear_password+0x74>)
 80034c2:	881a      	ldrh	r2, [r3, #0]
 80034c4:	4b11      	ldr	r3, [pc, #68]	; (800350c <clear_password+0x78>)
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	3b05      	subs	r3, #5
 80034ce:	b299      	uxth	r1, r3
 80034d0:	4b0f      	ldr	r3, [pc, #60]	; (8003510 <clear_password+0x7c>)
 80034d2:	881a      	ldrh	r2, [r3, #0]
 80034d4:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <clear_password+0x74>)
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	3b1b      	subs	r3, #27
 80034da:	b29b      	uxth	r3, r3
 80034dc:	f44f 74b4 	mov.w	r4, #360	; 0x168
 80034e0:	9400      	str	r4, [sp, #0]
 80034e2:	f7fe fd04 	bl	8001eee <LT768_DrawSquare_Fill>
	  passwordStart = rawDigitStart;
 80034e6:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <clear_password+0x80>)
 80034e8:	881a      	ldrh	r2, [r3, #0]
 80034ea:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <clear_password+0x84>)
 80034ec:	801a      	strh	r2, [r3, #0]
	  numx = 8; //starting distance of digit from the start of line
 80034ee:	4b0b      	ldr	r3, [pc, #44]	; (800351c <clear_password+0x88>)
 80034f0:	2208      	movs	r2, #8
 80034f2:	801a      	strh	r2, [r3, #0]

}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd90      	pop	{r4, r7, pc}
 80034fc:	20000374 	.word	0x20000374
 8003500:	20000382 	.word	0x20000382
 8003504:	20000388 	.word	0x20000388
 8003508:	2000037c 	.word	0x2000037c
 800350c:	2000000c 	.word	0x2000000c
 8003510:	2000038a 	.word	0x2000038a
 8003514:	2000038c 	.word	0x2000038c
 8003518:	20000384 	.word	0x20000384
 800351c:	2000000a 	.word	0x2000000a

08003520 <initiate_mainScreen>:
void initiate_mainScreen()
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af02      	add	r7, sp, #8
	LT768_DrawSquare_Fill(0, 0, 800, 480, White);
 8003526:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003530:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003534:	2100      	movs	r1, #0
 8003536:	2000      	movs	r0, #0
 8003538:	f7fe fcd9 	bl	8001eee <LT768_DrawSquare_Fill>
	LT768_Select_Internal_Font_Init(32, 2, 2, 1, 1);
 800353c:	2301      	movs	r3, #1
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	2301      	movs	r3, #1
 8003542:	2202      	movs	r2, #2
 8003544:	2102      	movs	r1, #2
 8003546:	2020      	movs	r0, #32
 8003548:	f7fe fd89 	bl	800205e <LT768_Select_Internal_Font_Init>
	LT768_Print_Internal_Font_String(300, 220, Black, 0, "We are working on it! have patience!");
 800354c:	4b04      	ldr	r3, [pc, #16]	; (8003560 <initiate_mainScreen+0x40>)
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	2300      	movs	r3, #0
 8003552:	2200      	movs	r2, #0
 8003554:	21dc      	movs	r1, #220	; 0xdc
 8003556:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800355a:	f7fe fdde 	bl	800211a <LT768_Print_Internal_Font_String>
	while(1);
 800355e:	e7fe      	b.n	800355e <initiate_mainScreen+0x3e>
 8003560:	08008858 	.word	0x08008858

08003564 <updatewidget>:

}
void updatewidget(uint8_t circleNum)
{
 8003564:	b590      	push	{r4, r7, lr}
 8003566:	b085      	sub	sp, #20
 8003568:	af02      	add	r7, sp, #8
 800356a:	4603      	mov	r3, r0
 800356c:	71fb      	strb	r3, [r7, #7]
	LT768_Select_Internal_Font_Init(32, 1,1, 1, 1);
 800356e:	2301      	movs	r3, #1
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	2301      	movs	r3, #1
 8003574:	2201      	movs	r2, #1
 8003576:	2101      	movs	r1, #1
 8003578:	2020      	movs	r0, #32
 800357a:	f7fe fd70 	bl	800205e <LT768_Select_Internal_Font_Init>
	int_to_string(numToString, circleNum);
 800357e:	79fb      	ldrb	r3, [r7, #7]
 8003580:	4619      	mov	r1, r3
 8003582:	48ad      	ldr	r0, [pc, #692]	; (8003838 <updatewidget+0x2d4>)
 8003584:	f7ff feb4 	bl	80032f0 <int_to_string>
	if(circleNum == 1 || circleNum == 2 || circleNum == 3 )
 8003588:	79fb      	ldrb	r3, [r7, #7]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d006      	beq.n	800359c <updatewidget+0x38>
 800358e:	79fb      	ldrb	r3, [r7, #7]
 8003590:	2b02      	cmp	r3, #2
 8003592:	d003      	beq.n	800359c <updatewidget+0x38>
 8003594:	79fb      	ldrb	r3, [r7, #7]
 8003596:	2b03      	cmp	r3, #3
 8003598:	f040 80a0 	bne.w	80036dc <updatewidget+0x178>
		{
			LT768_DrawCircle_Width(xStart + (40 * circleNum) + (27 *(circleNum-1)), (yStart + 43) , 29, White, DarkGrey, 1);
 800359c:	79fb      	ldrb	r3, [r7, #7]
 800359e:	b29b      	uxth	r3, r3
 80035a0:	461a      	mov	r2, r3
 80035a2:	0092      	lsls	r2, r2, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	4619      	mov	r1, r3
 80035b2:	0049      	lsls	r1, r1, #1
 80035b4:	440b      	add	r3, r1
 80035b6:	4619      	mov	r1, r3
 80035b8:	00c8      	lsls	r0, r1, #3
 80035ba:	4619      	mov	r1, r3
 80035bc:	4603      	mov	r3, r0
 80035be:	440b      	add	r3, r1
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	4413      	add	r3, r2
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	4b9d      	ldr	r3, [pc, #628]	; (800383c <updatewidget+0x2d8>)
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	4413      	add	r3, r2
 80035cc:	b298      	uxth	r0, r3
 80035ce:	4b9c      	ldr	r3, [pc, #624]	; (8003840 <updatewidget+0x2dc>)
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	332b      	adds	r3, #43	; 0x2b
 80035d4:	b299      	uxth	r1, r3
 80035d6:	2301      	movs	r3, #1
 80035d8:	9301      	str	r3, [sp, #4]
 80035da:	f644 2349 	movw	r3, #19017	; 0x4a49
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035e4:	221d      	movs	r2, #29
 80035e6:	f7fe fc65 	bl	8001eb4 <LT768_DrawCircle_Width>
			LT768_Print_Internal_Font_String((xStart + (40 * circleNum) + (27 *(circleNum-1)))-8, yStart+28, White, 0, numToString);
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	461a      	mov	r2, r3
 80035f0:	0092      	lsls	r2, r2, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	4619      	mov	r1, r3
 8003600:	0049      	lsls	r1, r1, #1
 8003602:	440b      	add	r3, r1
 8003604:	4619      	mov	r1, r3
 8003606:	00c8      	lsls	r0, r1, #3
 8003608:	4619      	mov	r1, r3
 800360a:	4603      	mov	r3, r0
 800360c:	440b      	add	r3, r1
 800360e:	b29b      	uxth	r3, r3
 8003610:	4413      	add	r3, r2
 8003612:	b29a      	uxth	r2, r3
 8003614:	4b89      	ldr	r3, [pc, #548]	; (800383c <updatewidget+0x2d8>)
 8003616:	881b      	ldrh	r3, [r3, #0]
 8003618:	4413      	add	r3, r2
 800361a:	b29b      	uxth	r3, r3
 800361c:	3b08      	subs	r3, #8
 800361e:	b298      	uxth	r0, r3
 8003620:	4b87      	ldr	r3, [pc, #540]	; (8003840 <updatewidget+0x2dc>)
 8003622:	881b      	ldrh	r3, [r3, #0]
 8003624:	331c      	adds	r3, #28
 8003626:	b299      	uxth	r1, r3
 8003628:	4b83      	ldr	r3, [pc, #524]	; (8003838 <updatewidget+0x2d4>)
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	2300      	movs	r3, #0
 800362e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003632:	f7fe fd72 	bl	800211a <LT768_Print_Internal_Font_String>
			HAL_Delay(widgetDelay);
 8003636:	4b83      	ldr	r3, [pc, #524]	; (8003844 <updatewidget+0x2e0>)
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f001 fc48 	bl	8004ed0 <HAL_Delay>
			LT768_DrawCircle_Width(xStart + (40 * circleNum) + (27 *(circleNum-1)), (yStart + 43) , 29, White, BGcolor, 1);
 8003640:	79fb      	ldrb	r3, [r7, #7]
 8003642:	b29b      	uxth	r3, r3
 8003644:	461a      	mov	r2, r3
 8003646:	0092      	lsls	r2, r2, #2
 8003648:	4413      	add	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	b29a      	uxth	r2, r3
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	3b01      	subs	r3, #1
 8003652:	b29b      	uxth	r3, r3
 8003654:	4619      	mov	r1, r3
 8003656:	0049      	lsls	r1, r1, #1
 8003658:	440b      	add	r3, r1
 800365a:	4619      	mov	r1, r3
 800365c:	00c8      	lsls	r0, r1, #3
 800365e:	4619      	mov	r1, r3
 8003660:	4603      	mov	r3, r0
 8003662:	440b      	add	r3, r1
 8003664:	b29b      	uxth	r3, r3
 8003666:	4413      	add	r3, r2
 8003668:	b29a      	uxth	r2, r3
 800366a:	4b74      	ldr	r3, [pc, #464]	; (800383c <updatewidget+0x2d8>)
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	4413      	add	r3, r2
 8003670:	b298      	uxth	r0, r3
 8003672:	4b73      	ldr	r3, [pc, #460]	; (8003840 <updatewidget+0x2dc>)
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	332b      	adds	r3, #43	; 0x2b
 8003678:	b299      	uxth	r1, r3
 800367a:	2301      	movs	r3, #1
 800367c:	9301      	str	r3, [sp, #4]
 800367e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003688:	221d      	movs	r2, #29
 800368a:	f7fe fc13 	bl	8001eb4 <LT768_DrawCircle_Width>
			LT768_Print_Internal_Font_String((xStart + (40 * circleNum) + (27 *(circleNum-1)))-8, yStart+28, White, 0, numToString);
 800368e:	79fb      	ldrb	r3, [r7, #7]
 8003690:	b29b      	uxth	r3, r3
 8003692:	461a      	mov	r2, r3
 8003694:	0092      	lsls	r2, r2, #2
 8003696:	4413      	add	r3, r2
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	b29a      	uxth	r2, r3
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	3b01      	subs	r3, #1
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	4619      	mov	r1, r3
 80036a4:	0049      	lsls	r1, r1, #1
 80036a6:	440b      	add	r3, r1
 80036a8:	4619      	mov	r1, r3
 80036aa:	00c8      	lsls	r0, r1, #3
 80036ac:	4619      	mov	r1, r3
 80036ae:	4603      	mov	r3, r0
 80036b0:	440b      	add	r3, r1
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	4413      	add	r3, r2
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	4b60      	ldr	r3, [pc, #384]	; (800383c <updatewidget+0x2d8>)
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	4413      	add	r3, r2
 80036be:	b29b      	uxth	r3, r3
 80036c0:	3b08      	subs	r3, #8
 80036c2:	b298      	uxth	r0, r3
 80036c4:	4b5e      	ldr	r3, [pc, #376]	; (8003840 <updatewidget+0x2dc>)
 80036c6:	881b      	ldrh	r3, [r3, #0]
 80036c8:	331c      	adds	r3, #28
 80036ca:	b299      	uxth	r1, r3
 80036cc:	4b5a      	ldr	r3, [pc, #360]	; (8003838 <updatewidget+0x2d4>)
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	2300      	movs	r3, #0
 80036d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036d6:	f7fe fd20 	bl	800211a <LT768_Print_Internal_Font_String>
 80036da:	e32b      	b.n	8003d34 <updatewidget+0x7d0>
		}
	else if(circleNum == 4 || circleNum == 5 || circleNum == 6 )
 80036dc:	79fb      	ldrb	r3, [r7, #7]
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d006      	beq.n	80036f0 <updatewidget+0x18c>
 80036e2:	79fb      	ldrb	r3, [r7, #7]
 80036e4:	2b05      	cmp	r3, #5
 80036e6:	d003      	beq.n	80036f0 <updatewidget+0x18c>
 80036e8:	79fb      	ldrb	r3, [r7, #7]
 80036ea:	2b06      	cmp	r3, #6
 80036ec:	f040 80ac 	bne.w	8003848 <updatewidget+0x2e4>
		{
			LT768_DrawCircle_Width(xStart + (40 * (circleNum-3)) + (27 *((circleNum-4))),(yStart + 110)  , 29, White, DarkGrey, 1);
 80036f0:	79fb      	ldrb	r3, [r7, #7]
 80036f2:	3b03      	subs	r3, #3
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	461a      	mov	r2, r3
 80036f8:	0092      	lsls	r2, r2, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	b29a      	uxth	r2, r3
 8003700:	79fb      	ldrb	r3, [r7, #7]
 8003702:	3b04      	subs	r3, #4
 8003704:	b29b      	uxth	r3, r3
 8003706:	4619      	mov	r1, r3
 8003708:	0049      	lsls	r1, r1, #1
 800370a:	440b      	add	r3, r1
 800370c:	4619      	mov	r1, r3
 800370e:	00c8      	lsls	r0, r1, #3
 8003710:	4619      	mov	r1, r3
 8003712:	4603      	mov	r3, r0
 8003714:	440b      	add	r3, r1
 8003716:	b29b      	uxth	r3, r3
 8003718:	4413      	add	r3, r2
 800371a:	b29a      	uxth	r2, r3
 800371c:	4b47      	ldr	r3, [pc, #284]	; (800383c <updatewidget+0x2d8>)
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	4413      	add	r3, r2
 8003722:	b298      	uxth	r0, r3
 8003724:	4b46      	ldr	r3, [pc, #280]	; (8003840 <updatewidget+0x2dc>)
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	336e      	adds	r3, #110	; 0x6e
 800372a:	b299      	uxth	r1, r3
 800372c:	2301      	movs	r3, #1
 800372e:	9301      	str	r3, [sp, #4]
 8003730:	f644 2349 	movw	r3, #19017	; 0x4a49
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800373a:	221d      	movs	r2, #29
 800373c:	f7fe fbba 	bl	8001eb4 <LT768_DrawCircle_Width>
			LT768_Print_Internal_Font_String((xStart + (40 * (circleNum-3)) + (27 *((circleNum-4))))-8, yStart+95, White, 0, numToString);
 8003740:	79fb      	ldrb	r3, [r7, #7]
 8003742:	3b03      	subs	r3, #3
 8003744:	b29b      	uxth	r3, r3
 8003746:	461a      	mov	r2, r3
 8003748:	0092      	lsls	r2, r2, #2
 800374a:	4413      	add	r3, r2
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	b29a      	uxth	r2, r3
 8003750:	79fb      	ldrb	r3, [r7, #7]
 8003752:	3b04      	subs	r3, #4
 8003754:	b29b      	uxth	r3, r3
 8003756:	4619      	mov	r1, r3
 8003758:	0049      	lsls	r1, r1, #1
 800375a:	440b      	add	r3, r1
 800375c:	4619      	mov	r1, r3
 800375e:	00c8      	lsls	r0, r1, #3
 8003760:	4619      	mov	r1, r3
 8003762:	4603      	mov	r3, r0
 8003764:	440b      	add	r3, r1
 8003766:	b29b      	uxth	r3, r3
 8003768:	4413      	add	r3, r2
 800376a:	b29a      	uxth	r2, r3
 800376c:	4b33      	ldr	r3, [pc, #204]	; (800383c <updatewidget+0x2d8>)
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	4413      	add	r3, r2
 8003772:	b29b      	uxth	r3, r3
 8003774:	3b08      	subs	r3, #8
 8003776:	b298      	uxth	r0, r3
 8003778:	4b31      	ldr	r3, [pc, #196]	; (8003840 <updatewidget+0x2dc>)
 800377a:	881b      	ldrh	r3, [r3, #0]
 800377c:	335f      	adds	r3, #95	; 0x5f
 800377e:	b299      	uxth	r1, r3
 8003780:	4b2d      	ldr	r3, [pc, #180]	; (8003838 <updatewidget+0x2d4>)
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	2300      	movs	r3, #0
 8003786:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800378a:	f7fe fcc6 	bl	800211a <LT768_Print_Internal_Font_String>
			HAL_Delay(widgetDelay);
 800378e:	4b2d      	ldr	r3, [pc, #180]	; (8003844 <updatewidget+0x2e0>)
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f001 fb9c 	bl	8004ed0 <HAL_Delay>
			LT768_DrawCircle_Width(xStart + (40 * (circleNum-3)) + (27 *((circleNum-4))), (yStart + 110) , 29, White, BGcolor, 1);
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	3b03      	subs	r3, #3
 800379c:	b29b      	uxth	r3, r3
 800379e:	461a      	mov	r2, r3
 80037a0:	0092      	lsls	r2, r2, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	79fb      	ldrb	r3, [r7, #7]
 80037aa:	3b04      	subs	r3, #4
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	4619      	mov	r1, r3
 80037b0:	0049      	lsls	r1, r1, #1
 80037b2:	440b      	add	r3, r1
 80037b4:	4619      	mov	r1, r3
 80037b6:	00c8      	lsls	r0, r1, #3
 80037b8:	4619      	mov	r1, r3
 80037ba:	4603      	mov	r3, r0
 80037bc:	440b      	add	r3, r1
 80037be:	b29b      	uxth	r3, r3
 80037c0:	4413      	add	r3, r2
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	4b1d      	ldr	r3, [pc, #116]	; (800383c <updatewidget+0x2d8>)
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	4413      	add	r3, r2
 80037ca:	b298      	uxth	r0, r3
 80037cc:	4b1c      	ldr	r3, [pc, #112]	; (8003840 <updatewidget+0x2dc>)
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	336e      	adds	r3, #110	; 0x6e
 80037d2:	b299      	uxth	r1, r3
 80037d4:	2301      	movs	r3, #1
 80037d6:	9301      	str	r3, [sp, #4]
 80037d8:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037e2:	221d      	movs	r2, #29
 80037e4:	f7fe fb66 	bl	8001eb4 <LT768_DrawCircle_Width>
			LT768_Print_Internal_Font_String((xStart + (40 * (circleNum-3)) + (27 *((circleNum-4))))-8, yStart+95, White, 0, numToString);
 80037e8:	79fb      	ldrb	r3, [r7, #7]
 80037ea:	3b03      	subs	r3, #3
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	461a      	mov	r2, r3
 80037f0:	0092      	lsls	r2, r2, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	79fb      	ldrb	r3, [r7, #7]
 80037fa:	3b04      	subs	r3, #4
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	4619      	mov	r1, r3
 8003800:	0049      	lsls	r1, r1, #1
 8003802:	440b      	add	r3, r1
 8003804:	4619      	mov	r1, r3
 8003806:	00c8      	lsls	r0, r1, #3
 8003808:	4619      	mov	r1, r3
 800380a:	4603      	mov	r3, r0
 800380c:	440b      	add	r3, r1
 800380e:	b29b      	uxth	r3, r3
 8003810:	4413      	add	r3, r2
 8003812:	b29a      	uxth	r2, r3
 8003814:	4b09      	ldr	r3, [pc, #36]	; (800383c <updatewidget+0x2d8>)
 8003816:	881b      	ldrh	r3, [r3, #0]
 8003818:	4413      	add	r3, r2
 800381a:	b29b      	uxth	r3, r3
 800381c:	3b08      	subs	r3, #8
 800381e:	b298      	uxth	r0, r3
 8003820:	4b07      	ldr	r3, [pc, #28]	; (8003840 <updatewidget+0x2dc>)
 8003822:	881b      	ldrh	r3, [r3, #0]
 8003824:	335f      	adds	r3, #95	; 0x5f
 8003826:	b299      	uxth	r1, r3
 8003828:	4b03      	ldr	r3, [pc, #12]	; (8003838 <updatewidget+0x2d4>)
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	2300      	movs	r3, #0
 800382e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003832:	f7fe fc72 	bl	800211a <LT768_Print_Internal_Font_String>
 8003836:	e27d      	b.n	8003d34 <updatewidget+0x7d0>
 8003838:	20000370 	.word	0x20000370
 800383c:	2000037a 	.word	0x2000037a
 8003840:	2000037c 	.word	0x2000037c
 8003844:	20000002 	.word	0x20000002
		}
	else if(circleNum == 7 || circleNum == 8 || circleNum == 9 )
 8003848:	79fb      	ldrb	r3, [r7, #7]
 800384a:	2b07      	cmp	r3, #7
 800384c:	d006      	beq.n	800385c <updatewidget+0x2f8>
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	2b08      	cmp	r3, #8
 8003852:	d003      	beq.n	800385c <updatewidget+0x2f8>
 8003854:	79fb      	ldrb	r3, [r7, #7]
 8003856:	2b09      	cmp	r3, #9
 8003858:	f040 80a4 	bne.w	80039a4 <updatewidget+0x440>
		{
			LT768_DrawCircle_Width(xStart + (40 * (circleNum-6)) + (27 *((circleNum-7))),(yStart + 177)  , 29, White, DarkGrey, 1);
 800385c:	79fb      	ldrb	r3, [r7, #7]
 800385e:	3b06      	subs	r3, #6
 8003860:	b29b      	uxth	r3, r3
 8003862:	461a      	mov	r2, r3
 8003864:	0092      	lsls	r2, r2, #2
 8003866:	4413      	add	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	b29a      	uxth	r2, r3
 800386c:	79fb      	ldrb	r3, [r7, #7]
 800386e:	3b07      	subs	r3, #7
 8003870:	b29b      	uxth	r3, r3
 8003872:	4619      	mov	r1, r3
 8003874:	0049      	lsls	r1, r1, #1
 8003876:	440b      	add	r3, r1
 8003878:	4619      	mov	r1, r3
 800387a:	00c8      	lsls	r0, r1, #3
 800387c:	4619      	mov	r1, r3
 800387e:	4603      	mov	r3, r0
 8003880:	440b      	add	r3, r1
 8003882:	b29b      	uxth	r3, r3
 8003884:	4413      	add	r3, r2
 8003886:	b29a      	uxth	r2, r3
 8003888:	4b9f      	ldr	r3, [pc, #636]	; (8003b08 <updatewidget+0x5a4>)
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	4413      	add	r3, r2
 800388e:	b298      	uxth	r0, r3
 8003890:	4b9e      	ldr	r3, [pc, #632]	; (8003b0c <updatewidget+0x5a8>)
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	33b1      	adds	r3, #177	; 0xb1
 8003896:	b299      	uxth	r1, r3
 8003898:	2301      	movs	r3, #1
 800389a:	9301      	str	r3, [sp, #4]
 800389c:	f644 2349 	movw	r3, #19017	; 0x4a49
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038a6:	221d      	movs	r2, #29
 80038a8:	f7fe fb04 	bl	8001eb4 <LT768_DrawCircle_Width>
			LT768_Print_Internal_Font_String((xStart + (40 * (circleNum-6)) + (27 *((circleNum-7))))-8, yStart+162, White, 0, numToString);
 80038ac:	79fb      	ldrb	r3, [r7, #7]
 80038ae:	3b06      	subs	r3, #6
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	461a      	mov	r2, r3
 80038b4:	0092      	lsls	r2, r2, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	79fb      	ldrb	r3, [r7, #7]
 80038be:	3b07      	subs	r3, #7
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	4619      	mov	r1, r3
 80038c4:	0049      	lsls	r1, r1, #1
 80038c6:	440b      	add	r3, r1
 80038c8:	4619      	mov	r1, r3
 80038ca:	00c8      	lsls	r0, r1, #3
 80038cc:	4619      	mov	r1, r3
 80038ce:	4603      	mov	r3, r0
 80038d0:	440b      	add	r3, r1
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	4413      	add	r3, r2
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	4b8b      	ldr	r3, [pc, #556]	; (8003b08 <updatewidget+0x5a4>)
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	4413      	add	r3, r2
 80038de:	b29b      	uxth	r3, r3
 80038e0:	3b08      	subs	r3, #8
 80038e2:	b298      	uxth	r0, r3
 80038e4:	4b89      	ldr	r3, [pc, #548]	; (8003b0c <updatewidget+0x5a8>)
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	33a2      	adds	r3, #162	; 0xa2
 80038ea:	b299      	uxth	r1, r3
 80038ec:	4b88      	ldr	r3, [pc, #544]	; (8003b10 <updatewidget+0x5ac>)
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	2300      	movs	r3, #0
 80038f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038f6:	f7fe fc10 	bl	800211a <LT768_Print_Internal_Font_String>
			HAL_Delay(widgetDelay);
 80038fa:	4b86      	ldr	r3, [pc, #536]	; (8003b14 <updatewidget+0x5b0>)
 80038fc:	881b      	ldrh	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f001 fae6 	bl	8004ed0 <HAL_Delay>
			LT768_DrawCircle_Width(xStart + (40 * (circleNum-6)) + (27 *((circleNum-7))), (yStart + 177) , 29, White, BGcolor, 1);
 8003904:	79fb      	ldrb	r3, [r7, #7]
 8003906:	3b06      	subs	r3, #6
 8003908:	b29b      	uxth	r3, r3
 800390a:	461a      	mov	r2, r3
 800390c:	0092      	lsls	r2, r2, #2
 800390e:	4413      	add	r3, r2
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	b29a      	uxth	r2, r3
 8003914:	79fb      	ldrb	r3, [r7, #7]
 8003916:	3b07      	subs	r3, #7
 8003918:	b29b      	uxth	r3, r3
 800391a:	4619      	mov	r1, r3
 800391c:	0049      	lsls	r1, r1, #1
 800391e:	440b      	add	r3, r1
 8003920:	4619      	mov	r1, r3
 8003922:	00c8      	lsls	r0, r1, #3
 8003924:	4619      	mov	r1, r3
 8003926:	4603      	mov	r3, r0
 8003928:	440b      	add	r3, r1
 800392a:	b29b      	uxth	r3, r3
 800392c:	4413      	add	r3, r2
 800392e:	b29a      	uxth	r2, r3
 8003930:	4b75      	ldr	r3, [pc, #468]	; (8003b08 <updatewidget+0x5a4>)
 8003932:	881b      	ldrh	r3, [r3, #0]
 8003934:	4413      	add	r3, r2
 8003936:	b298      	uxth	r0, r3
 8003938:	4b74      	ldr	r3, [pc, #464]	; (8003b0c <updatewidget+0x5a8>)
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	33b1      	adds	r3, #177	; 0xb1
 800393e:	b299      	uxth	r1, r3
 8003940:	2301      	movs	r3, #1
 8003942:	9301      	str	r3, [sp, #4]
 8003944:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800394e:	221d      	movs	r2, #29
 8003950:	f7fe fab0 	bl	8001eb4 <LT768_DrawCircle_Width>
			LT768_Print_Internal_Font_String((xStart + (40 * (circleNum-6)) + (27 *((circleNum-7))))-8, yStart+162, White, 0, numToString);
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	3b06      	subs	r3, #6
 8003958:	b29b      	uxth	r3, r3
 800395a:	461a      	mov	r2, r3
 800395c:	0092      	lsls	r2, r2, #2
 800395e:	4413      	add	r3, r2
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	b29a      	uxth	r2, r3
 8003964:	79fb      	ldrb	r3, [r7, #7]
 8003966:	3b07      	subs	r3, #7
 8003968:	b29b      	uxth	r3, r3
 800396a:	4619      	mov	r1, r3
 800396c:	0049      	lsls	r1, r1, #1
 800396e:	440b      	add	r3, r1
 8003970:	4619      	mov	r1, r3
 8003972:	00c8      	lsls	r0, r1, #3
 8003974:	4619      	mov	r1, r3
 8003976:	4603      	mov	r3, r0
 8003978:	440b      	add	r3, r1
 800397a:	b29b      	uxth	r3, r3
 800397c:	4413      	add	r3, r2
 800397e:	b29a      	uxth	r2, r3
 8003980:	4b61      	ldr	r3, [pc, #388]	; (8003b08 <updatewidget+0x5a4>)
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	4413      	add	r3, r2
 8003986:	b29b      	uxth	r3, r3
 8003988:	3b08      	subs	r3, #8
 800398a:	b298      	uxth	r0, r3
 800398c:	4b5f      	ldr	r3, [pc, #380]	; (8003b0c <updatewidget+0x5a8>)
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	33a2      	adds	r3, #162	; 0xa2
 8003992:	b299      	uxth	r1, r3
 8003994:	4b5e      	ldr	r3, [pc, #376]	; (8003b10 <updatewidget+0x5ac>)
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	2300      	movs	r3, #0
 800399a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800399e:	f7fe fbbc 	bl	800211a <LT768_Print_Internal_Font_String>
 80039a2:	e1c7      	b.n	8003d34 <updatewidget+0x7d0>
		}
	else if(circleNum == 10 || circleNum == 11 || circleNum == 12 )
 80039a4:	79fb      	ldrb	r3, [r7, #7]
 80039a6:	2b0a      	cmp	r3, #10
 80039a8:	d006      	beq.n	80039b8 <updatewidget+0x454>
 80039aa:	79fb      	ldrb	r3, [r7, #7]
 80039ac:	2b0b      	cmp	r3, #11
 80039ae:	d003      	beq.n	80039b8 <updatewidget+0x454>
 80039b0:	79fb      	ldrb	r3, [r7, #7]
 80039b2:	2b0c      	cmp	r3, #12
 80039b4:	f040 81be 	bne.w	8003d34 <updatewidget+0x7d0>
			{
				if(circleNum == 11)
 80039b8:	79fb      	ldrb	r3, [r7, #7]
 80039ba:	2b0b      	cmp	r3, #11
 80039bc:	f040 80ae 	bne.w	8003b1c <updatewidget+0x5b8>
				{
					LT768_DrawCircle_Width(xStart + (40 * (circleNum-9)) + (27 *((circleNum-10))),(yStart + 244)  , 29, White, DarkGrey, 1);
 80039c0:	79fb      	ldrb	r3, [r7, #7]
 80039c2:	3b09      	subs	r3, #9
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	461a      	mov	r2, r3
 80039c8:	0092      	lsls	r2, r2, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	79fb      	ldrb	r3, [r7, #7]
 80039d2:	3b0a      	subs	r3, #10
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	4619      	mov	r1, r3
 80039d8:	0049      	lsls	r1, r1, #1
 80039da:	440b      	add	r3, r1
 80039dc:	4619      	mov	r1, r3
 80039de:	00c8      	lsls	r0, r1, #3
 80039e0:	4619      	mov	r1, r3
 80039e2:	4603      	mov	r3, r0
 80039e4:	440b      	add	r3, r1
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	4413      	add	r3, r2
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	4b46      	ldr	r3, [pc, #280]	; (8003b08 <updatewidget+0x5a4>)
 80039ee:	881b      	ldrh	r3, [r3, #0]
 80039f0:	4413      	add	r3, r2
 80039f2:	b298      	uxth	r0, r3
 80039f4:	4b45      	ldr	r3, [pc, #276]	; (8003b0c <updatewidget+0x5a8>)
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	33f4      	adds	r3, #244	; 0xf4
 80039fa:	b299      	uxth	r1, r3
 80039fc:	2301      	movs	r3, #1
 80039fe:	9301      	str	r3, [sp, #4]
 8003a00:	f644 2349 	movw	r3, #19017	; 0x4a49
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a0a:	221d      	movs	r2, #29
 8003a0c:	f7fe fa52 	bl	8001eb4 <LT768_DrawCircle_Width>
					LT768_Print_Internal_Font_String((xStart + (40 * (circleNum-9)) + (27 *((circleNum-10))))-8, yStart+229, White, 0, "0");
 8003a10:	79fb      	ldrb	r3, [r7, #7]
 8003a12:	3b09      	subs	r3, #9
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	461a      	mov	r2, r3
 8003a18:	0092      	lsls	r2, r2, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	79fb      	ldrb	r3, [r7, #7]
 8003a22:	3b0a      	subs	r3, #10
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	4619      	mov	r1, r3
 8003a28:	0049      	lsls	r1, r1, #1
 8003a2a:	440b      	add	r3, r1
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	00c8      	lsls	r0, r1, #3
 8003a30:	4619      	mov	r1, r3
 8003a32:	4603      	mov	r3, r0
 8003a34:	440b      	add	r3, r1
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	4413      	add	r3, r2
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	4b32      	ldr	r3, [pc, #200]	; (8003b08 <updatewidget+0x5a4>)
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	4413      	add	r3, r2
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	3b08      	subs	r3, #8
 8003a46:	b298      	uxth	r0, r3
 8003a48:	4b30      	ldr	r3, [pc, #192]	; (8003b0c <updatewidget+0x5a8>)
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	33e5      	adds	r3, #229	; 0xe5
 8003a4e:	b299      	uxth	r1, r3
 8003a50:	4b31      	ldr	r3, [pc, #196]	; (8003b18 <updatewidget+0x5b4>)
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	2300      	movs	r3, #0
 8003a56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a5a:	f7fe fb5e 	bl	800211a <LT768_Print_Internal_Font_String>
					HAL_Delay(widgetDelay);
 8003a5e:	4b2d      	ldr	r3, [pc, #180]	; (8003b14 <updatewidget+0x5b0>)
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f001 fa34 	bl	8004ed0 <HAL_Delay>
					LT768_DrawCircle_Width(xStart + (40 * (circleNum-9)) + (27 *((circleNum-10))), (yStart + 244) , 29, White, BGcolor, 1);
 8003a68:	79fb      	ldrb	r3, [r7, #7]
 8003a6a:	3b09      	subs	r3, #9
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	461a      	mov	r2, r3
 8003a70:	0092      	lsls	r2, r2, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	79fb      	ldrb	r3, [r7, #7]
 8003a7a:	3b0a      	subs	r3, #10
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	4619      	mov	r1, r3
 8003a80:	0049      	lsls	r1, r1, #1
 8003a82:	440b      	add	r3, r1
 8003a84:	4619      	mov	r1, r3
 8003a86:	00c8      	lsls	r0, r1, #3
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	440b      	add	r3, r1
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	4413      	add	r3, r2
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	4b1c      	ldr	r3, [pc, #112]	; (8003b08 <updatewidget+0x5a4>)
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	4413      	add	r3, r2
 8003a9a:	b298      	uxth	r0, r3
 8003a9c:	4b1b      	ldr	r3, [pc, #108]	; (8003b0c <updatewidget+0x5a8>)
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	33f4      	adds	r3, #244	; 0xf4
 8003aa2:	b299      	uxth	r1, r3
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	9301      	str	r3, [sp, #4]
 8003aa8:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ab2:	221d      	movs	r2, #29
 8003ab4:	f7fe f9fe 	bl	8001eb4 <LT768_DrawCircle_Width>
					LT768_Print_Internal_Font_String((xStart + (40 * (circleNum-9)) + (27 *((circleNum-10))))-8, yStart+229, White, 0, "0");
 8003ab8:	79fb      	ldrb	r3, [r7, #7]
 8003aba:	3b09      	subs	r3, #9
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	461a      	mov	r2, r3
 8003ac0:	0092      	lsls	r2, r2, #2
 8003ac2:	4413      	add	r3, r2
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	79fb      	ldrb	r3, [r7, #7]
 8003aca:	3b0a      	subs	r3, #10
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	4619      	mov	r1, r3
 8003ad0:	0049      	lsls	r1, r1, #1
 8003ad2:	440b      	add	r3, r1
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	00c8      	lsls	r0, r1, #3
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4603      	mov	r3, r0
 8003adc:	440b      	add	r3, r1
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	4413      	add	r3, r2
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	4b08      	ldr	r3, [pc, #32]	; (8003b08 <updatewidget+0x5a4>)
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	4413      	add	r3, r2
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	3b08      	subs	r3, #8
 8003aee:	b298      	uxth	r0, r3
 8003af0:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <updatewidget+0x5a8>)
 8003af2:	881b      	ldrh	r3, [r3, #0]
 8003af4:	33e5      	adds	r3, #229	; 0xe5
 8003af6:	b299      	uxth	r1, r3
 8003af8:	4b07      	ldr	r3, [pc, #28]	; (8003b18 <updatewidget+0x5b4>)
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	2300      	movs	r3, #0
 8003afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b02:	f7fe fb0a 	bl	800211a <LT768_Print_Internal_Font_String>
					HAL_Delay(widgetDelay);
					LT768_DrawCircle_Width(xStart + (40 * (circleNum-9)) + (27 *((circleNum-10))), (yStart + 244) , 29, White, BGcolor, 1);
				}
			}

}
 8003b06:	e115      	b.n	8003d34 <updatewidget+0x7d0>
 8003b08:	2000037a 	.word	0x2000037a
 8003b0c:	2000037c 	.word	0x2000037c
 8003b10:	20000370 	.word	0x20000370
 8003b14:	20000002 	.word	0x20000002
 8003b18:	0800884c 	.word	0x0800884c
				else if(circleNum == 10)
 8003b1c:	79fb      	ldrb	r3, [r7, #7]
 8003b1e:	2b0a      	cmp	r3, #10
 8003b20:	f040 80b2 	bne.w	8003c88 <updatewidget+0x724>
					LT768_DrawCircle_Width(xStart + (40 * (circleNum-9)) + (27 *((circleNum-10))),(yStart + 244)  , 29, White, DarkGrey, 1);
 8003b24:	79fb      	ldrb	r3, [r7, #7]
 8003b26:	3b09      	subs	r3, #9
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	0092      	lsls	r2, r2, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	79fb      	ldrb	r3, [r7, #7]
 8003b36:	3b0a      	subs	r3, #10
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	0049      	lsls	r1, r1, #1
 8003b3e:	440b      	add	r3, r1
 8003b40:	4619      	mov	r1, r3
 8003b42:	00c8      	lsls	r0, r1, #3
 8003b44:	4619      	mov	r1, r3
 8003b46:	4603      	mov	r3, r0
 8003b48:	440b      	add	r3, r1
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	4413      	add	r3, r2
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	4b7a      	ldr	r3, [pc, #488]	; (8003d3c <updatewidget+0x7d8>)
 8003b52:	881b      	ldrh	r3, [r3, #0]
 8003b54:	4413      	add	r3, r2
 8003b56:	b298      	uxth	r0, r3
 8003b58:	4b79      	ldr	r3, [pc, #484]	; (8003d40 <updatewidget+0x7dc>)
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	33f4      	adds	r3, #244	; 0xf4
 8003b5e:	b299      	uxth	r1, r3
 8003b60:	2301      	movs	r3, #1
 8003b62:	9301      	str	r3, [sp, #4]
 8003b64:	f644 2349 	movw	r3, #19017	; 0x4a49
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b6e:	221d      	movs	r2, #29
 8003b70:	f7fe f9a0 	bl	8001eb4 <LT768_DrawCircle_Width>
					LT768_DrawLine_Width((xStart + 34), (yStart + 250), (xStart + 46), (yStart + 237), White, 3);
 8003b74:	4b71      	ldr	r3, [pc, #452]	; (8003d3c <updatewidget+0x7d8>)
 8003b76:	881b      	ldrh	r3, [r3, #0]
 8003b78:	3322      	adds	r3, #34	; 0x22
 8003b7a:	b298      	uxth	r0, r3
 8003b7c:	4b70      	ldr	r3, [pc, #448]	; (8003d40 <updatewidget+0x7dc>)
 8003b7e:	881b      	ldrh	r3, [r3, #0]
 8003b80:	33fa      	adds	r3, #250	; 0xfa
 8003b82:	b299      	uxth	r1, r3
 8003b84:	4b6d      	ldr	r3, [pc, #436]	; (8003d3c <updatewidget+0x7d8>)
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	332e      	adds	r3, #46	; 0x2e
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	4b6c      	ldr	r3, [pc, #432]	; (8003d40 <updatewidget+0x7dc>)
 8003b8e:	881b      	ldrh	r3, [r3, #0]
 8003b90:	33ed      	adds	r3, #237	; 0xed
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	2403      	movs	r4, #3
 8003b96:	9401      	str	r4, [sp, #4]
 8003b98:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003b9c:	9400      	str	r4, [sp, #0]
 8003b9e:	f7fe f93a 	bl	8001e16 <LT768_DrawLine_Width>
					LT768_DrawLine_Width((xStart + 46), (yStart + 250), (xStart + 34), (yStart + 237), White, 3);
 8003ba2:	4b66      	ldr	r3, [pc, #408]	; (8003d3c <updatewidget+0x7d8>)
 8003ba4:	881b      	ldrh	r3, [r3, #0]
 8003ba6:	332e      	adds	r3, #46	; 0x2e
 8003ba8:	b298      	uxth	r0, r3
 8003baa:	4b65      	ldr	r3, [pc, #404]	; (8003d40 <updatewidget+0x7dc>)
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	33fa      	adds	r3, #250	; 0xfa
 8003bb0:	b299      	uxth	r1, r3
 8003bb2:	4b62      	ldr	r3, [pc, #392]	; (8003d3c <updatewidget+0x7d8>)
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	3322      	adds	r3, #34	; 0x22
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	4b61      	ldr	r3, [pc, #388]	; (8003d40 <updatewidget+0x7dc>)
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	33ed      	adds	r3, #237	; 0xed
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2403      	movs	r4, #3
 8003bc4:	9401      	str	r4, [sp, #4]
 8003bc6:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003bca:	9400      	str	r4, [sp, #0]
 8003bcc:	f7fe f923 	bl	8001e16 <LT768_DrawLine_Width>
					HAL_Delay(widgetDelay);
 8003bd0:	4b5c      	ldr	r3, [pc, #368]	; (8003d44 <updatewidget+0x7e0>)
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f001 f97b 	bl	8004ed0 <HAL_Delay>
					LT768_DrawCircle_Width(xStart + (40 * (circleNum-9)) + (27 *((circleNum-10))), (yStart + 244) , 29, White, BGcolor, 1);
 8003bda:	79fb      	ldrb	r3, [r7, #7]
 8003bdc:	3b09      	subs	r3, #9
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	461a      	mov	r2, r3
 8003be2:	0092      	lsls	r2, r2, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	79fb      	ldrb	r3, [r7, #7]
 8003bec:	3b0a      	subs	r3, #10
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	0049      	lsls	r1, r1, #1
 8003bf4:	440b      	add	r3, r1
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	00c8      	lsls	r0, r1, #3
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	440b      	add	r3, r1
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	4413      	add	r3, r2
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	4b4d      	ldr	r3, [pc, #308]	; (8003d3c <updatewidget+0x7d8>)
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	b298      	uxth	r0, r3
 8003c0e:	4b4c      	ldr	r3, [pc, #304]	; (8003d40 <updatewidget+0x7dc>)
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	33f4      	adds	r3, #244	; 0xf4
 8003c14:	b299      	uxth	r1, r3
 8003c16:	2301      	movs	r3, #1
 8003c18:	9301      	str	r3, [sp, #4]
 8003c1a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c24:	221d      	movs	r2, #29
 8003c26:	f7fe f945 	bl	8001eb4 <LT768_DrawCircle_Width>
					LT768_DrawLine_Width((xStart + 34), (yStart + 250), (xStart + 46), (yStart + 237), White, 3);
 8003c2a:	4b44      	ldr	r3, [pc, #272]	; (8003d3c <updatewidget+0x7d8>)
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	3322      	adds	r3, #34	; 0x22
 8003c30:	b298      	uxth	r0, r3
 8003c32:	4b43      	ldr	r3, [pc, #268]	; (8003d40 <updatewidget+0x7dc>)
 8003c34:	881b      	ldrh	r3, [r3, #0]
 8003c36:	33fa      	adds	r3, #250	; 0xfa
 8003c38:	b299      	uxth	r1, r3
 8003c3a:	4b40      	ldr	r3, [pc, #256]	; (8003d3c <updatewidget+0x7d8>)
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	332e      	adds	r3, #46	; 0x2e
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	4b3f      	ldr	r3, [pc, #252]	; (8003d40 <updatewidget+0x7dc>)
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	33ed      	adds	r3, #237	; 0xed
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2403      	movs	r4, #3
 8003c4c:	9401      	str	r4, [sp, #4]
 8003c4e:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003c52:	9400      	str	r4, [sp, #0]
 8003c54:	f7fe f8df 	bl	8001e16 <LT768_DrawLine_Width>
					LT768_DrawLine_Width((xStart + 46), (yStart + 250), (xStart + 34), (yStart + 237), White, 3);
 8003c58:	4b38      	ldr	r3, [pc, #224]	; (8003d3c <updatewidget+0x7d8>)
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	332e      	adds	r3, #46	; 0x2e
 8003c5e:	b298      	uxth	r0, r3
 8003c60:	4b37      	ldr	r3, [pc, #220]	; (8003d40 <updatewidget+0x7dc>)
 8003c62:	881b      	ldrh	r3, [r3, #0]
 8003c64:	33fa      	adds	r3, #250	; 0xfa
 8003c66:	b299      	uxth	r1, r3
 8003c68:	4b34      	ldr	r3, [pc, #208]	; (8003d3c <updatewidget+0x7d8>)
 8003c6a:	881b      	ldrh	r3, [r3, #0]
 8003c6c:	3322      	adds	r3, #34	; 0x22
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	4b33      	ldr	r3, [pc, #204]	; (8003d40 <updatewidget+0x7dc>)
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	33ed      	adds	r3, #237	; 0xed
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	2403      	movs	r4, #3
 8003c7a:	9401      	str	r4, [sp, #4]
 8003c7c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003c80:	9400      	str	r4, [sp, #0]
 8003c82:	f7fe f8c8 	bl	8001e16 <LT768_DrawLine_Width>
}
 8003c86:	e055      	b.n	8003d34 <updatewidget+0x7d0>
					LT768_DrawCircle_Width(xStart + (40 * (circleNum-9)) + (27 *((circleNum-10))),(yStart + 244)  , 29, White, DarkGrey, 1);
 8003c88:	79fb      	ldrb	r3, [r7, #7]
 8003c8a:	3b09      	subs	r3, #9
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	461a      	mov	r2, r3
 8003c90:	0092      	lsls	r2, r2, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	79fb      	ldrb	r3, [r7, #7]
 8003c9a:	3b0a      	subs	r3, #10
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	0049      	lsls	r1, r1, #1
 8003ca2:	440b      	add	r3, r1
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	00c8      	lsls	r0, r1, #3
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4603      	mov	r3, r0
 8003cac:	440b      	add	r3, r1
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	4b21      	ldr	r3, [pc, #132]	; (8003d3c <updatewidget+0x7d8>)
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	4413      	add	r3, r2
 8003cba:	b298      	uxth	r0, r3
 8003cbc:	4b20      	ldr	r3, [pc, #128]	; (8003d40 <updatewidget+0x7dc>)
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	33f4      	adds	r3, #244	; 0xf4
 8003cc2:	b299      	uxth	r1, r3
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	9301      	str	r3, [sp, #4]
 8003cc8:	f644 2349 	movw	r3, #19017	; 0x4a49
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003cd2:	221d      	movs	r2, #29
 8003cd4:	f7fe f8ee 	bl	8001eb4 <LT768_DrawCircle_Width>
					HAL_Delay(widgetDelay);
 8003cd8:	4b1a      	ldr	r3, [pc, #104]	; (8003d44 <updatewidget+0x7e0>)
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f001 f8f7 	bl	8004ed0 <HAL_Delay>
					LT768_DrawCircle_Width(xStart + (40 * (circleNum-9)) + (27 *((circleNum-10))), (yStart + 244) , 29, White, BGcolor, 1);
 8003ce2:	79fb      	ldrb	r3, [r7, #7]
 8003ce4:	3b09      	subs	r3, #9
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	461a      	mov	r2, r3
 8003cea:	0092      	lsls	r2, r2, #2
 8003cec:	4413      	add	r3, r2
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	79fb      	ldrb	r3, [r7, #7]
 8003cf4:	3b0a      	subs	r3, #10
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	0049      	lsls	r1, r1, #1
 8003cfc:	440b      	add	r3, r1
 8003cfe:	4619      	mov	r1, r3
 8003d00:	00c8      	lsls	r0, r1, #3
 8003d02:	4619      	mov	r1, r3
 8003d04:	4603      	mov	r3, r0
 8003d06:	440b      	add	r3, r1
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	4413      	add	r3, r2
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <updatewidget+0x7d8>)
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	4413      	add	r3, r2
 8003d14:	b298      	uxth	r0, r3
 8003d16:	4b0a      	ldr	r3, [pc, #40]	; (8003d40 <updatewidget+0x7dc>)
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	33f4      	adds	r3, #244	; 0xf4
 8003d1c:	b299      	uxth	r1, r3
 8003d1e:	2301      	movs	r3, #1
 8003d20:	9301      	str	r3, [sp, #4]
 8003d22:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d2c:	221d      	movs	r2, #29
 8003d2e:	f7fe f8c1 	bl	8001eb4 <LT768_DrawCircle_Width>
}
 8003d32:	e7ff      	b.n	8003d34 <updatewidget+0x7d0>
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd90      	pop	{r4, r7, pc}
 8003d3c:	2000037a 	.word	0x2000037a
 8003d40:	2000037c 	.word	0x2000037c
 8003d44:	20000002 	.word	0x20000002

08003d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d4c:	b672      	cpsid	i
}
 8003d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d50:	e7fe      	b.n	8003d50 <Error_Handler+0x8>
	...

08003d54 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003d58:	4b1b      	ldr	r3, [pc, #108]	; (8003dc8 <MX_SPI1_Init+0x74>)
 8003d5a:	4a1c      	ldr	r2, [pc, #112]	; (8003dcc <MX_SPI1_Init+0x78>)
 8003d5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003d5e:	4b1a      	ldr	r3, [pc, #104]	; (8003dc8 <MX_SPI1_Init+0x74>)
 8003d60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003d66:	4b18      	ldr	r3, [pc, #96]	; (8003dc8 <MX_SPI1_Init+0x74>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d6c:	4b16      	ldr	r3, [pc, #88]	; (8003dc8 <MX_SPI1_Init+0x74>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003d72:	4b15      	ldr	r3, [pc, #84]	; (8003dc8 <MX_SPI1_Init+0x74>)
 8003d74:	2202      	movs	r2, #2
 8003d76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003d78:	4b13      	ldr	r3, [pc, #76]	; (8003dc8 <MX_SPI1_Init+0x74>)
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003d7e:	4b12      	ldr	r3, [pc, #72]	; (8003dc8 <MX_SPI1_Init+0x74>)
 8003d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003d86:	4b10      	ldr	r3, [pc, #64]	; (8003dc8 <MX_SPI1_Init+0x74>)
 8003d88:	2220      	movs	r2, #32
 8003d8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d8c:	4b0e      	ldr	r3, [pc, #56]	; (8003dc8 <MX_SPI1_Init+0x74>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d92:	4b0d      	ldr	r3, [pc, #52]	; (8003dc8 <MX_SPI1_Init+0x74>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d98:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <MX_SPI1_Init+0x74>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003d9e:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <MX_SPI1_Init+0x74>)
 8003da0:	220a      	movs	r2, #10
 8003da2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003da4:	4808      	ldr	r0, [pc, #32]	; (8003dc8 <MX_SPI1_Init+0x74>)
 8003da6:	f002 ffab 	bl	8006d00 <HAL_SPI_Init>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003db0:	f7ff ffca 	bl	8003d48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8003db4:	4b04      	ldr	r3, [pc, #16]	; (8003dc8 <MX_SPI1_Init+0x74>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	4b03      	ldr	r3, [pc, #12]	; (8003dc8 <MX_SPI1_Init+0x74>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dc2:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8003dc4:	bf00      	nop
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	20000390 	.word	0x20000390
 8003dcc:	40013000 	.word	0x40013000

08003dd0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b08a      	sub	sp, #40	; 0x28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dd8:	f107 0314 	add.w	r3, r7, #20
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	605a      	str	r2, [r3, #4]
 8003de2:	609a      	str	r2, [r3, #8]
 8003de4:	60da      	str	r2, [r3, #12]
 8003de6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a19      	ldr	r2, [pc, #100]	; (8003e54 <HAL_SPI_MspInit+0x84>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d12b      	bne.n	8003e4a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003df2:	2300      	movs	r3, #0
 8003df4:	613b      	str	r3, [r7, #16]
 8003df6:	4b18      	ldr	r3, [pc, #96]	; (8003e58 <HAL_SPI_MspInit+0x88>)
 8003df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfa:	4a17      	ldr	r2, [pc, #92]	; (8003e58 <HAL_SPI_MspInit+0x88>)
 8003dfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e00:	6453      	str	r3, [r2, #68]	; 0x44
 8003e02:	4b15      	ldr	r3, [pc, #84]	; (8003e58 <HAL_SPI_MspInit+0x88>)
 8003e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e0a:	613b      	str	r3, [r7, #16]
 8003e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	4b11      	ldr	r3, [pc, #68]	; (8003e58 <HAL_SPI_MspInit+0x88>)
 8003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e16:	4a10      	ldr	r2, [pc, #64]	; (8003e58 <HAL_SPI_MspInit+0x88>)
 8003e18:	f043 0302 	orr.w	r3, r3, #2
 8003e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e1e:	4b0e      	ldr	r3, [pc, #56]	; (8003e58 <HAL_SPI_MspInit+0x88>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003e2a:	2338      	movs	r3, #56	; 0x38
 8003e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e2e:	2302      	movs	r3, #2
 8003e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e32:	2300      	movs	r3, #0
 8003e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e36:	2303      	movs	r3, #3
 8003e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003e3a:	2305      	movs	r3, #5
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e3e:	f107 0314 	add.w	r3, r7, #20
 8003e42:	4619      	mov	r1, r3
 8003e44:	4805      	ldr	r0, [pc, #20]	; (8003e5c <HAL_SPI_MspInit+0x8c>)
 8003e46:	f001 f9ab 	bl	80051a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003e4a:	bf00      	nop
 8003e4c:	3728      	adds	r7, #40	; 0x28
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40013000 	.word	0x40013000
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	40020400 	.word	0x40020400

08003e60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e66:	2300      	movs	r3, #0
 8003e68:	607b      	str	r3, [r7, #4]
 8003e6a:	4b13      	ldr	r3, [pc, #76]	; (8003eb8 <HAL_MspInit+0x58>)
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6e:	4a12      	ldr	r2, [pc, #72]	; (8003eb8 <HAL_MspInit+0x58>)
 8003e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e74:	6453      	str	r3, [r2, #68]	; 0x44
 8003e76:	4b10      	ldr	r3, [pc, #64]	; (8003eb8 <HAL_MspInit+0x58>)
 8003e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e7e:	607b      	str	r3, [r7, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e82:	2300      	movs	r3, #0
 8003e84:	603b      	str	r3, [r7, #0]
 8003e86:	4b0c      	ldr	r3, [pc, #48]	; (8003eb8 <HAL_MspInit+0x58>)
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	4a0b      	ldr	r2, [pc, #44]	; (8003eb8 <HAL_MspInit+0x58>)
 8003e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e90:	6413      	str	r3, [r2, #64]	; 0x40
 8003e92:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <HAL_MspInit+0x58>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9a:	603b      	str	r3, [r7, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	2005      	movs	r0, #5
 8003ea4:	f001 f937 	bl	8005116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003ea8:	2005      	movs	r0, #5
 8003eaa:	f001 f950 	bl	800514e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003eae:	bf00      	nop
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40023800 	.word	0x40023800

08003ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ec0:	e7fe      	b.n	8003ec0 <NMI_Handler+0x4>

08003ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ec6:	e7fe      	b.n	8003ec6 <HardFault_Handler+0x4>

08003ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ecc:	e7fe      	b.n	8003ecc <MemManage_Handler+0x4>

08003ece <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ed2:	e7fe      	b.n	8003ed2 <BusFault_Handler+0x4>

08003ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ed8:	e7fe      	b.n	8003ed8 <UsageFault_Handler+0x4>

08003eda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003eda:	b480      	push	{r7}
 8003edc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ede:	bf00      	nop
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003eec:	bf00      	nop
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003efa:	bf00      	nop
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f08:	f000 ffc2 	bl	8004e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f0c:	bf00      	nop
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003f14:	bf00      	nop
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CTP_INT_PIN_Pin);
 8003f22:	2002      	movs	r0, #2
 8003f24:	f001 fada 	bl	80054dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003f28:	bf00      	nop
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f38:	2300      	movs	r3, #0
 8003f3a:	617b      	str	r3, [r7, #20]
 8003f3c:	e00a      	b.n	8003f54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003f3e:	f3af 8000 	nop.w
 8003f42:	4601      	mov	r1, r0
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	60ba      	str	r2, [r7, #8]
 8003f4a:	b2ca      	uxtb	r2, r1
 8003f4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	3301      	adds	r3, #1
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	dbf0      	blt.n	8003f3e <_read+0x12>
  }

  return len;
 8003f5c:	687b      	ldr	r3, [r7, #4]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b086      	sub	sp, #24
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	60f8      	str	r0, [r7, #12]
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f72:	2300      	movs	r3, #0
 8003f74:	617b      	str	r3, [r7, #20]
 8003f76:	e009      	b.n	8003f8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	1c5a      	adds	r2, r3, #1
 8003f7c:	60ba      	str	r2, [r7, #8]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	dbf1      	blt.n	8003f78 <_write+0x12>
  }
  return len;
 8003f94:	687b      	ldr	r3, [r7, #4]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <_close>:

int _close(int file)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003fa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
 8003fbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003fc6:	605a      	str	r2, [r3, #4]
  return 0;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <_isatty>:

int _isatty(int file)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003fde:	2301      	movs	r3, #1
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3714      	adds	r7, #20
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
	...

08004008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004010:	4a14      	ldr	r2, [pc, #80]	; (8004064 <_sbrk+0x5c>)
 8004012:	4b15      	ldr	r3, [pc, #84]	; (8004068 <_sbrk+0x60>)
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800401c:	4b13      	ldr	r3, [pc, #76]	; (800406c <_sbrk+0x64>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d102      	bne.n	800402a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004024:	4b11      	ldr	r3, [pc, #68]	; (800406c <_sbrk+0x64>)
 8004026:	4a12      	ldr	r2, [pc, #72]	; (8004070 <_sbrk+0x68>)
 8004028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800402a:	4b10      	ldr	r3, [pc, #64]	; (800406c <_sbrk+0x64>)
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4413      	add	r3, r2
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	429a      	cmp	r2, r3
 8004036:	d207      	bcs.n	8004048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004038:	f003 f9ac 	bl	8007394 <__errno>
 800403c:	4603      	mov	r3, r0
 800403e:	220c      	movs	r2, #12
 8004040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004042:	f04f 33ff 	mov.w	r3, #4294967295
 8004046:	e009      	b.n	800405c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004048:	4b08      	ldr	r3, [pc, #32]	; (800406c <_sbrk+0x64>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800404e:	4b07      	ldr	r3, [pc, #28]	; (800406c <_sbrk+0x64>)
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4413      	add	r3, r2
 8004056:	4a05      	ldr	r2, [pc, #20]	; (800406c <_sbrk+0x64>)
 8004058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800405a:	68fb      	ldr	r3, [r7, #12]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20040000 	.word	0x20040000
 8004068:	00000400 	.word	0x00000400
 800406c:	200003e8 	.word	0x200003e8
 8004070:	20000458 	.word	0x20000458

08004074 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004078:	4b06      	ldr	r3, [pc, #24]	; (8004094 <SystemInit+0x20>)
 800407a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407e:	4a05      	ldr	r2, [pc, #20]	; (8004094 <SystemInit+0x20>)
 8004080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004088:	bf00      	nop
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	e000ed00 	.word	0xe000ed00

08004098 <CTP_I2C_Read>:
  * @arg buf[0~1]: Read the start address of the data register
  * @arg buf[2~len-1]: store buffer buffer for reading out data
  * @arg len: CTP_ADDR_LENGTH + read bytes count (register address length + number of data bytes read)
  * @retval i2c_msgs the number of transport structures, 2 is successful, others are failed
  */
static int32_t CTP_I2C_Read(uint8_t *buf, int32_t len){
 8004098:	b580      	push	{r7, lr}
 800409a:	b088      	sub	sp, #32
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
    struct i2c_msg msgs[2];
    int32_t ret=-1;
 80040a2:	f04f 33ff 	mov.w	r3, #4294967295
 80040a6:	61fb      	str	r3, [r7, #28]
    int32_t retries = 0;
 80040a8:	2300      	movs	r3, #0
 80040aa:	61bb      	str	r3, [r7, #24]
    msgs[0].flags = !CTP_I2C_M_RD;					
 80040ac:	2300      	movs	r3, #0
 80040ae:	813b      	strh	r3, [r7, #8]
    msgs[0].len   = CTP_ADDR_LENGTH;
 80040b0:	2302      	movs	r3, #2
 80040b2:	817b      	strh	r3, [r7, #10]
    msgs[0].buf   = &buf[0];
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	60fb      	str	r3, [r7, #12]
    
    msgs[1].flags = CTP_I2C_M_RD;
 80040b8:	2301      	movs	r3, #1
 80040ba:	823b      	strh	r3, [r7, #16]
    msgs[1].len   = len - CTP_ADDR_LENGTH;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	b29b      	uxth	r3, r3
 80040c0:	3b02      	subs	r3, #2
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	827b      	strh	r3, [r7, #18]
    msgs[1].buf   = &buf[CTP_ADDR_LENGTH];
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	3302      	adds	r3, #2
 80040ca:	617b      	str	r3, [r7, #20]

    while(retries < 5){
 80040cc:	e00c      	b.n	80040e8 <CTP_I2C_Read+0x50>
        ret = I2C_Transfer( msgs, 2);					
 80040ce:	f107 0308 	add.w	r3, r7, #8
 80040d2:	2102      	movs	r1, #2
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 fd83 	bl	8004be0 <I2C_Transfer>
 80040da:	61f8      	str	r0, [r7, #28]
        if(ret == 2)break;
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d006      	beq.n	80040f0 <CTP_I2C_Read+0x58>
        retries++;
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	3301      	adds	r3, #1
 80040e6:	61bb      	str	r3, [r7, #24]
    while(retries < 5){
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	ddef      	ble.n	80040ce <CTP_I2C_Read+0x36>
 80040ee:	e000      	b.n	80040f2 <CTP_I2C_Read+0x5a>
        if(ret == 2)break;
 80040f0:	bf00      	nop
    }
    if((retries >= 5)){
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	dd10      	ble.n	800411a <CTP_I2C_Read+0x82>
        CTP_ERROR("I2C Read: 0x%04X, %d bytes failed, errcode: %d! Process reset.", (((uint16_t)(buf[0] << 8)) | buf[1]), len-2, ret);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	021b      	lsls	r3, r3, #8
 8004100:	b29b      	uxth	r3, r3
 8004102:	461a      	mov	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3301      	adds	r3, #1
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	ea42 0103 	orr.w	r1, r2, r3
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	1e9a      	subs	r2, r3, #2
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	4803      	ldr	r0, [pc, #12]	; (8004124 <CTP_I2C_Read+0x8c>)
 8004116:	f003 fa7d 	bl	8007614 <iprintf>
    }
    return ret;
 800411a:	69fb      	ldr	r3, [r7, #28]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3720      	adds	r7, #32
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	08008880 	.word	0x08008880

08004128 <CTP_I2C_Write>:
  * @arg buf[0~1]: start address of the data register to be written
  * @arg buf[2~len-1]: data to be written
  * @arg len: CTP_ADDR_LENGTH + write bytes count (register address length + number of data bytes written)
  * @retval i2c_msgs the number of transport structures, 1 is successful, others are failed
  */
static int32_t CTP_I2C_Write(uint8_t *buf,int32_t len){
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
    struct i2c_msg msg;
    int32_t ret = -1;
 8004132:	f04f 33ff 	mov.w	r3, #4294967295
 8004136:	617b      	str	r3, [r7, #20]
    int32_t retries = 0;
 8004138:	2300      	movs	r3, #0
 800413a:	613b      	str	r3, [r7, #16]
    msg.flags = !CTP_I2C_M_RD;					
 800413c:	2300      	movs	r3, #0
 800413e:	813b      	strh	r3, [r7, #8]
    msg.len   = len;					
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	b29b      	uxth	r3, r3
 8004144:	817b      	strh	r3, [r7, #10]
    msg.buf   = buf;					
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	60fb      	str	r3, [r7, #12]
    while(retries < 5){
 800414a:	e00c      	b.n	8004166 <CTP_I2C_Write+0x3e>
        ret = I2C_Transfer(&msg, 1);
 800414c:	f107 0308 	add.w	r3, r7, #8
 8004150:	2101      	movs	r1, #1
 8004152:	4618      	mov	r0, r3
 8004154:	f000 fd44 	bl	8004be0 <I2C_Transfer>
 8004158:	6178      	str	r0, [r7, #20]
        if (ret == 1)break;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d006      	beq.n	800416e <CTP_I2C_Write+0x46>
        retries++;
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	3301      	adds	r3, #1
 8004164:	613b      	str	r3, [r7, #16]
    while(retries < 5){
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	2b04      	cmp	r3, #4
 800416a:	ddef      	ble.n	800414c <CTP_I2C_Write+0x24>
 800416c:	e000      	b.n	8004170 <CTP_I2C_Write+0x48>
        if (ret == 1)break;
 800416e:	bf00      	nop
    }
    if((retries >= 5)){
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	2b04      	cmp	r3, #4
 8004174:	dd10      	ble.n	8004198 <CTP_I2C_Write+0x70>
      CTP_ERROR("I2C Write: 0x%04X, %d bytes failed, errcode: %d! Process reset.", (((uint16_t)(buf[0] << 8)) | buf[1]), len-2, ret);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	b29b      	uxth	r3, r3
 800417c:	021b      	lsls	r3, r3, #8
 800417e:	b29b      	uxth	r3, r3
 8004180:	461a      	mov	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3301      	adds	r3, #1
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	ea42 0103 	orr.w	r1, r2, r3
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	1e9a      	subs	r2, r3, #2
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	4804      	ldr	r0, [pc, #16]	; (80041a4 <CTP_I2C_Write+0x7c>)
 8004194:	f003 fa3e 	bl	8007614 <iprintf>
    }
    return ret;
 8004198:	697b      	ldr	r3, [r7, #20]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	080088c4 	.word	0x080088c4

080041a8 <CTP_I2C_Test>:
    }
    CTP_ERROR("send command fail!");
    return ret;
}

static int8_t CTP_I2C_Test( void){
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
    uint8_t test[3] = {CTP_REG_CONFIG_DATA >> 8, CTP_REG_CONFIG_DATA & 0xff};
 80041ae:	463b      	mov	r3, r7
 80041b0:	2100      	movs	r1, #0
 80041b2:	460a      	mov	r2, r1
 80041b4:	801a      	strh	r2, [r3, #0]
 80041b6:	460a      	mov	r2, r1
 80041b8:	709a      	strb	r2, [r3, #2]
 80041ba:	4b1f      	ldr	r3, [pc, #124]	; (8004238 <CTP_I2C_Test+0x90>)
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	4619      	mov	r1, r3
 80041c0:	4a1e      	ldr	r2, [pc, #120]	; (800423c <CTP_I2C_Test+0x94>)
 80041c2:	460b      	mov	r3, r1
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	440b      	add	r3, r1
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	4413      	add	r3, r2
 80041cc:	3304      	adds	r3, #4
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	0a1b      	lsrs	r3, r3, #8
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	703b      	strb	r3, [r7, #0]
 80041d8:	4b17      	ldr	r3, [pc, #92]	; (8004238 <CTP_I2C_Test+0x90>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	4619      	mov	r1, r3
 80041de:	4a17      	ldr	r2, [pc, #92]	; (800423c <CTP_I2C_Test+0x94>)
 80041e0:	460b      	mov	r3, r1
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	440b      	add	r3, r1
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	4413      	add	r3, r2
 80041ea:	3304      	adds	r3, #4
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	707b      	strb	r3, [r7, #1]
    uint8_t retry = 0;
 80041f2:	2300      	movs	r3, #0
 80041f4:	71fb      	strb	r3, [r7, #7]
    int8_t ret = -1;
 80041f6:	23ff      	movs	r3, #255	; 0xff
 80041f8:	71bb      	strb	r3, [r7, #6]
    while(retry++ < 5){
 80041fa:	e012      	b.n	8004222 <CTP_I2C_Test+0x7a>
        ret = CTP_I2C_Read(test, 3);
 80041fc:	463b      	mov	r3, r7
 80041fe:	2103      	movs	r1, #3
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff ff49 	bl	8004098 <CTP_I2C_Read>
 8004206:	4603      	mov	r3, r0
 8004208:	71bb      	strb	r3, [r7, #6]
        if (ret > 0){
 800420a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800420e:	2b00      	cmp	r3, #0
 8004210:	dd02      	ble.n	8004218 <CTP_I2C_Test+0x70>
            return ret;
 8004212:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004216:	e00b      	b.n	8004230 <CTP_I2C_Test+0x88>
        }
        CTP_ERROR("GTP i2c test failed time %d.",retry);
 8004218:	79fb      	ldrb	r3, [r7, #7]
 800421a:	4619      	mov	r1, r3
 800421c:	4808      	ldr	r0, [pc, #32]	; (8004240 <CTP_I2C_Test+0x98>)
 800421e:	f003 f9f9 	bl	8007614 <iprintf>
    while(retry++ < 5){
 8004222:	79fb      	ldrb	r3, [r7, #7]
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	71fa      	strb	r2, [r7, #7]
 8004228:	2b04      	cmp	r3, #4
 800422a:	d9e7      	bls.n	80041fc <CTP_I2C_Test+0x54>
    }
    return ret;
 800422c:	f997 3006 	ldrsb.w	r3, [r7, #6]
}
 8004230:	4618      	mov	r0, r3
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	20000014 	.word	0x20000014
 800423c:	08008bfc 	.word	0x08008bfc
 8004240:	08008944 	.word	0x08008944

08004244 <CTP_Touch_Up>:
/**
  * @brief process or report touch screen release
  * @param release point id number
  * @retval none
  */
static void CTP_Touch_Up(void){   // touch screen output without carton
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
    /* stylus release, reset pre xy to negative */
	static int bef_x = -1, bef_y = -1;
	if(pre_x == bef_x && pre_y == bef_y) return;
 8004248:	4b1a      	ldr	r3, [pc, #104]	; (80042b4 <CTP_Touch_Up+0x70>)
 800424a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800424e:	461a      	mov	r2, r3
 8004250:	4b19      	ldr	r3, [pc, #100]	; (80042b8 <CTP_Touch_Up+0x74>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	429a      	cmp	r2, r3
 8004256:	d107      	bne.n	8004268 <CTP_Touch_Up+0x24>
 8004258:	4b18      	ldr	r3, [pc, #96]	; (80042bc <CTP_Touch_Up+0x78>)
 800425a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800425e:	461a      	mov	r2, r3
 8004260:	4b17      	ldr	r3, [pc, #92]	; (80042c0 <CTP_Touch_Up+0x7c>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	429a      	cmp	r2, r3
 8004266:	d023      	beq.n	80042b0 <CTP_Touch_Up+0x6c>
    ctMessagePut(pre_x,pre_y,0);
 8004268:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <CTP_Touch_Up+0x70>)
 800426a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800426e:	b29b      	uxth	r3, r3
 8004270:	4a12      	ldr	r2, [pc, #72]	; (80042bc <CTP_Touch_Up+0x78>)
 8004272:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004276:	b291      	uxth	r1, r2
 8004278:	2200      	movs	r2, #0
 800427a:	4618      	mov	r0, r3
 800427c:	f000 fbf0 	bl	8004a60 <ctMessagePut>
	bef_x = pre_x;
 8004280:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <CTP_Touch_Up+0x70>)
 8004282:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004286:	461a      	mov	r2, r3
 8004288:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <CTP_Touch_Up+0x74>)
 800428a:	601a      	str	r2, [r3, #0]
	bef_y = pre_y;
 800428c:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <CTP_Touch_Up+0x78>)
 800428e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004292:	461a      	mov	r2, r3
 8004294:	4b0a      	ldr	r3, [pc, #40]	; (80042c0 <CTP_Touch_Up+0x7c>)
 8004296:	601a      	str	r2, [r3, #0]
	pre_x = -1;
 8004298:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <CTP_Touch_Up+0x70>)
 800429a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800429e:	801a      	strh	r2, [r3, #0]
	pre_y = -1;  
 80042a0:	4b06      	ldr	r3, [pc, #24]	; (80042bc <CTP_Touch_Up+0x78>)
 80042a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042a6:	801a      	strh	r2, [r3, #0]
    CTP_INFO("Touch release!");
 80042a8:	4806      	ldr	r0, [pc, #24]	; (80042c4 <CTP_Touch_Up+0x80>)
 80042aa:	f003 fa39 	bl	8007720 <puts>
 80042ae:	e000      	b.n	80042b2 <CTP_Touch_Up+0x6e>
	if(pre_x == bef_x && pre_y == bef_y) return;
 80042b0:	bf00      	nop
}
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20000280 	.word	0x20000280
 80042b8:	20000284 	.word	0x20000284
 80042bc:	20000282 	.word	0x20000282
 80042c0:	20000288 	.word	0x20000288
 80042c4:	0800898c 	.word	0x0800898c

080042c8 <CTP_TS_Work_Func>:
/**
  * @brief touch screen processing function, polling or calling in touch interrupt
  * @param none
  * @retval none
  */
void CTP_TS_Work_Func(void){
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08c      	sub	sp, #48	; 0x30
 80042cc:	af00      	add	r7, sp, #0
	static uint8_t IsTouch=0;
	uint8_t  end_cmd[3] = {CTP_READ_COOR_ADDR >> 8, CTP_READ_COOR_ADDR & 0xFF, 0};
 80042ce:	4a42      	ldr	r2, [pc, #264]	; (80043d8 <CTP_TS_Work_Func+0x110>)
 80042d0:	f107 030c 	add.w	r3, r7, #12
 80042d4:	6812      	ldr	r2, [r2, #0]
 80042d6:	4611      	mov	r1, r2
 80042d8:	8019      	strh	r1, [r3, #0]
 80042da:	3302      	adds	r3, #2
 80042dc:	0c12      	lsrs	r2, r2, #16
 80042de:	701a      	strb	r2, [r3, #0]
	uint8_t  point_data[2 + 1 + 8 * CTP_MAX_TOUCH + 1]={CTP_READ_COOR_ADDR >> 8, CTP_READ_COOR_ADDR & 0xFF};
 80042e0:	f644 6381 	movw	r3, #20097	; 0x4e81
 80042e4:	603b      	str	r3, [r7, #0]
 80042e6:	1d3b      	adds	r3, r7, #4
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	605a      	str	r2, [r3, #4]
	uint8_t  finger = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	int32_t x1 = 0;
 80042f4:	2300      	movs	r3, #0
 80042f6:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t y1 = 0;
 80042f8:	2300      	movs	r3, #0
 80042fa:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t w1 = 0;
 80042fc:	2300      	movs	r3, #0
 80042fe:	623b      	str	r3, [r7, #32]
	int32_t x2 = 0;
 8004300:	2300      	movs	r3, #0
 8004302:	61fb      	str	r3, [r7, #28]
	int32_t y2 = 0;
 8004304:	2300      	movs	r3, #0
 8004306:	61bb      	str	r3, [r7, #24]
	int32_t w2 = 0;
 8004308:	2300      	movs	r3, #0
 800430a:	617b      	str	r3, [r7, #20]


	int32_t ret = -1;
 800430c:	f04f 33ff 	mov.w	r3, #4294967295
 8004310:	613b      	str	r3, [r7, #16]
	ret = CTP_I2C_Read(point_data, 12);//10 byte register plus 2 byte address
 8004312:	463b      	mov	r3, r7
 8004314:	210c      	movs	r1, #12
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff febe 	bl	8004098 <CTP_I2C_Read>
 800431c:	6138      	str	r0, [r7, #16]
	if (ret < 0){
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	2b00      	cmp	r3, #0
 8004322:	da04      	bge.n	800432e <CTP_TS_Work_Func+0x66>
        CTP_ERROR("I2C transfer error. errno:%d\n ", ret);
 8004324:	6939      	ldr	r1, [r7, #16]
 8004326:	482d      	ldr	r0, [pc, #180]	; (80043dc <CTP_TS_Work_Func+0x114>)
 8004328:	f003 f974 	bl	8007614 <iprintf>
        return;
 800432c:	e051      	b.n	80043d2 <CTP_TS_Work_Func+0x10a>
	}
    
    finger = point_data[CTP_ADDR_LENGTH]; // Status register data
 800432e:	78bb      	ldrb	r3, [r7, #2]
 8004330:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   // CTP_DEBUG("I2C finger:%X",finger);
    
    //Stop read this touch
    ret = CTP_I2C_Write(end_cmd, 3);
 8004334:	f107 030c 	add.w	r3, r7, #12
 8004338:	2103      	movs	r1, #3
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff fef4 	bl	8004128 <CTP_I2C_Write>
 8004340:	6138      	str	r0, [r7, #16]
    if (ret < 0){
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	2b00      	cmp	r3, #0
 8004346:	da02      	bge.n	800434e <CTP_TS_Work_Func+0x86>
        CTP_INFO("I2C write end_cmd error!");
 8004348:	4825      	ldr	r0, [pc, #148]	; (80043e0 <CTP_TS_Work_Func+0x118>)
 800434a:	f003 f9e9 	bl	8007720 <puts>
    }
    


    if((finger&0x8F) == 0x80){		// No data, exit
 800434e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004352:	f003 038f 	and.w	r3, r3, #143	; 0x8f
 8004356:	2b80      	cmp	r3, #128	; 0x80
 8004358:	d109      	bne.n	800436e <CTP_TS_Work_Func+0xa6>
		if(IsTouch){
 800435a:	4b22      	ldr	r3, [pc, #136]	; (80043e4 <CTP_TS_Work_Func+0x11c>)
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d036      	beq.n	80043d0 <CTP_TS_Work_Func+0x108>
			CTP_Touch_Up();
 8004362:	f7ff ff6f 	bl	8004244 <CTP_Touch_Up>
			IsTouch=0;
 8004366:	4b1f      	ldr	r3, [pc, #124]	; (80043e4 <CTP_TS_Work_Func+0x11c>)
 8004368:	2200      	movs	r2, #0
 800436a:	701a      	strb	r2, [r3, #0]
		}
        return;
 800436c:	e030      	b.n	80043d0 <CTP_TS_Work_Func+0x108>
	}


    if((finger & 0x0F) && ((finger & 0x0F)<=CTP_MAX_TOUCH)){ //Bit7==1 - coordinate (or key) is ready for host to read
 800436e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	2b00      	cmp	r3, #0
 8004378:	d02b      	beq.n	80043d2 <CTP_TS_Work_Func+0x10a>
 800437a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800437e:	f003 030e 	and.w	r3, r3, #14
 8004382:	2b00      	cmp	r3, #0
 8004384:	d125      	bne.n	80043d2 <CTP_TS_Work_Func+0x10a>
        IsTouch=1;
 8004386:	4b17      	ldr	r3, [pc, #92]	; (80043e4 <CTP_TS_Work_Func+0x11c>)
 8004388:	2201      	movs	r2, #1
 800438a:	701a      	strb	r2, [r3, #0]
        x1  = point_data[4] | (point_data[5] << 8);	//x coordinates
 800438c:	793b      	ldrb	r3, [r7, #4]
 800438e:	461a      	mov	r2, r3
 8004390:	797b      	ldrb	r3, [r7, #5]
 8004392:	021b      	lsls	r3, r3, #8
 8004394:	4313      	orrs	r3, r2
 8004396:	62bb      	str	r3, [r7, #40]	; 0x28
        y1  = point_data[6] | (point_data[7] << 8);	//y coordinates
 8004398:	79bb      	ldrb	r3, [r7, #6]
 800439a:	461a      	mov	r2, r3
 800439c:	79fb      	ldrb	r3, [r7, #7]
 800439e:	021b      	lsls	r3, r3, #8
 80043a0:	4313      	orrs	r3, r2
 80043a2:	627b      	str	r3, [r7, #36]	; 0x24
        w1  = point_data[8] | (point_data[9] << 8);	//size
 80043a4:	7a3b      	ldrb	r3, [r7, #8]
 80043a6:	461a      	mov	r2, r3
 80043a8:	7a7b      	ldrb	r3, [r7, #9]
 80043aa:	021b      	lsls	r3, r3, #8
 80043ac:	4313      	orrs	r3, r2
 80043ae:	623b      	str	r3, [r7, #32]

        CTP_INFO("Touch down ! X1:%d, Y1:%d, W1:%d",  x1, y1, w1);
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043b6:	480c      	ldr	r0, [pc, #48]	; (80043e8 <CTP_TS_Work_Func+0x120>)
 80043b8:	f003 f92c 	bl	8007614 <iprintf>


*/


        point.input_x = x1;
 80043bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043be:	4a0b      	ldr	r2, [pc, #44]	; (80043ec <CTP_TS_Work_Func+0x124>)
 80043c0:	6013      	str	r3, [r2, #0]
		point.input_y = y1;
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	4a09      	ldr	r2, [pc, #36]	; (80043ec <CTP_TS_Work_Func+0x124>)
 80043c6:	6053      	str	r3, [r2, #4]
		point.input_w = w1;
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	4a08      	ldr	r2, [pc, #32]	; (80043ec <CTP_TS_Work_Func+0x124>)
 80043cc:	6093      	str	r3, [r2, #8]
 80043ce:	e000      	b.n	80043d2 <CTP_TS_Work_Func+0x10a>
        return;
 80043d0:	bf00      	nop
	}




}
 80043d2:	3730      	adds	r7, #48	; 0x30
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	08008a0c 	.word	0x08008a0c
 80043dc:	080089a0 	.word	0x080089a0
 80043e0:	080089c4 	.word	0x080089c4
 80043e4:	200003f8 	.word	0x200003f8
 80043e8:	080089e4 	.word	0x080089e4
 80043ec:	200003ec 	.word	0x200003ec

080043f0 <CTP_Get_Info>:

    CTP_ERROR("GTP wakeup sleep failed.");
    return ret;
}

static int32_t CTP_Get_Info(void){
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
  #if CTP_DEBUG_ON>0
    uint8_t opr_buf[10] = {0};
 80043f6:	2300      	movs	r3, #0
 80043f8:	607b      	str	r3, [r7, #4]
 80043fa:	f107 0308 	add.w	r3, r7, #8
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	809a      	strh	r2, [r3, #4]
    int32_t ret = 0;
 8004404:	2300      	movs	r3, #0
 8004406:	617b      	str	r3, [r7, #20]
        
    opr_buf[0] = (uint8_t)((CTP_REG_CONFIG_DATA+1) >> 8);
 8004408:	4b38      	ldr	r3, [pc, #224]	; (80044ec <CTP_Get_Info+0xfc>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	4619      	mov	r1, r3
 800440e:	4a38      	ldr	r2, [pc, #224]	; (80044f0 <CTP_Get_Info+0x100>)
 8004410:	460b      	mov	r3, r1
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	440b      	add	r3, r1
 8004416:	005b      	lsls	r3, r3, #1
 8004418:	4413      	add	r3, r2
 800441a:	3304      	adds	r3, #4
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	3301      	adds	r3, #1
 8004420:	121b      	asrs	r3, r3, #8
 8004422:	b2db      	uxtb	r3, r3
 8004424:	713b      	strb	r3, [r7, #4]
    opr_buf[1] = (uint8_t)((CTP_REG_CONFIG_DATA+1) & 0xFF);
 8004426:	4b31      	ldr	r3, [pc, #196]	; (80044ec <CTP_Get_Info+0xfc>)
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	4619      	mov	r1, r3
 800442c:	4a30      	ldr	r2, [pc, #192]	; (80044f0 <CTP_Get_Info+0x100>)
 800442e:	460b      	mov	r3, r1
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	440b      	add	r3, r1
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	4413      	add	r3, r2
 8004438:	3304      	adds	r3, #4
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	3301      	adds	r3, #1
 8004440:	b2db      	uxtb	r3, r3
 8004442:	717b      	strb	r3, [r7, #5]
    
    ret = CTP_I2C_Read(opr_buf, 10);
 8004444:	1d3b      	adds	r3, r7, #4
 8004446:	210a      	movs	r1, #10
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff fe25 	bl	8004098 <CTP_I2C_Read>
 800444e:	6178      	str	r0, [r7, #20]
    if (ret < 0){
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	2b00      	cmp	r3, #0
 8004454:	da01      	bge.n	800445a <CTP_Get_Info+0x6a>
        return FAIL;
 8004456:	2300      	movs	r3, #0
 8004458:	e043      	b.n	80044e2 <CTP_Get_Info+0xf2>
    }
    
    uint16_t abs_x_max = (opr_buf[3] << 8) + opr_buf[2];
 800445a:	79fb      	ldrb	r3, [r7, #7]
 800445c:	b29b      	uxth	r3, r3
 800445e:	021b      	lsls	r3, r3, #8
 8004460:	b29a      	uxth	r2, r3
 8004462:	79bb      	ldrb	r3, [r7, #6]
 8004464:	b29b      	uxth	r3, r3
 8004466:	4413      	add	r3, r2
 8004468:	827b      	strh	r3, [r7, #18]
    uint16_t abs_y_max = (opr_buf[5] << 8) + opr_buf[4];
 800446a:	7a7b      	ldrb	r3, [r7, #9]
 800446c:	b29b      	uxth	r3, r3
 800446e:	021b      	lsls	r3, r3, #8
 8004470:	b29a      	uxth	r2, r3
 8004472:	7a3b      	ldrb	r3, [r7, #8]
 8004474:	b29b      	uxth	r3, r3
 8004476:	4413      	add	r3, r2
 8004478:	823b      	strh	r3, [r7, #16]
    
    opr_buf[0] = (uint8_t)((CTP_REG_CONFIG_DATA+6) >> 8);
 800447a:	4b1c      	ldr	r3, [pc, #112]	; (80044ec <CTP_Get_Info+0xfc>)
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	4619      	mov	r1, r3
 8004480:	4a1b      	ldr	r2, [pc, #108]	; (80044f0 <CTP_Get_Info+0x100>)
 8004482:	460b      	mov	r3, r1
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	440b      	add	r3, r1
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	4413      	add	r3, r2
 800448c:	3304      	adds	r3, #4
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	3306      	adds	r3, #6
 8004492:	121b      	asrs	r3, r3, #8
 8004494:	b2db      	uxtb	r3, r3
 8004496:	713b      	strb	r3, [r7, #4]
    opr_buf[1] = (uint8_t)((CTP_REG_CONFIG_DATA+6) & 0xFF);
 8004498:	4b14      	ldr	r3, [pc, #80]	; (80044ec <CTP_Get_Info+0xfc>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	4619      	mov	r1, r3
 800449e:	4a14      	ldr	r2, [pc, #80]	; (80044f0 <CTP_Get_Info+0x100>)
 80044a0:	460b      	mov	r3, r1
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	440b      	add	r3, r1
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	4413      	add	r3, r2
 80044aa:	3304      	adds	r3, #4
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	3306      	adds	r3, #6
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	717b      	strb	r3, [r7, #5]
    
    ret = CTP_I2C_Read(opr_buf, 3);
 80044b6:	1d3b      	adds	r3, r7, #4
 80044b8:	2103      	movs	r1, #3
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff fdec 	bl	8004098 <CTP_I2C_Read>
 80044c0:	6178      	str	r0, [r7, #20]
    if (ret < 0){
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	da01      	bge.n	80044cc <CTP_Get_Info+0xdc>
        return FAIL;
 80044c8:	2300      	movs	r3, #0
 80044ca:	e00a      	b.n	80044e2 <CTP_Get_Info+0xf2>
    }
    
    uint8_t int_trigger_type = opr_buf[2] & 0x03;
 80044cc:	79bb      	ldrb	r3, [r7, #6]
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	73fb      	strb	r3, [r7, #15]
    
    CTP_INFO("X_MAX = %d, Y_MAX = %d, TRIGGER = 0x%02x",
 80044d4:	8a79      	ldrh	r1, [r7, #18]
 80044d6:	8a3a      	ldrh	r2, [r7, #16]
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	4806      	ldr	r0, [pc, #24]	; (80044f4 <CTP_Get_Info+0x104>)
 80044dc:	f003 f89a 	bl	8007614 <iprintf>
            abs_x_max,abs_y_max,int_trigger_type);
#endif
    return SUCCESS;    
 80044e0:	2301      	movs	r3, #1
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3718      	adds	r7, #24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	20000014 	.word	0x20000014
 80044f0:	08008bfc 	.word	0x08008bfc
 80044f4:	08008a48 	.word	0x08008a48

080044f8 <CTP_Init_Panel>:


int32_t CTP_Init_Panel(void){
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b0d4      	sub	sp, #336	; 0x150
 80044fc:	af00      	add	r7, sp, #0

    int32_t ret = -1;
 80044fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004502:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

    int32_t i = 0;
 8004506:	2300      	movs	r3, #0
 8004508:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    uint16_t check_sum = 0;
 800450c:	2300      	movs	r3, #0
 800450e:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a
    int32_t retry = 0;
 8004512:	2300      	movs	r3, #0
 8004514:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

    const uint8_t* cfg_info;
    uint8_t cfg_info_len  ;
		uint8_t* config;

    uint8_t cfg_num =0 ;// The number of registers that need to be configured
 8004518:	2300      	movs	r3, #0
 800451a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    I2C_Touch_Init();
 800451e:	f000 fb23 	bl	8004b68 <I2C_Touch_Init>

    ret = CTP_I2C_Test();
 8004522:	f7ff fe41 	bl	80041a8 <CTP_I2C_Test>
 8004526:	4603      	mov	r3, r0
 8004528:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    if (ret < 0){
 800452c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004530:	2b00      	cmp	r3, #0
 8004532:	da05      	bge.n	8004540 <CTP_Init_Panel+0x48>
        CTP_ERROR("I2C communication ERROR!");
 8004534:	48d2      	ldr	r0, [pc, #840]	; (8004880 <CTP_Init_Panel+0x388>)
 8004536:	f003 f8f3 	bl	8007720 <puts>
		return ret;
 800453a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800453e:	e1d6      	b.n	80048ee <CTP_Init_Panel+0x3f6>
    } 
    ctDelay(1000);
 8004540:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004544:	f000 fa80 	bl	8004a48 <ctDelay>
    CTP_Read_Version(); // Get the model of the touch IC
 8004548:	f000 f9d8 	bl	80048fc <CTP_Read_Version>

    config = (uint8_t *)malloc (CTP_CONFIG_MAX_LENGTH + CTP_ADDR_LENGTH);
 800454c:	f44f 7081 	mov.w	r0, #258	; 0x102
 8004550:	f002 ff4a 	bl	80073e8 <malloc>
 8004554:	4603      	mov	r3, r0
 8004556:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

    config[0] = CTP_REG_CONFIG_DATA >> 8;
 800455a:	4bca      	ldr	r3, [pc, #808]	; (8004884 <CTP_Init_Panel+0x38c>)
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	4619      	mov	r1, r3
 8004560:	4ac9      	ldr	r2, [pc, #804]	; (8004888 <CTP_Init_Panel+0x390>)
 8004562:	460b      	mov	r3, r1
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	440b      	add	r3, r1
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	4413      	add	r3, r2
 800456c:	3304      	adds	r3, #4
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	0a1b      	lsrs	r3, r3, #8
 8004572:	b29b      	uxth	r3, r3
 8004574:	b2da      	uxtb	r2, r3
 8004576:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800457a:	701a      	strb	r2, [r3, #0]
    config[1] =  CTP_REG_CONFIG_DATA & 0xff;
 800457c:	4bc1      	ldr	r3, [pc, #772]	; (8004884 <CTP_Init_Panel+0x38c>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	4619      	mov	r1, r3
 8004582:	4ac1      	ldr	r2, [pc, #772]	; (8004888 <CTP_Init_Panel+0x390>)
 8004584:	460b      	mov	r3, r1
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	440b      	add	r3, r1
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	4413      	add	r3, r2
 800458e:	3304      	adds	r3, #4
 8004590:	881a      	ldrh	r2, [r3, #0]
 8004592:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004596:	3301      	adds	r3, #1
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	701a      	strb	r2, [r3, #0]
    
    // According to the model of the IC points to a different configuration
    switch(touchIC){
 800459c:	4bb9      	ldr	r3, [pc, #740]	; (8004884 <CTP_Init_Panel+0x38c>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d014      	beq.n	80045ce <CTP_Init_Panel+0xd6>
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	dc19      	bgt.n	80045dc <CTP_Init_Panel+0xe4>
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d002      	beq.n	80045b2 <CTP_Init_Panel+0xba>
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d007      	beq.n	80045c0 <CTP_Init_Panel+0xc8>
 80045b0:	e014      	b.n	80045dc <CTP_Init_Panel+0xe4>
    case GT9157:
        cfg_info =  CTP_CFG_GT9157; // Point to register configuration
 80045b2:	4bb6      	ldr	r3, [pc, #728]	; (800488c <CTP_Init_Panel+0x394>)
 80045b4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
        cfg_info_len = CFG_GROUP_LEN(CTP_CFG_GT9157);// Calculate the size of the configuration table
 80045b8:	23ba      	movs	r3, #186	; 0xba
 80045ba:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
        break;
 80045be:	e00d      	b.n	80045dc <CTP_Init_Panel+0xe4>
    case GT911:
        cfg_info =  CTP_CFG_GT911;
 80045c0:	4bb3      	ldr	r3, [pc, #716]	; (8004890 <CTP_Init_Panel+0x398>)
 80045c2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
        cfg_info_len = CFG_GROUP_LEN(CTP_CFG_GT911) ;
 80045c6:	23ba      	movs	r3, #186	; 0xba
 80045c8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
        break;
 80045cc:	e006      	b.n	80045dc <CTP_Init_Panel+0xe4>
    case GT5688:			
        cfg_info =  CTP_CFG_GT5688; 
 80045ce:	4bb1      	ldr	r3, [pc, #708]	; (8004894 <CTP_Init_Panel+0x39c>)
 80045d0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
        cfg_info_len = CFG_GROUP_LEN(CTP_CFG_GT5688);
 80045d4:	23ef      	movs	r3, #239	; 0xef
 80045d6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
        break;
 80045da:	bf00      	nop
    }
	
    memset(&config[CTP_ADDR_LENGTH], 0, CTP_CONFIG_MAX_LENGTH);
 80045dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80045e0:	3302      	adds	r3, #2
 80045e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045e6:	2100      	movs	r1, #0
 80045e8:	4618      	mov	r0, r3
 80045ea:	f002 ff2b 	bl	8007444 <memset>
    memcpy(&config[CTP_ADDR_LENGTH], cfg_info, cfg_info_len);
 80045ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80045f2:	3302      	adds	r3, #2
 80045f4:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80045f8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80045fc:	4618      	mov	r0, r3
 80045fe:	f002 ff13 	bl	8007428 <memcpy>
		
    cfg_num = cfg_info_len;
 8004602:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8004606:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    
    CTP_DEBUG("cfg_info_len = %d ",cfg_info_len);
 800460a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800460e:	461a      	mov	r2, r3
 8004610:	f240 11bf 	movw	r1, #447	; 0x1bf
 8004614:	48a0      	ldr	r0, [pc, #640]	; (8004898 <CTP_Init_Panel+0x3a0>)
 8004616:	f002 fffd 	bl	8007614 <iprintf>
    CTP_DEBUG("cfg_num = %d ",cfg_num);
 800461a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800461e:	461a      	mov	r2, r3
 8004620:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8004624:	489d      	ldr	r0, [pc, #628]	; (800489c <CTP_Init_Panel+0x3a4>)
 8004626:	f002 fff5 	bl	8007614 <iprintf>
    /*Set the resolution according to the scanning direction of the LCD*/
    config[CTP_ADDR_LENGTH+1] = LCD_PIXEL_WIDTH & 0xFF;
 800462a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800462e:	3303      	adds	r3, #3
 8004630:	2220      	movs	r2, #32
 8004632:	701a      	strb	r2, [r3, #0]
    config[CTP_ADDR_LENGTH+2] = LCD_PIXEL_WIDTH >> 8;
 8004634:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004638:	3304      	adds	r3, #4
 800463a:	2203      	movs	r2, #3
 800463c:	701a      	strb	r2, [r3, #0]
    config[CTP_ADDR_LENGTH+3] = LCD_PIXEL_HEIGHT & 0xFF;
 800463e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004642:	3305      	adds	r3, #5
 8004644:	22e0      	movs	r2, #224	; 0xe0
 8004646:	701a      	strb	r2, [r3, #0]
    config[CTP_ADDR_LENGTH+4] = LCD_PIXEL_HEIGHT >> 8;
 8004648:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800464c:	3306      	adds	r3, #6
 800464e:	2201      	movs	r2, #1
 8004650:	701a      	strb	r2, [r3, #0]
  
    config[CTP_ADDR_LENGTH+(0x8055-0x8050)-1]=CTP_MAX_TOUCH; //Fingers supported: 1 to 10
 8004652:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004656:	3306      	adds	r3, #6
 8004658:	2201      	movs	r2, #1
 800465a:	701a      	strb	r2, [r3, #0]
    
    /*Set X2Y exchange according to mode*/  
    config[CTP_ADDR_LENGTH+(0x8056-0x8050)-1] |= (X2Y_LOC);
 800465c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004660:	3307      	adds	r3, #7
 8004662:	781a      	ldrb	r2, [r3, #0]
 8004664:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004668:	3307      	adds	r3, #7
 800466a:	f042 0208 	orr.w	r2, r2, #8
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	701a      	strb	r2, [r3, #0]
    
    //Bit7-4: Refresh_Rate: Report rate (period: 5+N ms)
    //Bit3-0: Low_Power_Control: no-touch duration for entering low power mode (0s to 15s)
    config[CTP_ADDR_LENGTH+(0x805E - 0x8050)-1] =0xAA; //15ms / 10s
 8004672:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004676:	330f      	adds	r3, #15
 8004678:	22aa      	movs	r2, #170	; 0xaa
 800467a:	701a      	strb	r2, [r3, #0]
    
    /*X-position delta threshold for coordinate to be reported: 0-255 (coefficient is 1, based on the
      reported resolution. If this field is set to 0, GT5688 will keep reporting coordinates continuously
      when touch is present)*/
    config[CTP_ADDR_LENGTH+(0x8060-0x8050)-1] |= LCD_PIXEL_WIDTH/10; 
 800467c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004680:	3311      	adds	r3, #17
 8004682:	781a      	ldrb	r2, [r3, #0]
 8004684:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004688:	3311      	adds	r3, #17
 800468a:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800468e:	b2d2      	uxtb	r2, r2
 8004690:	701a      	strb	r2, [r3, #0]
    /*Y-position delta threshold*/
    config[CTP_ADDR_LENGTH+(0x8061-0x8050)-1] |= LCD_PIXEL_HEIGHT/10; 
 8004692:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004696:	3312      	adds	r3, #18
 8004698:	781a      	ldrb	r2, [r3, #0]
 800469a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800469e:	3312      	adds	r3, #18
 80046a0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80046a4:	b2d2      	uxtb	r2, r2
 80046a6:	701a      	strb	r2, [r3, #0]
    


    // Calculate the value to be written to the checksum register
    check_sum = 0;
 80046a8:	2300      	movs	r3, #0
 80046aa:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a
    if(touchIC == GT911 || touchIC == GT9157){
 80046ae:	4b75      	ldr	r3, [pc, #468]	; (8004884 <CTP_Init_Panel+0x38c>)
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d003      	beq.n	80046be <CTP_Init_Panel+0x1c6>
 80046b6:	4b73      	ldr	r3, [pc, #460]	; (8004884 <CTP_Init_Panel+0x38c>)
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d131      	bne.n	8004722 <CTP_Init_Panel+0x22a>
        for (i = CTP_ADDR_LENGTH; i < cfg_num+CTP_ADDR_LENGTH; i++){
 80046be:	2302      	movs	r3, #2
 80046c0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80046c4:	e010      	b.n	80046e8 <CTP_Init_Panel+0x1f0>
            check_sum += (config[i] & 0xFF);
 80046c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046ca:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80046ce:	4413      	add	r3, r2
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	f8b7 314a 	ldrh.w	r3, [r7, #330]	; 0x14a
 80046d8:	4413      	add	r3, r2
 80046da:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a
        for (i = CTP_ADDR_LENGTH; i < cfg_num+CTP_ADDR_LENGTH; i++){
 80046de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046e2:	3301      	adds	r3, #1
 80046e4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80046e8:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80046ec:	3301      	adds	r3, #1
 80046ee:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80046f2:	429a      	cmp	r2, r3
 80046f4:	dde7      	ble.n	80046c6 <CTP_Init_Panel+0x1ce>
        }
        config[ cfg_num+CTP_ADDR_LENGTH] = (~(check_sum & 0xFF)) + 1; 	//checksum
 80046f6:	f8b7 314a 	ldrh.w	r3, [r7, #330]	; 0x14a
 80046fa:	b2d9      	uxtb	r1, r3
 80046fc:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8004700:	3302      	adds	r3, #2
 8004702:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004706:	4413      	add	r3, r2
 8004708:	460a      	mov	r2, r1
 800470a:	4252      	negs	r2, r2
 800470c:	b2d2      	uxtb	r2, r2
 800470e:	701a      	strb	r2, [r3, #0]
        config[ cfg_num+CTP_ADDR_LENGTH+1] =  1; 						//refresh Configuration update flag
 8004710:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8004714:	3303      	adds	r3, #3
 8004716:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800471a:	4413      	add	r3, r2
 800471c:	2201      	movs	r2, #1
 800471e:	701a      	strb	r2, [r3, #0]
 8004720:	e055      	b.n	80047ce <CTP_Init_Panel+0x2d6>
    }
    else if(touchIC == GT5688) {
 8004722:	4b58      	ldr	r3, [pc, #352]	; (8004884 <CTP_Init_Panel+0x38c>)
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d151      	bne.n	80047ce <CTP_Init_Panel+0x2d6>
      for (i = CTP_ADDR_LENGTH; i < (cfg_num+CTP_ADDR_LENGTH -3); i += 2){
 800472a:	2302      	movs	r3, #2
 800472c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004730:	e01c      	b.n	800476c <CTP_Init_Panel+0x274>
        check_sum += (config[i] << 8) + config[i + 1];
 8004732:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004736:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800473a:	4413      	add	r3, r2
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	b29b      	uxth	r3, r3
 8004740:	021b      	lsls	r3, r3, #8
 8004742:	b29a      	uxth	r2, r3
 8004744:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004748:	3301      	adds	r3, #1
 800474a:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800474e:	440b      	add	r3, r1
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	b29b      	uxth	r3, r3
 8004754:	4413      	add	r3, r2
 8004756:	b29a      	uxth	r2, r3
 8004758:	f8b7 314a 	ldrh.w	r3, [r7, #330]	; 0x14a
 800475c:	4413      	add	r3, r2
 800475e:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a
      for (i = CTP_ADDR_LENGTH; i < (cfg_num+CTP_ADDR_LENGTH -3); i += 2){
 8004762:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004766:	3302      	adds	r3, #2
 8004768:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800476c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8004770:	3b01      	subs	r3, #1
 8004772:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004776:	429a      	cmp	r2, r3
 8004778:	dbdb      	blt.n	8004732 <CTP_Init_Panel+0x23a>
      }
      check_sum = 0 - check_sum;
 800477a:	f8b7 314a 	ldrh.w	r3, [r7, #330]	; 0x14a
 800477e:	425b      	negs	r3, r3
 8004780:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a
      CTP_DEBUG("Config checksum: 0x%04X", check_sum);
 8004784:	f8b7 314a 	ldrh.w	r3, [r7, #330]	; 0x14a
 8004788:	461a      	mov	r2, r3
 800478a:	f240 11e7 	movw	r1, #487	; 0x1e7
 800478e:	4844      	ldr	r0, [pc, #272]	; (80048a0 <CTP_Init_Panel+0x3a8>)
 8004790:	f002 ff40 	bl	8007614 <iprintf>
      config[(cfg_num+CTP_ADDR_LENGTH -3)] = (check_sum >> 8) & 0xFF;
 8004794:	f8b7 314a 	ldrh.w	r3, [r7, #330]	; 0x14a
 8004798:	0a1b      	lsrs	r3, r3, #8
 800479a:	b299      	uxth	r1, r3
 800479c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80047a0:	3b01      	subs	r3, #1
 80047a2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80047a6:	4413      	add	r3, r2
 80047a8:	b2ca      	uxtb	r2, r1
 80047aa:	701a      	strb	r2, [r3, #0]
      config[(cfg_num+CTP_ADDR_LENGTH -2)] = check_sum & 0xFF;
 80047ac:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80047b0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80047b4:	4413      	add	r3, r2
 80047b6:	f8b7 214a 	ldrh.w	r2, [r7, #330]	; 0x14a
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	701a      	strb	r2, [r3, #0]
      config[(cfg_num+CTP_ADDR_LENGTH -1)] = 0x01;
 80047be:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80047c2:	3301      	adds	r3, #1
 80047c4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80047c8:	4413      	add	r3, r2
 80047ca:	2201      	movs	r2, #1
 80047cc:	701a      	strb	r2, [r3, #0]
    }

    
    // Write configuration information
    for (retry = 0; retry < 5; retry++){
 80047ce:	2300      	movs	r3, #0
 80047d0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80047d4:	e012      	b.n	80047fc <CTP_Init_Panel+0x304>
        ret = CTP_I2C_Write(config , cfg_num + CTP_ADDR_LENGTH+2);  //ret=1
 80047d6:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80047da:	3304      	adds	r3, #4
 80047dc:	4619      	mov	r1, r3
 80047de:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80047e2:	f7ff fca1 	bl	8004128 <CTP_I2C_Write>
 80047e6:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
        if (ret > 0){
 80047ea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	dc09      	bgt.n	8004806 <CTP_Init_Panel+0x30e>
    for (retry = 0; retry < 5; retry++){
 80047f2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80047f6:	3301      	adds	r3, #1
 80047f8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80047fc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004800:	2b04      	cmp	r3, #4
 8004802:	dde8      	ble.n	80047d6 <CTP_Init_Panel+0x2de>
 8004804:	e000      	b.n	8004808 <CTP_Init_Panel+0x310>
            break;
 8004806:	bf00      	nop
        }
    }
    ctDelay(1);
 8004808:	2001      	movs	r0, #1
 800480a:	f000 f91d 	bl	8004a48 <ctDelay>
		
#if 1	
    uint8_t buf[300];
    buf[0] = config[0];
 800480e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004812:	781a      	ldrb	r2, [r3, #0]
 8004814:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8004818:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800481c:	701a      	strb	r2, [r3, #0]
    buf[1] =config[1];    
 800481e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004822:	785a      	ldrb	r2, [r3, #1]
 8004824:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8004828:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800482c:	705a      	strb	r2, [r3, #1]
    ret = CTP_I2C_Read(buf, sizeof(buf));
 800482e:	1d3b      	adds	r3, r7, #4
 8004830:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff fc2f 	bl	8004098 <CTP_I2C_Read>
 800483a:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
    for(i=3;i<cfg_num+CTP_ADDR_LENGTH-3;i++){
 800483e:	2303      	movs	r3, #3
 8004840:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004844:	e035      	b.n	80048b2 <CTP_Init_Panel+0x3ba>
        if(config[i] != buf[i]){
 8004846:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800484a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800484e:	4413      	add	r3, r2
 8004850:	781a      	ldrb	r2, [r3, #0]
 8004852:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8004856:	f5a3 71a6 	sub.w	r1, r3, #332	; 0x14c
 800485a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800485e:	440b      	add	r3, r1
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d020      	beq.n	80048a8 <CTP_Init_Panel+0x3b0>
            CTP_ERROR("Config fail ! i = %d ",i);
 8004866:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 800486a:	480e      	ldr	r0, [pc, #56]	; (80048a4 <CTP_Init_Panel+0x3ac>)
 800486c:	f002 fed2 	bl	8007614 <iprintf>
            free(config);
 8004870:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8004874:	f002 fdc0 	bl	80073f8 <free>
            return -1;
 8004878:	f04f 33ff 	mov.w	r3, #4294967295
 800487c:	e037      	b.n	80048ee <CTP_Init_Panel+0x3f6>
 800487e:	bf00      	nop
 8004880:	08008a78 	.word	0x08008a78
 8004884:	20000014 	.word	0x20000014
 8004888:	08008bfc 	.word	0x08008bfc
 800488c:	20000018 	.word	0x20000018
 8004890:	200000d4 	.word	0x200000d4
 8004894:	20000190 	.word	0x20000190
 8004898:	08008a98 	.word	0x08008a98
 800489c:	08008ab4 	.word	0x08008ab4
 80048a0:	08008acc 	.word	0x08008acc
 80048a4:	08008af0 	.word	0x08008af0
    for(i=3;i<cfg_num+CTP_ADDR_LENGTH-3;i++){
 80048a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048ac:	3301      	adds	r3, #1
 80048ae:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80048b2:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80048b6:	3b01      	subs	r3, #1
 80048b8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80048bc:	429a      	cmp	r2, r3
 80048be:	dbc2      	blt.n	8004846 <CTP_Init_Panel+0x34e>
        }
    }
    if(i==cfg_num+CTP_ADDR_LENGTH-3)
 80048c0:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80048c4:	3b01      	subs	r3, #1
 80048c6:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d106      	bne.n	80048dc <CTP_Init_Panel+0x3e4>
        CTP_DEBUG("Config success ! i = %d ",i);
 80048ce:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80048d2:	f44f 7101 	mov.w	r1, #516	; 0x204
 80048d6:	4808      	ldr	r0, [pc, #32]	; (80048f8 <CTP_Init_Panel+0x400>)
 80048d8:	f002 fe9c 	bl	8007614 <iprintf>
#endif
	
    CTP_Get_Info();	
 80048dc:	f7ff fd88 	bl	80043f0 <CTP_Get_Info>
	free(config);
 80048e0:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80048e4:	f002 fd88 	bl	80073f8 <free>
    
    EXTI_IRQ_enable();
 80048e8:	f000 f924 	bl	8004b34 <EXTI_IRQ_enable>
    return 0;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	08008b0c 	.word	0x08008b0c

080048fc <CTP_Read_Version>:

static int32_t CTP_Read_Version(void){
 80048fc:	b5b0      	push	{r4, r5, r7, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af04      	add	r7, sp, #16
    int32_t ret = -1;
 8004902:	f04f 33ff 	mov.w	r3, #4294967295
 8004906:	60fb      	str	r3, [r7, #12]
    uint8_t buf[8] = {CTP_REG_VERSION >> 8, CTP_REG_VERSION & 0xff};    
 8004908:	f244 0381 	movw	r3, #16513	; 0x4081
 800490c:	607b      	str	r3, [r7, #4]
 800490e:	2300      	movs	r3, #0
 8004910:	60bb      	str	r3, [r7, #8]
    ret = CTP_I2C_Read(buf, sizeof(buf));
 8004912:	1d3b      	adds	r3, r7, #4
 8004914:	2108      	movs	r1, #8
 8004916:	4618      	mov	r0, r3
 8004918:	f7ff fbbe 	bl	8004098 <CTP_I2C_Read>
 800491c:	60f8      	str	r0, [r7, #12]
    if (ret < 0){
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2b00      	cmp	r3, #0
 8004922:	da04      	bge.n	800492e <CTP_Read_Version+0x32>
        CTP_ERROR("GTP read version failed");
 8004924:	4842      	ldr	r0, [pc, #264]	; (8004a30 <CTP_Read_Version+0x134>)
 8004926:	f002 fefb 	bl	8007720 <puts>
        return ret;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	e07b      	b.n	8004a26 <CTP_Read_Version+0x12a>
    }

    if (buf[2] == '9'){				
 800492e:	79bb      	ldrb	r3, [r7, #6]
 8004930:	2b39      	cmp	r3, #57	; 0x39
 8004932:	d13f      	bne.n	80049b4 <CTP_Read_Version+0xb8>
      //GT911
      if(buf[2] == '9' && buf[3] == '1' && buf[4] == '1'){
 8004934:	79bb      	ldrb	r3, [r7, #6]
 8004936:	2b39      	cmp	r3, #57	; 0x39
 8004938:	d119      	bne.n	800496e <CTP_Read_Version+0x72>
 800493a:	79fb      	ldrb	r3, [r7, #7]
 800493c:	2b31      	cmp	r3, #49	; 0x31
 800493e:	d116      	bne.n	800496e <CTP_Read_Version+0x72>
 8004940:	7a3b      	ldrb	r3, [r7, #8]
 8004942:	2b31      	cmp	r3, #49	; 0x31
 8004944:	d113      	bne.n	800496e <CTP_Read_Version+0x72>
        CTP_INFO("IC1 Version: %c%c%c_%02x%02x", buf[2], buf[3], buf[4], buf[7], buf[6]);
 8004946:	79bb      	ldrb	r3, [r7, #6]
 8004948:	4619      	mov	r1, r3
 800494a:	79fb      	ldrb	r3, [r7, #7]
 800494c:	4618      	mov	r0, r3
 800494e:	7a3b      	ldrb	r3, [r7, #8]
 8004950:	461c      	mov	r4, r3
 8004952:	7afb      	ldrb	r3, [r7, #11]
 8004954:	7aba      	ldrb	r2, [r7, #10]
 8004956:	9201      	str	r2, [sp, #4]
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	4623      	mov	r3, r4
 800495c:	4602      	mov	r2, r0
 800495e:	4835      	ldr	r0, [pc, #212]	; (8004a34 <CTP_Read_Version+0x138>)
 8004960:	f002 fe58 	bl	8007614 <iprintf>
        touchIC = GT911;
 8004964:	4b34      	ldr	r3, [pc, #208]	; (8004a38 <CTP_Read_Version+0x13c>)
 8004966:	2201      	movs	r2, #1
 8004968:	701a      	strb	r2, [r3, #0]
        return 0;
 800496a:	2300      	movs	r3, #0
 800496c:	e05b      	b.n	8004a26 <CTP_Read_Version+0x12a>
      }
      //GT9157
      if( buf[2] == '9' && buf[3] == '1' && buf[4] == '5' && buf[5] == '7'){
 800496e:	79bb      	ldrb	r3, [r7, #6]
 8004970:	2b39      	cmp	r3, #57	; 0x39
 8004972:	d11f      	bne.n	80049b4 <CTP_Read_Version+0xb8>
 8004974:	79fb      	ldrb	r3, [r7, #7]
 8004976:	2b31      	cmp	r3, #49	; 0x31
 8004978:	d11c      	bne.n	80049b4 <CTP_Read_Version+0xb8>
 800497a:	7a3b      	ldrb	r3, [r7, #8]
 800497c:	2b35      	cmp	r3, #53	; 0x35
 800497e:	d119      	bne.n	80049b4 <CTP_Read_Version+0xb8>
 8004980:	7a7b      	ldrb	r3, [r7, #9]
 8004982:	2b37      	cmp	r3, #55	; 0x37
 8004984:	d116      	bne.n	80049b4 <CTP_Read_Version+0xb8>
        CTP_INFO("IC2 Version: %c%c%c%c_%02x%02x", buf[2], buf[3], buf[4], buf[5], buf[7], buf[6]);
 8004986:	79bb      	ldrb	r3, [r7, #6]
 8004988:	4618      	mov	r0, r3
 800498a:	79fb      	ldrb	r3, [r7, #7]
 800498c:	461c      	mov	r4, r3
 800498e:	7a3b      	ldrb	r3, [r7, #8]
 8004990:	461d      	mov	r5, r3
 8004992:	7a7b      	ldrb	r3, [r7, #9]
 8004994:	7afa      	ldrb	r2, [r7, #11]
 8004996:	7ab9      	ldrb	r1, [r7, #10]
 8004998:	9102      	str	r1, [sp, #8]
 800499a:	9201      	str	r2, [sp, #4]
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	462b      	mov	r3, r5
 80049a0:	4622      	mov	r2, r4
 80049a2:	4601      	mov	r1, r0
 80049a4:	4825      	ldr	r0, [pc, #148]	; (8004a3c <CTP_Read_Version+0x140>)
 80049a6:	f002 fe35 	bl	8007614 <iprintf>
        touchIC = GT9157;
 80049aa:	4b23      	ldr	r3, [pc, #140]	; (8004a38 <CTP_Read_Version+0x13c>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	701a      	strb	r2, [r3, #0]
        return 0;
 80049b0:	2300      	movs	r3, #0
 80049b2:	e038      	b.n	8004a26 <CTP_Read_Version+0x12a>
      }
    }    
    if (buf[2] == '5'){	
 80049b4:	79bb      	ldrb	r3, [r7, #6]
 80049b6:	2b35      	cmp	r3, #53	; 0x35
 80049b8:	d122      	bne.n	8004a00 <CTP_Read_Version+0x104>
      //GT5688
      if(buf[2] == '5' && buf[3] == '6' && buf[4] == '8' && buf[5] == '8'){
 80049ba:	79bb      	ldrb	r3, [r7, #6]
 80049bc:	2b35      	cmp	r3, #53	; 0x35
 80049be:	d11f      	bne.n	8004a00 <CTP_Read_Version+0x104>
 80049c0:	79fb      	ldrb	r3, [r7, #7]
 80049c2:	2b36      	cmp	r3, #54	; 0x36
 80049c4:	d11c      	bne.n	8004a00 <CTP_Read_Version+0x104>
 80049c6:	7a3b      	ldrb	r3, [r7, #8]
 80049c8:	2b38      	cmp	r3, #56	; 0x38
 80049ca:	d119      	bne.n	8004a00 <CTP_Read_Version+0x104>
 80049cc:	7a7b      	ldrb	r3, [r7, #9]
 80049ce:	2b38      	cmp	r3, #56	; 0x38
 80049d0:	d116      	bne.n	8004a00 <CTP_Read_Version+0x104>
        CTP_INFO("IC3 Version: %c%c%c%c_%02x%02x", buf[2], buf[3], buf[4], buf[5], buf[7], buf[6]);
 80049d2:	79bb      	ldrb	r3, [r7, #6]
 80049d4:	4618      	mov	r0, r3
 80049d6:	79fb      	ldrb	r3, [r7, #7]
 80049d8:	461c      	mov	r4, r3
 80049da:	7a3b      	ldrb	r3, [r7, #8]
 80049dc:	461d      	mov	r5, r3
 80049de:	7a7b      	ldrb	r3, [r7, #9]
 80049e0:	7afa      	ldrb	r2, [r7, #11]
 80049e2:	7ab9      	ldrb	r1, [r7, #10]
 80049e4:	9102      	str	r1, [sp, #8]
 80049e6:	9201      	str	r2, [sp, #4]
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	462b      	mov	r3, r5
 80049ec:	4622      	mov	r2, r4
 80049ee:	4601      	mov	r1, r0
 80049f0:	4813      	ldr	r0, [pc, #76]	; (8004a40 <CTP_Read_Version+0x144>)
 80049f2:	f002 fe0f 	bl	8007614 <iprintf>
        touchIC = GT5688;
 80049f6:	4b10      	ldr	r3, [pc, #64]	; (8004a38 <CTP_Read_Version+0x13c>)
 80049f8:	2202      	movs	r2, #2
 80049fa:	701a      	strb	r2, [r3, #0]
        return 0;
 80049fc:	2300      	movs	r3, #0
 80049fe:	e012      	b.n	8004a26 <CTP_Read_Version+0x12a>
      }

    } 
    CTP_INFO("Unknown IC Version: %c%c%c%c_%02x%02x", buf[2], buf[3], buf[4], buf[5], buf[7], buf[6]);
 8004a00:	79bb      	ldrb	r3, [r7, #6]
 8004a02:	4618      	mov	r0, r3
 8004a04:	79fb      	ldrb	r3, [r7, #7]
 8004a06:	461c      	mov	r4, r3
 8004a08:	7a3b      	ldrb	r3, [r7, #8]
 8004a0a:	461d      	mov	r5, r3
 8004a0c:	7a7b      	ldrb	r3, [r7, #9]
 8004a0e:	7afa      	ldrb	r2, [r7, #11]
 8004a10:	7ab9      	ldrb	r1, [r7, #10]
 8004a12:	9102      	str	r1, [sp, #8]
 8004a14:	9201      	str	r2, [sp, #4]
 8004a16:	9300      	str	r3, [sp, #0]
 8004a18:	462b      	mov	r3, r5
 8004a1a:	4622      	mov	r2, r4
 8004a1c:	4601      	mov	r1, r0
 8004a1e:	4809      	ldr	r0, [pc, #36]	; (8004a44 <CTP_Read_Version+0x148>)
 8004a20:	f002 fdf8 	bl	8007614 <iprintf>
    return ret;
 8004a24:	68fb      	ldr	r3, [r7, #12]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bdb0      	pop	{r4, r5, r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	08008b30 	.word	0x08008b30
 8004a34:	08008b4c 	.word	0x08008b4c
 8004a38:	20000014 	.word	0x20000014
 8004a3c:	08008b70 	.word	0x08008b70
 8004a40:	08008b94 	.word	0x08008b94
 8004a44:	08008bb8 	.word	0x08008bb8

08004a48 <ctDelay>:
  //No OS
  static int16_t ctX=0;
  static int16_t ctY=0;
  static uint8_t ctPress=0;

  void ctDelay(uint32_t ms){
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 fa3d 	bl	8004ed0 <HAL_Delay>
  }
 8004a56:	bf00      	nop
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
	...

08004a60 <ctMessagePut>:
  void ctMessagePut(uint16_t x,uint16_t y,uint8_t press){
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	4603      	mov	r3, r0
 8004a68:	80fb      	strh	r3, [r7, #6]
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	80bb      	strh	r3, [r7, #4]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	70fb      	strb	r3, [r7, #3]
    ctX=x; ctY=y; ctPress=press;
 8004a72:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004a76:	4b07      	ldr	r3, [pc, #28]	; (8004a94 <ctMessagePut+0x34>)
 8004a78:	801a      	strh	r2, [r3, #0]
 8004a7a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004a7e:	4b06      	ldr	r3, [pc, #24]	; (8004a98 <ctMessagePut+0x38>)
 8004a80:	801a      	strh	r2, [r3, #0]
 8004a82:	4a06      	ldr	r2, [pc, #24]	; (8004a9c <ctMessagePut+0x3c>)
 8004a84:	78fb      	ldrb	r3, [r7, #3]
 8004a86:	7013      	strb	r3, [r2, #0]
  }
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	200003fa 	.word	0x200003fa
 8004a98:	200003fc 	.word	0x200003fc
 8004a9c:	200003fe 	.word	0x200003fe

08004aa0 <I2C_ResetChip>:
//MCU dependet functions


uint8_t Exti_EN=1;

void I2C_ResetChip(void){
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
    if(Exti_EN){
 8004aa6:	4b21      	ldr	r3, [pc, #132]	; (8004b2c <I2C_ResetChip+0x8c>)
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <I2C_ResetChip+0x14>
      HAL_NVIC_DisableIRQ(CTP_INT_IRQn);
 8004aae:	2007      	movs	r0, #7
 8004ab0:	f000 fb5b 	bl	800516a <HAL_NVIC_DisableIRQ>
    }
    GPIO_InitTypeDef GPIO_Initure;
    //1. Reset out low
    CTP_RST_PORT->BSRR=CTP_RST_PIN<<16; //RST = 0
 8004ab4:	4b1e      	ldr	r3, [pc, #120]	; (8004b30 <I2C_ResetChip+0x90>)
 8004ab6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004aba:	619a      	str	r2, [r3, #24]
	ctDelay(5);
 8004abc:	2005      	movs	r0, #5
 8004abe:	f7ff ffc3 	bl	8004a48 <ctDelay>
    //2. Int out low / high
    GPIO_Initure.Pin=CTP_INT_PIN;            
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	607b      	str	r3, [r7, #4]
	GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;             
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(CTP_INT_PORT,&GPIO_Initure);
 8004aca:	1d3b      	adds	r3, r7, #4
 8004acc:	4619      	mov	r1, r3
 8004ace:	4818      	ldr	r0, [pc, #96]	; (8004b30 <I2C_ResetChip+0x90>)
 8004ad0:	f000 fb66 	bl	80051a0 <HAL_GPIO_Init>
    CTP_INT_PORT->BSRR=CTP_INT_PIN<<16; //INT = 0
 8004ad4:	4b16      	ldr	r3, [pc, #88]	; (8004b30 <I2C_ResetChip+0x90>)
 8004ad6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ada:	619a      	str	r2, [r3, #24]
    ctDelay(2); //>100us
 8004adc:	2002      	movs	r0, #2
 8004ade:	f7ff ffb3 	bl	8004a48 <ctDelay>
    //3. Reset out high
	CTP_RST_PORT->BSRR=CTP_RST_PIN<<0;  //RST = 1
 8004ae2:	4b13      	ldr	r3, [pc, #76]	; (8004b30 <I2C_ResetChip+0x90>)
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	619a      	str	r2, [r3, #24]
	ctDelay(7); //5-10 ms
 8004ae8:	2007      	movs	r0, #7
 8004aea:	f7ff ffad 	bl	8004a48 <ctDelay>
    //4. INT out low
    CTP_INT_PORT->BSRR=CTP_INT_PIN<<16; //INT = 0
 8004aee:	4b10      	ldr	r3, [pc, #64]	; (8004b30 <I2C_ResetChip+0x90>)
 8004af0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004af4:	619a      	str	r2, [r3, #24]
    ctDelay(55); //>50 ms
 8004af6:	2037      	movs	r0, #55	; 0x37
 8004af8:	f7ff ffa6 	bl	8004a48 <ctDelay>
    //5. INT input floating
	GPIO_Initure.Pin=CTP_INT_PIN;
 8004afc:	2302      	movs	r3, #2
 8004afe:	607b      	str	r3, [r7, #4]
    GPIO_Initure.Mode = GPIO_MODE_IT_FALLING;
 8004b00:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004b04:	60bb      	str	r3, [r7, #8]
	GPIO_Initure.Mode=GPIO_MODE_INPUT;
 8004b06:	2300      	movs	r3, #0
 8004b08:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(CTP_INT_PORT,&GPIO_Initure);
 8004b0a:	1d3b      	adds	r3, r7, #4
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4808      	ldr	r0, [pc, #32]	; (8004b30 <I2C_ResetChip+0x90>)
 8004b10:	f000 fb46 	bl	80051a0 <HAL_GPIO_Init>
    if(Exti_EN){
 8004b14:	4b05      	ldr	r3, [pc, #20]	; (8004b2c <I2C_ResetChip+0x8c>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <I2C_ResetChip+0x82>
      HAL_NVIC_EnableIRQ(CTP_INT_IRQn);
 8004b1c:	2007      	movs	r0, #7
 8004b1e:	f000 fb16 	bl	800514e <HAL_NVIC_EnableIRQ>
    }
}
 8004b22:	bf00      	nop
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	2000028c 	.word	0x2000028c
 8004b30:	40020c00 	.word	0x40020c00

08004b34 <EXTI_IRQ_enable>:

void EXTI_IRQ_enable(){
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
    Exti_EN=1;
 8004b38:	4b03      	ldr	r3, [pc, #12]	; (8004b48 <EXTI_IRQ_enable+0x14>)
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	701a      	strb	r2, [r3, #0]
    HAL_NVIC_EnableIRQ(CTP_INT_IRQn);
 8004b3e:	2007      	movs	r0, #7
 8004b40:	f000 fb05 	bl	800514e <HAL_NVIC_EnableIRQ>
}
 8004b44:	bf00      	nop
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	2000028c 	.word	0x2000028c

08004b4c <HAL_GPIO_EXTI_Callback>:



//In CubeMX exti must be swihed on
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	4603      	mov	r3, r0
 8004b54:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == CTP_INT_PIN){
 8004b56:	88fb      	ldrh	r3, [r7, #6]
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d101      	bne.n	8004b60 <HAL_GPIO_EXTI_Callback+0x14>

	  CTP_TS_Work_Func();
 8004b5c:	f7ff fbb4 	bl	80042c8 <CTP_TS_Work_Func>

  }
}
 8004b60:	bf00      	nop
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <I2C_Touch_Init>:

void I2C_Touch_Init(void){
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
    HAL_NVIC_DisableIRQ(CTP_INT_IRQn);
 8004b6e:	2007      	movs	r0, #7
 8004b70:	f000 fafb 	bl	800516a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_SetPriority(CTP_INT_IRQn, 15, 15);
 8004b74:	220f      	movs	r2, #15
 8004b76:	210f      	movs	r1, #15
 8004b78:	2007      	movs	r0, #7
 8004b7a:	f000 facc 	bl	8005116 <HAL_NVIC_SetPriority>
    GPIO_InitTypeDef GPIO_Initure;
	
	__HAL_RCC_GPIOD_CLK_ENABLE();		//Turn on the GPIOD clock
 8004b7e:	2300      	movs	r3, #0
 8004b80:	603b      	str	r3, [r7, #0]
 8004b82:	4b15      	ldr	r3, [pc, #84]	; (8004bd8 <I2C_Touch_Init+0x70>)
 8004b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b86:	4a14      	ldr	r2, [pc, #80]	; (8004bd8 <I2C_Touch_Init+0x70>)
 8004b88:	f043 0308 	orr.w	r3, r3, #8
 8004b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b8e:	4b12      	ldr	r3, [pc, #72]	; (8004bd8 <I2C_Touch_Init+0x70>)
 8004b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b92:	f003 0308 	and.w	r3, r3, #8
 8004b96:	603b      	str	r3, [r7, #0]
 8004b98:	683b      	ldr	r3, [r7, #0]
	
    GPIO_Initure.Pin=CTP_RST_PIN;            
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	607b      	str	r3, [r7, #4]
	GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	60bb      	str	r3, [r7, #8]
    GPIO_Initure.Speed=GPIO_SPEED_HIGH;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	613b      	str	r3, [r7, #16]
    GPIO_Initure.Pull=GPIO_NOPULL;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(CTP_RST_PORT,&GPIO_Initure);
 8004baa:	1d3b      	adds	r3, r7, #4
 8004bac:	4619      	mov	r1, r3
 8004bae:	480b      	ldr	r0, [pc, #44]	; (8004bdc <I2C_Touch_Init+0x74>)
 8004bb0:	f000 faf6 	bl	80051a0 <HAL_GPIO_Init>
    CTP_RST_PORT->BSRR=CTP_RST_PIN<<16; //RST = 0
 8004bb4:	4b09      	ldr	r3, [pc, #36]	; (8004bdc <I2C_Touch_Init+0x74>)
 8004bb6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004bba:	619a      	str	r2, [r3, #24]
    ctDelay(10);
 8004bbc:	200a      	movs	r0, #10
 8004bbe:	f7ff ff43 	bl	8004a48 <ctDelay>

    I2C_ResetChip();
 8004bc2:	f7ff ff6d 	bl	8004aa0 <I2C_ResetChip>
    ctDelay(50);
 8004bc6:	2032      	movs	r0, #50	; 0x32
 8004bc8:	f7ff ff3e 	bl	8004a48 <ctDelay>
    MX_I2C3_Init();
 8004bcc:	f7fd fbfa 	bl	80023c4 <MX_I2C3_Init>
}
 8004bd0:	bf00      	nop
 8004bd2:	3718      	adds	r7, #24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	40020c00 	.word	0x40020c00

08004be0 <I2C_Transfer>:

int I2C_Transfer( struct i2c_msg *msgs,int num){
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af02      	add	r7, sp, #8
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
	int im = 0;
 8004bea:	2300      	movs	r3, #0
 8004bec:	60fb      	str	r3, [r7, #12]
	int ret = 0;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60bb      	str	r3, [r7, #8]
	for (im = 0; ret == 0 && im != num; im++){
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60fb      	str	r3, [r7, #12]
 8004bf6:	e048      	b.n	8004c8a <I2C_Transfer+0xaa>
		if ((msgs[im].flags&CTP_I2C_M_RD)){
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	4413      	add	r3, r2
 8004c00:	881b      	ldrh	r3, [r3, #0]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d01e      	beq.n	8004c48 <I2C_Transfer+0x68>
			HAL_I2C_Master_Receive(&hi2c3,CTP_ADDRESS+CTP_I2C_M_RD /*msgs[im].addr*/, msgs[im].buf, msgs[im].len,15+msgs[im].len/10);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	00db      	lsls	r3, r3, #3
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	4413      	add	r3, r2
 8004c12:	6859      	ldr	r1, [r3, #4]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	8858      	ldrh	r0, [r3, #2]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	00db      	lsls	r3, r3, #3
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	4413      	add	r3, r2
 8004c26:	885b      	ldrh	r3, [r3, #2]
 8004c28:	4a20      	ldr	r2, [pc, #128]	; (8004cac <I2C_Transfer+0xcc>)
 8004c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2e:	08db      	lsrs	r3, r3, #3
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	330f      	adds	r3, #15
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	4603      	mov	r3, r0
 8004c38:	460a      	mov	r2, r1
 8004c3a:	21bb      	movs	r1, #187	; 0xbb
 8004c3c:	481c      	ldr	r0, [pc, #112]	; (8004cb0 <I2C_Transfer+0xd0>)
 8004c3e:	f000 fea7 	bl	8005990 <HAL_I2C_Master_Receive>
            ret=0;
 8004c42:	2300      	movs	r3, #0
 8004c44:	60bb      	str	r3, [r7, #8]
 8004c46:	e01d      	b.n	8004c84 <I2C_Transfer+0xa4>
		}else{
			HAL_I2C_Master_Transmit(&hi2c3,CTP_ADDRESS /*msgs[im].addr*/,  msgs[im].buf, msgs[im].len,15+msgs[im].len/10);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	00db      	lsls	r3, r3, #3
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	4413      	add	r3, r2
 8004c50:	6859      	ldr	r1, [r3, #4]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	00db      	lsls	r3, r3, #3
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	4413      	add	r3, r2
 8004c5a:	8858      	ldrh	r0, [r3, #2]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	4413      	add	r3, r2
 8004c64:	885b      	ldrh	r3, [r3, #2]
 8004c66:	4a11      	ldr	r2, [pc, #68]	; (8004cac <I2C_Transfer+0xcc>)
 8004c68:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6c:	08db      	lsrs	r3, r3, #3
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	330f      	adds	r3, #15
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	4603      	mov	r3, r0
 8004c76:	460a      	mov	r2, r1
 8004c78:	21ba      	movs	r1, #186	; 0xba
 8004c7a:	480d      	ldr	r0, [pc, #52]	; (8004cb0 <I2C_Transfer+0xd0>)
 8004c7c:	f000 fd8a 	bl	8005794 <HAL_I2C_Master_Transmit>
            ret=0;
 8004c80:	2300      	movs	r3, #0
 8004c82:	60bb      	str	r3, [r7, #8]
	for (im = 0; ret == 0 && im != num; im++){
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	3301      	adds	r3, #1
 8004c88:	60fb      	str	r3, [r7, #12]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d103      	bne.n	8004c98 <I2C_Transfer+0xb8>
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d1af      	bne.n	8004bf8 <I2C_Transfer+0x18>
		}
	}

	if(ret)
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <I2C_Transfer+0xc2>
		return ret;
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	e000      	b.n	8004ca4 <I2C_Transfer+0xc4>

	return im;   													
 8004ca2:	68fb      	ldr	r3, [r7, #12]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	cccccccd 	.word	0xcccccccd
 8004cb0:	2000031c 	.word	0x2000031c

08004cb4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004cb8:	4b11      	ldr	r3, [pc, #68]	; (8004d00 <MX_USART1_UART_Init+0x4c>)
 8004cba:	4a12      	ldr	r2, [pc, #72]	; (8004d04 <MX_USART1_UART_Init+0x50>)
 8004cbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004cbe:	4b10      	ldr	r3, [pc, #64]	; (8004d00 <MX_USART1_UART_Init+0x4c>)
 8004cc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004cc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004cc6:	4b0e      	ldr	r3, [pc, #56]	; (8004d00 <MX_USART1_UART_Init+0x4c>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004ccc:	4b0c      	ldr	r3, [pc, #48]	; (8004d00 <MX_USART1_UART_Init+0x4c>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004cd2:	4b0b      	ldr	r3, [pc, #44]	; (8004d00 <MX_USART1_UART_Init+0x4c>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004cd8:	4b09      	ldr	r3, [pc, #36]	; (8004d00 <MX_USART1_UART_Init+0x4c>)
 8004cda:	220c      	movs	r2, #12
 8004cdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004cde:	4b08      	ldr	r3, [pc, #32]	; (8004d00 <MX_USART1_UART_Init+0x4c>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ce4:	4b06      	ldr	r3, [pc, #24]	; (8004d00 <MX_USART1_UART_Init+0x4c>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004cea:	4805      	ldr	r0, [pc, #20]	; (8004d00 <MX_USART1_UART_Init+0x4c>)
 8004cec:	f002 f891 	bl	8006e12 <HAL_UART_Init>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004cf6:	f7ff f827 	bl	8003d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004cfa:	bf00      	nop
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20000400 	.word	0x20000400
 8004d04:	40011000 	.word	0x40011000

08004d08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b08a      	sub	sp, #40	; 0x28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d10:	f107 0314 	add.w	r3, r7, #20
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]
 8004d18:	605a      	str	r2, [r3, #4]
 8004d1a:	609a      	str	r2, [r3, #8]
 8004d1c:	60da      	str	r2, [r3, #12]
 8004d1e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a19      	ldr	r2, [pc, #100]	; (8004d8c <HAL_UART_MspInit+0x84>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d12b      	bne.n	8004d82 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	613b      	str	r3, [r7, #16]
 8004d2e:	4b18      	ldr	r3, [pc, #96]	; (8004d90 <HAL_UART_MspInit+0x88>)
 8004d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d32:	4a17      	ldr	r2, [pc, #92]	; (8004d90 <HAL_UART_MspInit+0x88>)
 8004d34:	f043 0310 	orr.w	r3, r3, #16
 8004d38:	6453      	str	r3, [r2, #68]	; 0x44
 8004d3a:	4b15      	ldr	r3, [pc, #84]	; (8004d90 <HAL_UART_MspInit+0x88>)
 8004d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3e:	f003 0310 	and.w	r3, r3, #16
 8004d42:	613b      	str	r3, [r7, #16]
 8004d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d46:	2300      	movs	r3, #0
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	4b11      	ldr	r3, [pc, #68]	; (8004d90 <HAL_UART_MspInit+0x88>)
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4e:	4a10      	ldr	r2, [pc, #64]	; (8004d90 <HAL_UART_MspInit+0x88>)
 8004d50:	f043 0302 	orr.w	r3, r3, #2
 8004d54:	6313      	str	r3, [r2, #48]	; 0x30
 8004d56:	4b0e      	ldr	r3, [pc, #56]	; (8004d90 <HAL_UART_MspInit+0x88>)
 8004d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004d62:	23c0      	movs	r3, #192	; 0xc0
 8004d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d66:	2302      	movs	r3, #2
 8004d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004d72:	2307      	movs	r3, #7
 8004d74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d76:	f107 0314 	add.w	r3, r7, #20
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	4805      	ldr	r0, [pc, #20]	; (8004d94 <HAL_UART_MspInit+0x8c>)
 8004d7e:	f000 fa0f 	bl	80051a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004d82:	bf00      	nop
 8004d84:	3728      	adds	r7, #40	; 0x28
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	40011000 	.word	0x40011000
 8004d90:	40023800 	.word	0x40023800
 8004d94:	40020400 	.word	0x40020400

08004d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8004d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004dd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004d9c:	480d      	ldr	r0, [pc, #52]	; (8004dd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004d9e:	490e      	ldr	r1, [pc, #56]	; (8004dd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004da0:	4a0e      	ldr	r2, [pc, #56]	; (8004ddc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004da4:	e002      	b.n	8004dac <LoopCopyDataInit>

08004da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004daa:	3304      	adds	r3, #4

08004dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004db0:	d3f9      	bcc.n	8004da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004db2:	4a0b      	ldr	r2, [pc, #44]	; (8004de0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004db4:	4c0b      	ldr	r4, [pc, #44]	; (8004de4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004db8:	e001      	b.n	8004dbe <LoopFillZerobss>

08004dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004dbc:	3204      	adds	r2, #4

08004dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004dc0:	d3fb      	bcc.n	8004dba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004dc2:	f7ff f957 	bl	8004074 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004dc6:	f002 faeb 	bl	80073a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004dca:	f7fd fcad 	bl	8002728 <main>
  bx  lr    
 8004dce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004dd0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8004dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004dd8:	200002fc 	.word	0x200002fc
  ldr r2, =_sidata
 8004ddc:	08008cb8 	.word	0x08008cb8
  ldr r2, =_sbss
 8004de0:	200002fc 	.word	0x200002fc
  ldr r4, =_ebss
 8004de4:	20000458 	.word	0x20000458

08004de8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004de8:	e7fe      	b.n	8004de8 <ADC_IRQHandler>
	...

08004dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004df0:	4b0e      	ldr	r3, [pc, #56]	; (8004e2c <HAL_Init+0x40>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a0d      	ldr	r2, [pc, #52]	; (8004e2c <HAL_Init+0x40>)
 8004df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004dfc:	4b0b      	ldr	r3, [pc, #44]	; (8004e2c <HAL_Init+0x40>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a0a      	ldr	r2, [pc, #40]	; (8004e2c <HAL_Init+0x40>)
 8004e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e08:	4b08      	ldr	r3, [pc, #32]	; (8004e2c <HAL_Init+0x40>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a07      	ldr	r2, [pc, #28]	; (8004e2c <HAL_Init+0x40>)
 8004e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e14:	2003      	movs	r0, #3
 8004e16:	f000 f973 	bl	8005100 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e1a:	200f      	movs	r0, #15
 8004e1c:	f000 f808 	bl	8004e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e20:	f7ff f81e 	bl	8003e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	40023c00 	.word	0x40023c00

08004e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e38:	4b12      	ldr	r3, [pc, #72]	; (8004e84 <HAL_InitTick+0x54>)
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	4b12      	ldr	r3, [pc, #72]	; (8004e88 <HAL_InitTick+0x58>)
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	4619      	mov	r1, r3
 8004e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 f999 	bl	8005186 <HAL_SYSTICK_Config>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e00e      	b.n	8004e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b0f      	cmp	r3, #15
 8004e62:	d80a      	bhi.n	8004e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e64:	2200      	movs	r2, #0
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	f04f 30ff 	mov.w	r0, #4294967295
 8004e6c:	f000 f953 	bl	8005116 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e70:	4a06      	ldr	r2, [pc, #24]	; (8004e8c <HAL_InitTick+0x5c>)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
 8004e78:	e000      	b.n	8004e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	20000010 	.word	0x20000010
 8004e88:	20000294 	.word	0x20000294
 8004e8c:	20000290 	.word	0x20000290

08004e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e94:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <HAL_IncTick+0x20>)
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	4b06      	ldr	r3, [pc, #24]	; (8004eb4 <HAL_IncTick+0x24>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	4a04      	ldr	r2, [pc, #16]	; (8004eb4 <HAL_IncTick+0x24>)
 8004ea2:	6013      	str	r3, [r2, #0]
}
 8004ea4:	bf00      	nop
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	20000294 	.word	0x20000294
 8004eb4:	20000444 	.word	0x20000444

08004eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	af00      	add	r7, sp, #0
  return uwTick;
 8004ebc:	4b03      	ldr	r3, [pc, #12]	; (8004ecc <HAL_GetTick+0x14>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	20000444 	.word	0x20000444

08004ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ed8:	f7ff ffee 	bl	8004eb8 <HAL_GetTick>
 8004edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee8:	d005      	beq.n	8004ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004eea:	4b0a      	ldr	r3, [pc, #40]	; (8004f14 <HAL_Delay+0x44>)
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004ef6:	bf00      	nop
 8004ef8:	f7ff ffde 	bl	8004eb8 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d8f7      	bhi.n	8004ef8 <HAL_Delay+0x28>
  {
  }
}
 8004f08:	bf00      	nop
 8004f0a:	bf00      	nop
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	20000294 	.word	0x20000294

08004f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f003 0307 	and.w	r3, r3, #7
 8004f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f28:	4b0c      	ldr	r3, [pc, #48]	; (8004f5c <__NVIC_SetPriorityGrouping+0x44>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f34:	4013      	ands	r3, r2
 8004f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f4a:	4a04      	ldr	r2, [pc, #16]	; (8004f5c <__NVIC_SetPriorityGrouping+0x44>)
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	60d3      	str	r3, [r2, #12]
}
 8004f50:	bf00      	nop
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	e000ed00 	.word	0xe000ed00

08004f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f64:	4b04      	ldr	r3, [pc, #16]	; (8004f78 <__NVIC_GetPriorityGrouping+0x18>)
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	0a1b      	lsrs	r3, r3, #8
 8004f6a:	f003 0307 	and.w	r3, r3, #7
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	e000ed00 	.word	0xe000ed00

08004f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	4603      	mov	r3, r0
 8004f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	db0b      	blt.n	8004fa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f8e:	79fb      	ldrb	r3, [r7, #7]
 8004f90:	f003 021f 	and.w	r2, r3, #31
 8004f94:	4907      	ldr	r1, [pc, #28]	; (8004fb4 <__NVIC_EnableIRQ+0x38>)
 8004f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f9a:	095b      	lsrs	r3, r3, #5
 8004f9c:	2001      	movs	r0, #1
 8004f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8004fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	e000e100 	.word	0xe000e100

08004fb8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	db12      	blt.n	8004ff0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fca:	79fb      	ldrb	r3, [r7, #7]
 8004fcc:	f003 021f 	and.w	r2, r3, #31
 8004fd0:	490a      	ldr	r1, [pc, #40]	; (8004ffc <__NVIC_DisableIRQ+0x44>)
 8004fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fd6:	095b      	lsrs	r3, r3, #5
 8004fd8:	2001      	movs	r0, #1
 8004fda:	fa00 f202 	lsl.w	r2, r0, r2
 8004fde:	3320      	adds	r3, #32
 8004fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004fe4:	f3bf 8f4f 	dsb	sy
}
 8004fe8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004fea:	f3bf 8f6f 	isb	sy
}
 8004fee:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	e000e100 	.word	0xe000e100

08005000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	4603      	mov	r3, r0
 8005008:	6039      	str	r1, [r7, #0]
 800500a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800500c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005010:	2b00      	cmp	r3, #0
 8005012:	db0a      	blt.n	800502a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	b2da      	uxtb	r2, r3
 8005018:	490c      	ldr	r1, [pc, #48]	; (800504c <__NVIC_SetPriority+0x4c>)
 800501a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800501e:	0112      	lsls	r2, r2, #4
 8005020:	b2d2      	uxtb	r2, r2
 8005022:	440b      	add	r3, r1
 8005024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005028:	e00a      	b.n	8005040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	b2da      	uxtb	r2, r3
 800502e:	4908      	ldr	r1, [pc, #32]	; (8005050 <__NVIC_SetPriority+0x50>)
 8005030:	79fb      	ldrb	r3, [r7, #7]
 8005032:	f003 030f 	and.w	r3, r3, #15
 8005036:	3b04      	subs	r3, #4
 8005038:	0112      	lsls	r2, r2, #4
 800503a:	b2d2      	uxtb	r2, r2
 800503c:	440b      	add	r3, r1
 800503e:	761a      	strb	r2, [r3, #24]
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	e000e100 	.word	0xe000e100
 8005050:	e000ed00 	.word	0xe000ed00

08005054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005054:	b480      	push	{r7}
 8005056:	b089      	sub	sp, #36	; 0x24
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f003 0307 	and.w	r3, r3, #7
 8005066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	f1c3 0307 	rsb	r3, r3, #7
 800506e:	2b04      	cmp	r3, #4
 8005070:	bf28      	it	cs
 8005072:	2304      	movcs	r3, #4
 8005074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	3304      	adds	r3, #4
 800507a:	2b06      	cmp	r3, #6
 800507c:	d902      	bls.n	8005084 <NVIC_EncodePriority+0x30>
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	3b03      	subs	r3, #3
 8005082:	e000      	b.n	8005086 <NVIC_EncodePriority+0x32>
 8005084:	2300      	movs	r3, #0
 8005086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005088:	f04f 32ff 	mov.w	r2, #4294967295
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	fa02 f303 	lsl.w	r3, r2, r3
 8005092:	43da      	mvns	r2, r3
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	401a      	ands	r2, r3
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800509c:	f04f 31ff 	mov.w	r1, #4294967295
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	fa01 f303 	lsl.w	r3, r1, r3
 80050a6:	43d9      	mvns	r1, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050ac:	4313      	orrs	r3, r2
         );
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3724      	adds	r7, #36	; 0x24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
	...

080050bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050cc:	d301      	bcc.n	80050d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050ce:	2301      	movs	r3, #1
 80050d0:	e00f      	b.n	80050f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050d2:	4a0a      	ldr	r2, [pc, #40]	; (80050fc <SysTick_Config+0x40>)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050da:	210f      	movs	r1, #15
 80050dc:	f04f 30ff 	mov.w	r0, #4294967295
 80050e0:	f7ff ff8e 	bl	8005000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050e4:	4b05      	ldr	r3, [pc, #20]	; (80050fc <SysTick_Config+0x40>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050ea:	4b04      	ldr	r3, [pc, #16]	; (80050fc <SysTick_Config+0x40>)
 80050ec:	2207      	movs	r2, #7
 80050ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	e000e010 	.word	0xe000e010

08005100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7ff ff05 	bl	8004f18 <__NVIC_SetPriorityGrouping>
}
 800510e:	bf00      	nop
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005116:	b580      	push	{r7, lr}
 8005118:	b086      	sub	sp, #24
 800511a:	af00      	add	r7, sp, #0
 800511c:	4603      	mov	r3, r0
 800511e:	60b9      	str	r1, [r7, #8]
 8005120:	607a      	str	r2, [r7, #4]
 8005122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005124:	2300      	movs	r3, #0
 8005126:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005128:	f7ff ff1a 	bl	8004f60 <__NVIC_GetPriorityGrouping>
 800512c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	68b9      	ldr	r1, [r7, #8]
 8005132:	6978      	ldr	r0, [r7, #20]
 8005134:	f7ff ff8e 	bl	8005054 <NVIC_EncodePriority>
 8005138:	4602      	mov	r2, r0
 800513a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800513e:	4611      	mov	r1, r2
 8005140:	4618      	mov	r0, r3
 8005142:	f7ff ff5d 	bl	8005000 <__NVIC_SetPriority>
}
 8005146:	bf00      	nop
 8005148:	3718      	adds	r7, #24
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b082      	sub	sp, #8
 8005152:	af00      	add	r7, sp, #0
 8005154:	4603      	mov	r3, r0
 8005156:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800515c:	4618      	mov	r0, r3
 800515e:	f7ff ff0d 	bl	8004f7c <__NVIC_EnableIRQ>
}
 8005162:	bf00      	nop
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b082      	sub	sp, #8
 800516e:	af00      	add	r7, sp, #0
 8005170:	4603      	mov	r3, r0
 8005172:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005178:	4618      	mov	r0, r3
 800517a:	f7ff ff1d 	bl	8004fb8 <__NVIC_DisableIRQ>
}
 800517e:	bf00      	nop
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b082      	sub	sp, #8
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7ff ff94 	bl	80050bc <SysTick_Config>
 8005194:	4603      	mov	r3, r0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
	...

080051a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b089      	sub	sp, #36	; 0x24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80051aa:	2300      	movs	r3, #0
 80051ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80051ae:	2300      	movs	r3, #0
 80051b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80051b2:	2300      	movs	r3, #0
 80051b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051b6:	2300      	movs	r3, #0
 80051b8:	61fb      	str	r3, [r7, #28]
 80051ba:	e159      	b.n	8005470 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80051bc:	2201      	movs	r2, #1
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	fa02 f303 	lsl.w	r3, r2, r3
 80051c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	4013      	ands	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	f040 8148 	bne.w	800546a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f003 0303 	and.w	r3, r3, #3
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d005      	beq.n	80051f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d130      	bne.n	8005254 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	2203      	movs	r2, #3
 80051fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005202:	43db      	mvns	r3, r3
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	4013      	ands	r3, r2
 8005208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	68da      	ldr	r2, [r3, #12]
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	005b      	lsls	r3, r3, #1
 8005212:	fa02 f303 	lsl.w	r3, r2, r3
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	4313      	orrs	r3, r2
 800521a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005228:	2201      	movs	r2, #1
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	fa02 f303 	lsl.w	r3, r2, r3
 8005230:	43db      	mvns	r3, r3
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	4013      	ands	r3, r2
 8005236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	091b      	lsrs	r3, r3, #4
 800523e:	f003 0201 	and.w	r2, r3, #1
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	fa02 f303 	lsl.w	r3, r2, r3
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	4313      	orrs	r3, r2
 800524c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f003 0303 	and.w	r3, r3, #3
 800525c:	2b03      	cmp	r3, #3
 800525e:	d017      	beq.n	8005290 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	2203      	movs	r2, #3
 800526c:	fa02 f303 	lsl.w	r3, r2, r3
 8005270:	43db      	mvns	r3, r3
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	4013      	ands	r3, r2
 8005276:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	fa02 f303 	lsl.w	r3, r2, r3
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	4313      	orrs	r3, r2
 8005288:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f003 0303 	and.w	r3, r3, #3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d123      	bne.n	80052e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	08da      	lsrs	r2, r3, #3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	3208      	adds	r2, #8
 80052a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	220f      	movs	r2, #15
 80052b4:	fa02 f303 	lsl.w	r3, r2, r3
 80052b8:	43db      	mvns	r3, r3
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	4013      	ands	r3, r2
 80052be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	691a      	ldr	r2, [r3, #16]
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	f003 0307 	and.w	r3, r3, #7
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	fa02 f303 	lsl.w	r3, r2, r3
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	08da      	lsrs	r2, r3, #3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	3208      	adds	r2, #8
 80052de:	69b9      	ldr	r1, [r7, #24]
 80052e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	2203      	movs	r2, #3
 80052f0:	fa02 f303 	lsl.w	r3, r2, r3
 80052f4:	43db      	mvns	r3, r3
 80052f6:	69ba      	ldr	r2, [r7, #24]
 80052f8:	4013      	ands	r3, r2
 80052fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f003 0203 	and.w	r2, r3, #3
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	005b      	lsls	r3, r3, #1
 8005308:	fa02 f303 	lsl.w	r3, r2, r3
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	4313      	orrs	r3, r2
 8005310:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 80a2 	beq.w	800546a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005326:	2300      	movs	r3, #0
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	4b57      	ldr	r3, [pc, #348]	; (8005488 <HAL_GPIO_Init+0x2e8>)
 800532c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800532e:	4a56      	ldr	r2, [pc, #344]	; (8005488 <HAL_GPIO_Init+0x2e8>)
 8005330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005334:	6453      	str	r3, [r2, #68]	; 0x44
 8005336:	4b54      	ldr	r3, [pc, #336]	; (8005488 <HAL_GPIO_Init+0x2e8>)
 8005338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005342:	4a52      	ldr	r2, [pc, #328]	; (800548c <HAL_GPIO_Init+0x2ec>)
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	089b      	lsrs	r3, r3, #2
 8005348:	3302      	adds	r3, #2
 800534a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800534e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	f003 0303 	and.w	r3, r3, #3
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	220f      	movs	r2, #15
 800535a:	fa02 f303 	lsl.w	r3, r2, r3
 800535e:	43db      	mvns	r3, r3
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	4013      	ands	r3, r2
 8005364:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a49      	ldr	r2, [pc, #292]	; (8005490 <HAL_GPIO_Init+0x2f0>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d019      	beq.n	80053a2 <HAL_GPIO_Init+0x202>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a48      	ldr	r2, [pc, #288]	; (8005494 <HAL_GPIO_Init+0x2f4>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d013      	beq.n	800539e <HAL_GPIO_Init+0x1fe>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a47      	ldr	r2, [pc, #284]	; (8005498 <HAL_GPIO_Init+0x2f8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d00d      	beq.n	800539a <HAL_GPIO_Init+0x1fa>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a46      	ldr	r2, [pc, #280]	; (800549c <HAL_GPIO_Init+0x2fc>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d007      	beq.n	8005396 <HAL_GPIO_Init+0x1f6>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a45      	ldr	r2, [pc, #276]	; (80054a0 <HAL_GPIO_Init+0x300>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d101      	bne.n	8005392 <HAL_GPIO_Init+0x1f2>
 800538e:	2304      	movs	r3, #4
 8005390:	e008      	b.n	80053a4 <HAL_GPIO_Init+0x204>
 8005392:	2307      	movs	r3, #7
 8005394:	e006      	b.n	80053a4 <HAL_GPIO_Init+0x204>
 8005396:	2303      	movs	r3, #3
 8005398:	e004      	b.n	80053a4 <HAL_GPIO_Init+0x204>
 800539a:	2302      	movs	r3, #2
 800539c:	e002      	b.n	80053a4 <HAL_GPIO_Init+0x204>
 800539e:	2301      	movs	r3, #1
 80053a0:	e000      	b.n	80053a4 <HAL_GPIO_Init+0x204>
 80053a2:	2300      	movs	r3, #0
 80053a4:	69fa      	ldr	r2, [r7, #28]
 80053a6:	f002 0203 	and.w	r2, r2, #3
 80053aa:	0092      	lsls	r2, r2, #2
 80053ac:	4093      	lsls	r3, r2
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053b4:	4935      	ldr	r1, [pc, #212]	; (800548c <HAL_GPIO_Init+0x2ec>)
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	089b      	lsrs	r3, r3, #2
 80053ba:	3302      	adds	r3, #2
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053c2:	4b38      	ldr	r3, [pc, #224]	; (80054a4 <HAL_GPIO_Init+0x304>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	43db      	mvns	r3, r3
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	4013      	ands	r3, r2
 80053d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053e6:	4a2f      	ldr	r2, [pc, #188]	; (80054a4 <HAL_GPIO_Init+0x304>)
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053ec:	4b2d      	ldr	r3, [pc, #180]	; (80054a4 <HAL_GPIO_Init+0x304>)
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	43db      	mvns	r3, r3
 80053f6:	69ba      	ldr	r2, [r7, #24]
 80053f8:	4013      	ands	r3, r2
 80053fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d003      	beq.n	8005410 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	4313      	orrs	r3, r2
 800540e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005410:	4a24      	ldr	r2, [pc, #144]	; (80054a4 <HAL_GPIO_Init+0x304>)
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005416:	4b23      	ldr	r3, [pc, #140]	; (80054a4 <HAL_GPIO_Init+0x304>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	43db      	mvns	r3, r3
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	4013      	ands	r3, r2
 8005424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	4313      	orrs	r3, r2
 8005438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800543a:	4a1a      	ldr	r2, [pc, #104]	; (80054a4 <HAL_GPIO_Init+0x304>)
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005440:	4b18      	ldr	r3, [pc, #96]	; (80054a4 <HAL_GPIO_Init+0x304>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	43db      	mvns	r3, r3
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	4013      	ands	r3, r2
 800544e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	4313      	orrs	r3, r2
 8005462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005464:	4a0f      	ldr	r2, [pc, #60]	; (80054a4 <HAL_GPIO_Init+0x304>)
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	3301      	adds	r3, #1
 800546e:	61fb      	str	r3, [r7, #28]
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	2b0f      	cmp	r3, #15
 8005474:	f67f aea2 	bls.w	80051bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005478:	bf00      	nop
 800547a:	bf00      	nop
 800547c:	3724      	adds	r7, #36	; 0x24
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	40023800 	.word	0x40023800
 800548c:	40013800 	.word	0x40013800
 8005490:	40020000 	.word	0x40020000
 8005494:	40020400 	.word	0x40020400
 8005498:	40020800 	.word	0x40020800
 800549c:	40020c00 	.word	0x40020c00
 80054a0:	40021000 	.word	0x40021000
 80054a4:	40013c00 	.word	0x40013c00

080054a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	460b      	mov	r3, r1
 80054b2:	807b      	strh	r3, [r7, #2]
 80054b4:	4613      	mov	r3, r2
 80054b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054b8:	787b      	ldrb	r3, [r7, #1]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054be:	887a      	ldrh	r2, [r7, #2]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80054c4:	e003      	b.n	80054ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80054c6:	887b      	ldrh	r3, [r7, #2]
 80054c8:	041a      	lsls	r2, r3, #16
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	619a      	str	r2, [r3, #24]
}
 80054ce:	bf00      	nop
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
	...

080054dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	4603      	mov	r3, r0
 80054e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80054e6:	4b08      	ldr	r3, [pc, #32]	; (8005508 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054e8:	695a      	ldr	r2, [r3, #20]
 80054ea:	88fb      	ldrh	r3, [r7, #6]
 80054ec:	4013      	ands	r3, r2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d006      	beq.n	8005500 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054f2:	4a05      	ldr	r2, [pc, #20]	; (8005508 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054f4:	88fb      	ldrh	r3, [r7, #6]
 80054f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054f8:	88fb      	ldrh	r3, [r7, #6]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7ff fb26 	bl	8004b4c <HAL_GPIO_EXTI_Callback>
  }
}
 8005500:	bf00      	nop
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	40013c00 	.word	0x40013c00

0800550c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e12b      	b.n	8005776 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d106      	bne.n	8005538 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7fc ff74 	bl	8002420 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2224      	movs	r2, #36	; 0x24
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 0201 	bic.w	r2, r2, #1
 800554e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800555e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800556e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005570:	f001 f91a 	bl	80067a8 <HAL_RCC_GetPCLK1Freq>
 8005574:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	4a81      	ldr	r2, [pc, #516]	; (8005780 <HAL_I2C_Init+0x274>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d807      	bhi.n	8005590 <HAL_I2C_Init+0x84>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4a80      	ldr	r2, [pc, #512]	; (8005784 <HAL_I2C_Init+0x278>)
 8005584:	4293      	cmp	r3, r2
 8005586:	bf94      	ite	ls
 8005588:	2301      	movls	r3, #1
 800558a:	2300      	movhi	r3, #0
 800558c:	b2db      	uxtb	r3, r3
 800558e:	e006      	b.n	800559e <HAL_I2C_Init+0x92>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4a7d      	ldr	r2, [pc, #500]	; (8005788 <HAL_I2C_Init+0x27c>)
 8005594:	4293      	cmp	r3, r2
 8005596:	bf94      	ite	ls
 8005598:	2301      	movls	r3, #1
 800559a:	2300      	movhi	r3, #0
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e0e7      	b.n	8005776 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	4a78      	ldr	r2, [pc, #480]	; (800578c <HAL_I2C_Init+0x280>)
 80055aa:	fba2 2303 	umull	r2, r3, r2, r3
 80055ae:	0c9b      	lsrs	r3, r3, #18
 80055b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	4a6a      	ldr	r2, [pc, #424]	; (8005780 <HAL_I2C_Init+0x274>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d802      	bhi.n	80055e0 <HAL_I2C_Init+0xd4>
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	3301      	adds	r3, #1
 80055de:	e009      	b.n	80055f4 <HAL_I2C_Init+0xe8>
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80055e6:	fb02 f303 	mul.w	r3, r2, r3
 80055ea:	4a69      	ldr	r2, [pc, #420]	; (8005790 <HAL_I2C_Init+0x284>)
 80055ec:	fba2 2303 	umull	r2, r3, r2, r3
 80055f0:	099b      	lsrs	r3, r3, #6
 80055f2:	3301      	adds	r3, #1
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	6812      	ldr	r2, [r2, #0]
 80055f8:	430b      	orrs	r3, r1
 80055fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005606:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	495c      	ldr	r1, [pc, #368]	; (8005780 <HAL_I2C_Init+0x274>)
 8005610:	428b      	cmp	r3, r1
 8005612:	d819      	bhi.n	8005648 <HAL_I2C_Init+0x13c>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	1e59      	subs	r1, r3, #1
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	005b      	lsls	r3, r3, #1
 800561e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005622:	1c59      	adds	r1, r3, #1
 8005624:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005628:	400b      	ands	r3, r1
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00a      	beq.n	8005644 <HAL_I2C_Init+0x138>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	1e59      	subs	r1, r3, #1
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	fbb1 f3f3 	udiv	r3, r1, r3
 800563c:	3301      	adds	r3, #1
 800563e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005642:	e051      	b.n	80056e8 <HAL_I2C_Init+0x1dc>
 8005644:	2304      	movs	r3, #4
 8005646:	e04f      	b.n	80056e8 <HAL_I2C_Init+0x1dc>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d111      	bne.n	8005674 <HAL_I2C_Init+0x168>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	1e58      	subs	r0, r3, #1
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6859      	ldr	r1, [r3, #4]
 8005658:	460b      	mov	r3, r1
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	440b      	add	r3, r1
 800565e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005662:	3301      	adds	r3, #1
 8005664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005668:	2b00      	cmp	r3, #0
 800566a:	bf0c      	ite	eq
 800566c:	2301      	moveq	r3, #1
 800566e:	2300      	movne	r3, #0
 8005670:	b2db      	uxtb	r3, r3
 8005672:	e012      	b.n	800569a <HAL_I2C_Init+0x18e>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	1e58      	subs	r0, r3, #1
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6859      	ldr	r1, [r3, #4]
 800567c:	460b      	mov	r3, r1
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	440b      	add	r3, r1
 8005682:	0099      	lsls	r1, r3, #2
 8005684:	440b      	add	r3, r1
 8005686:	fbb0 f3f3 	udiv	r3, r0, r3
 800568a:	3301      	adds	r3, #1
 800568c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005690:	2b00      	cmp	r3, #0
 8005692:	bf0c      	ite	eq
 8005694:	2301      	moveq	r3, #1
 8005696:	2300      	movne	r3, #0
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <HAL_I2C_Init+0x196>
 800569e:	2301      	movs	r3, #1
 80056a0:	e022      	b.n	80056e8 <HAL_I2C_Init+0x1dc>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10e      	bne.n	80056c8 <HAL_I2C_Init+0x1bc>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	1e58      	subs	r0, r3, #1
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6859      	ldr	r1, [r3, #4]
 80056b2:	460b      	mov	r3, r1
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	440b      	add	r3, r1
 80056b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80056bc:	3301      	adds	r3, #1
 80056be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056c6:	e00f      	b.n	80056e8 <HAL_I2C_Init+0x1dc>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	1e58      	subs	r0, r3, #1
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6859      	ldr	r1, [r3, #4]
 80056d0:	460b      	mov	r3, r1
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	440b      	add	r3, r1
 80056d6:	0099      	lsls	r1, r3, #2
 80056d8:	440b      	add	r3, r1
 80056da:	fbb0 f3f3 	udiv	r3, r0, r3
 80056de:	3301      	adds	r3, #1
 80056e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056e8:	6879      	ldr	r1, [r7, #4]
 80056ea:	6809      	ldr	r1, [r1, #0]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	69da      	ldr	r2, [r3, #28]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	431a      	orrs	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005716:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	6911      	ldr	r1, [r2, #16]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	68d2      	ldr	r2, [r2, #12]
 8005722:	4311      	orrs	r1, r2
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6812      	ldr	r2, [r2, #0]
 8005728:	430b      	orrs	r3, r1
 800572a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	695a      	ldr	r2, [r3, #20]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	431a      	orrs	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	430a      	orrs	r2, r1
 8005746:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f042 0201 	orr.w	r2, r2, #1
 8005756:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2220      	movs	r2, #32
 8005762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	000186a0 	.word	0x000186a0
 8005784:	001e847f 	.word	0x001e847f
 8005788:	003d08ff 	.word	0x003d08ff
 800578c:	431bde83 	.word	0x431bde83
 8005790:	10624dd3 	.word	0x10624dd3

08005794 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b088      	sub	sp, #32
 8005798:	af02      	add	r7, sp, #8
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	607a      	str	r2, [r7, #4]
 800579e:	461a      	mov	r2, r3
 80057a0:	460b      	mov	r3, r1
 80057a2:	817b      	strh	r3, [r7, #10]
 80057a4:	4613      	mov	r3, r2
 80057a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80057a8:	f7ff fb86 	bl	8004eb8 <HAL_GetTick>
 80057ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b20      	cmp	r3, #32
 80057b8:	f040 80e0 	bne.w	800597c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	2319      	movs	r3, #25
 80057c2:	2201      	movs	r2, #1
 80057c4:	4970      	ldr	r1, [pc, #448]	; (8005988 <HAL_I2C_Master_Transmit+0x1f4>)
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f000 fc58 	bl	800607c <I2C_WaitOnFlagUntilTimeout>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80057d2:	2302      	movs	r3, #2
 80057d4:	e0d3      	b.n	800597e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d101      	bne.n	80057e4 <HAL_I2C_Master_Transmit+0x50>
 80057e0:	2302      	movs	r3, #2
 80057e2:	e0cc      	b.n	800597e <HAL_I2C_Master_Transmit+0x1ea>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d007      	beq.n	800580a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f042 0201 	orr.w	r2, r2, #1
 8005808:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005818:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2221      	movs	r2, #33	; 0x21
 800581e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2210      	movs	r2, #16
 8005826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	893a      	ldrh	r2, [r7, #8]
 800583a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005840:	b29a      	uxth	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	4a50      	ldr	r2, [pc, #320]	; (800598c <HAL_I2C_Master_Transmit+0x1f8>)
 800584a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800584c:	8979      	ldrh	r1, [r7, #10]
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	6a3a      	ldr	r2, [r7, #32]
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f000 fac2 	bl	8005ddc <I2C_MasterRequestWrite>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e08d      	b.n	800597e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005862:	2300      	movs	r3, #0
 8005864:	613b      	str	r3, [r7, #16]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	613b      	str	r3, [r7, #16]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	613b      	str	r3, [r7, #16]
 8005876:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005878:	e066      	b.n	8005948 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	6a39      	ldr	r1, [r7, #32]
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	f000 fcd2 	bl	8006228 <I2C_WaitOnTXEFlagUntilTimeout>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00d      	beq.n	80058a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	2b04      	cmp	r3, #4
 8005890:	d107      	bne.n	80058a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e06b      	b.n	800597e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	781a      	ldrb	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b6:	1c5a      	adds	r2, r3, #1
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	3b01      	subs	r3, #1
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ce:	3b01      	subs	r3, #1
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d11b      	bne.n	800591c <HAL_I2C_Master_Transmit+0x188>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d017      	beq.n	800591c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	781a      	ldrb	r2, [r3, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	1c5a      	adds	r2, r3, #1
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005906:	b29b      	uxth	r3, r3
 8005908:	3b01      	subs	r3, #1
 800590a:	b29a      	uxth	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005914:	3b01      	subs	r3, #1
 8005916:	b29a      	uxth	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	6a39      	ldr	r1, [r7, #32]
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f000 fcc2 	bl	80062aa <I2C_WaitOnBTFFlagUntilTimeout>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00d      	beq.n	8005948 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005930:	2b04      	cmp	r3, #4
 8005932:	d107      	bne.n	8005944 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005942:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e01a      	b.n	800597e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800594c:	2b00      	cmp	r3, #0
 800594e:	d194      	bne.n	800587a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800595e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2220      	movs	r2, #32
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005978:	2300      	movs	r3, #0
 800597a:	e000      	b.n	800597e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800597c:	2302      	movs	r3, #2
  }
}
 800597e:	4618      	mov	r0, r3
 8005980:	3718      	adds	r7, #24
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	00100002 	.word	0x00100002
 800598c:	ffff0000 	.word	0xffff0000

08005990 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b08c      	sub	sp, #48	; 0x30
 8005994:	af02      	add	r7, sp, #8
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	607a      	str	r2, [r7, #4]
 800599a:	461a      	mov	r2, r3
 800599c:	460b      	mov	r3, r1
 800599e:	817b      	strh	r3, [r7, #10]
 80059a0:	4613      	mov	r3, r2
 80059a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80059a4:	f7ff fa88 	bl	8004eb8 <HAL_GetTick>
 80059a8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b20      	cmp	r3, #32
 80059b4:	f040 820b 	bne.w	8005dce <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	2319      	movs	r3, #25
 80059be:	2201      	movs	r2, #1
 80059c0:	497c      	ldr	r1, [pc, #496]	; (8005bb4 <HAL_I2C_Master_Receive+0x224>)
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f000 fb5a 	bl	800607c <I2C_WaitOnFlagUntilTimeout>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80059ce:	2302      	movs	r3, #2
 80059d0:	e1fe      	b.n	8005dd0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d101      	bne.n	80059e0 <HAL_I2C_Master_Receive+0x50>
 80059dc:	2302      	movs	r3, #2
 80059de:	e1f7      	b.n	8005dd0 <HAL_I2C_Master_Receive+0x440>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d007      	beq.n	8005a06 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f042 0201 	orr.w	r2, r2, #1
 8005a04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2222      	movs	r2, #34	; 0x22
 8005a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2210      	movs	r2, #16
 8005a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	893a      	ldrh	r2, [r7, #8]
 8005a36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4a5c      	ldr	r2, [pc, #368]	; (8005bb8 <HAL_I2C_Master_Receive+0x228>)
 8005a46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005a48:	8979      	ldrh	r1, [r7, #10]
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f000 fa46 	bl	8005ee0 <I2C_MasterRequestRead>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e1b8      	b.n	8005dd0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d113      	bne.n	8005a8e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a66:	2300      	movs	r3, #0
 8005a68:	623b      	str	r3, [r7, #32]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	623b      	str	r3, [r7, #32]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	623b      	str	r3, [r7, #32]
 8005a7a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a8a:	601a      	str	r2, [r3, #0]
 8005a8c:	e18c      	b.n	8005da8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d11b      	bne.n	8005ace <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aa4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	61fb      	str	r3, [r7, #28]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	61fb      	str	r3, [r7, #28]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	61fb      	str	r3, [r7, #28]
 8005aba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	e16c      	b.n	8005da8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d11b      	bne.n	8005b0e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ae4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005af4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005af6:	2300      	movs	r3, #0
 8005af8:	61bb      	str	r3, [r7, #24]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	61bb      	str	r3, [r7, #24]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	61bb      	str	r3, [r7, #24]
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	e14c      	b.n	8005da8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b1e:	2300      	movs	r3, #0
 8005b20:	617b      	str	r3, [r7, #20]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	617b      	str	r3, [r7, #20]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	617b      	str	r3, [r7, #20]
 8005b32:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005b34:	e138      	b.n	8005da8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b3a:	2b03      	cmp	r3, #3
 8005b3c:	f200 80f1 	bhi.w	8005d22 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d123      	bne.n	8005b90 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 fbed 	bl	800632c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d001      	beq.n	8005b5c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e139      	b.n	8005dd0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	691a      	ldr	r2, [r3, #16]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	b2d2      	uxtb	r2, r2
 8005b68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6e:	1c5a      	adds	r2, r3, #1
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	3b01      	subs	r3, #1
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b8e:	e10b      	b.n	8005da8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d14e      	bne.n	8005c36 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	4906      	ldr	r1, [pc, #24]	; (8005bbc <HAL_I2C_Master_Receive+0x22c>)
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 fa6a 	bl	800607c <I2C_WaitOnFlagUntilTimeout>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d008      	beq.n	8005bc0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e10e      	b.n	8005dd0 <HAL_I2C_Master_Receive+0x440>
 8005bb2:	bf00      	nop
 8005bb4:	00100002 	.word	0x00100002
 8005bb8:	ffff0000 	.word	0xffff0000
 8005bbc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	691a      	ldr	r2, [r3, #16]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bda:	b2d2      	uxtb	r2, r2
 8005bdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	1c5a      	adds	r2, r3, #1
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bec:	3b01      	subs	r3, #1
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	691a      	ldr	r2, [r3, #16]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0c:	b2d2      	uxtb	r2, r2
 8005c0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c14:	1c5a      	adds	r2, r3, #1
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c34:	e0b8      	b.n	8005da8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	4966      	ldr	r1, [pc, #408]	; (8005dd8 <HAL_I2C_Master_Receive+0x448>)
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 fa1b 	bl	800607c <I2C_WaitOnFlagUntilTimeout>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e0bf      	b.n	8005dd0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	691a      	ldr	r2, [r3, #16]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6a:	b2d2      	uxtb	r2, r2
 8005c6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	1c5a      	adds	r2, r3, #1
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c98:	2200      	movs	r2, #0
 8005c9a:	494f      	ldr	r1, [pc, #316]	; (8005dd8 <HAL_I2C_Master_Receive+0x448>)
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f000 f9ed 	bl	800607c <I2C_WaitOnFlagUntilTimeout>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e091      	b.n	8005dd0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	691a      	ldr	r2, [r3, #16]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc6:	b2d2      	uxtb	r2, r2
 8005cc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	1c5a      	adds	r2, r3, #1
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	691a      	ldr	r2, [r3, #16]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf8:	b2d2      	uxtb	r2, r2
 8005cfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	1c5a      	adds	r2, r3, #1
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d20:	e042      	b.n	8005da8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 fb00 	bl	800632c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e04c      	b.n	8005dd0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	691a      	ldr	r2, [r3, #16]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	b2d2      	uxtb	r2, r2
 8005d42:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	1c5a      	adds	r2, r3, #1
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d52:	3b01      	subs	r3, #1
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	3b01      	subs	r3, #1
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	f003 0304 	and.w	r3, r3, #4
 8005d72:	2b04      	cmp	r3, #4
 8005d74:	d118      	bne.n	8005da8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	691a      	ldr	r2, [r3, #16]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	b2d2      	uxtb	r2, r2
 8005d82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	1c5a      	adds	r2, r3, #1
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d92:	3b01      	subs	r3, #1
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	3b01      	subs	r3, #1
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f47f aec2 	bne.w	8005b36 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2220      	movs	r2, #32
 8005db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	e000      	b.n	8005dd0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005dce:	2302      	movs	r3, #2
  }
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3728      	adds	r7, #40	; 0x28
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	00010004 	.word	0x00010004

08005ddc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b088      	sub	sp, #32
 8005de0:	af02      	add	r7, sp, #8
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	607a      	str	r2, [r7, #4]
 8005de6:	603b      	str	r3, [r7, #0]
 8005de8:	460b      	mov	r3, r1
 8005dea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	2b08      	cmp	r3, #8
 8005df6:	d006      	beq.n	8005e06 <I2C_MasterRequestWrite+0x2a>
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d003      	beq.n	8005e06 <I2C_MasterRequestWrite+0x2a>
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e04:	d108      	bne.n	8005e18 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	e00b      	b.n	8005e30 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1c:	2b12      	cmp	r3, #18
 8005e1e:	d107      	bne.n	8005e30 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f000 f91d 	bl	800607c <I2C_WaitOnFlagUntilTimeout>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00d      	beq.n	8005e64 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e56:	d103      	bne.n	8005e60 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e035      	b.n	8005ed0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e6c:	d108      	bne.n	8005e80 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e6e:	897b      	ldrh	r3, [r7, #10]
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	461a      	mov	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e7c:	611a      	str	r2, [r3, #16]
 8005e7e:	e01b      	b.n	8005eb8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005e80:	897b      	ldrh	r3, [r7, #10]
 8005e82:	11db      	asrs	r3, r3, #7
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	f003 0306 	and.w	r3, r3, #6
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	f063 030f 	orn	r3, r3, #15
 8005e90:	b2da      	uxtb	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	490e      	ldr	r1, [pc, #56]	; (8005ed8 <I2C_MasterRequestWrite+0xfc>)
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 f943 	bl	800612a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e010      	b.n	8005ed0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005eae:	897b      	ldrh	r3, [r7, #10]
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	4907      	ldr	r1, [pc, #28]	; (8005edc <I2C_MasterRequestWrite+0x100>)
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f000 f933 	bl	800612a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d001      	beq.n	8005ece <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e000      	b.n	8005ed0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3718      	adds	r7, #24
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	00010008 	.word	0x00010008
 8005edc:	00010002 	.word	0x00010002

08005ee0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b088      	sub	sp, #32
 8005ee4:	af02      	add	r7, sp, #8
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	607a      	str	r2, [r7, #4]
 8005eea:	603b      	str	r3, [r7, #0]
 8005eec:	460b      	mov	r3, r1
 8005eee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f04:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	2b08      	cmp	r3, #8
 8005f0a:	d006      	beq.n	8005f1a <I2C_MasterRequestRead+0x3a>
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d003      	beq.n	8005f1a <I2C_MasterRequestRead+0x3a>
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f18:	d108      	bne.n	8005f2c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	e00b      	b.n	8005f44 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f30:	2b11      	cmp	r3, #17
 8005f32:	d107      	bne.n	8005f44 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 f893 	bl	800607c <I2C_WaitOnFlagUntilTimeout>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00d      	beq.n	8005f78 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f6a:	d103      	bne.n	8005f74 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e079      	b.n	800606c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f80:	d108      	bne.n	8005f94 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005f82:	897b      	ldrh	r3, [r7, #10]
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	f043 0301 	orr.w	r3, r3, #1
 8005f8a:	b2da      	uxtb	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	611a      	str	r2, [r3, #16]
 8005f92:	e05f      	b.n	8006054 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005f94:	897b      	ldrh	r3, [r7, #10]
 8005f96:	11db      	asrs	r3, r3, #7
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	f003 0306 	and.w	r3, r3, #6
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	f063 030f 	orn	r3, r3, #15
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	4930      	ldr	r1, [pc, #192]	; (8006074 <I2C_MasterRequestRead+0x194>)
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f000 f8b9 	bl	800612a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e054      	b.n	800606c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005fc2:	897b      	ldrh	r3, [r7, #10]
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	4929      	ldr	r1, [pc, #164]	; (8006078 <I2C_MasterRequestRead+0x198>)
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f000 f8a9 	bl	800612a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e044      	b.n	800606c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	613b      	str	r3, [r7, #16]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	613b      	str	r3, [r7, #16]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	613b      	str	r3, [r7, #16]
 8005ff6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006006:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f000 f831 	bl	800607c <I2C_WaitOnFlagUntilTimeout>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00d      	beq.n	800603c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800602e:	d103      	bne.n	8006038 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006036:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e017      	b.n	800606c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800603c:	897b      	ldrh	r3, [r7, #10]
 800603e:	11db      	asrs	r3, r3, #7
 8006040:	b2db      	uxtb	r3, r3
 8006042:	f003 0306 	and.w	r3, r3, #6
 8006046:	b2db      	uxtb	r3, r3
 8006048:	f063 030e 	orn	r3, r3, #14
 800604c:	b2da      	uxtb	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	4907      	ldr	r1, [pc, #28]	; (8006078 <I2C_MasterRequestRead+0x198>)
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f000 f865 	bl	800612a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e000      	b.n	800606c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3718      	adds	r7, #24
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	00010008 	.word	0x00010008
 8006078:	00010002 	.word	0x00010002

0800607c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	603b      	str	r3, [r7, #0]
 8006088:	4613      	mov	r3, r2
 800608a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800608c:	e025      	b.n	80060da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006094:	d021      	beq.n	80060da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006096:	f7fe ff0f 	bl	8004eb8 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	683a      	ldr	r2, [r7, #0]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d302      	bcc.n	80060ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d116      	bne.n	80060da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2220      	movs	r2, #32
 80060b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c6:	f043 0220 	orr.w	r2, r3, #32
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e023      	b.n	8006122 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	0c1b      	lsrs	r3, r3, #16
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d10d      	bne.n	8006100 <I2C_WaitOnFlagUntilTimeout+0x84>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	43da      	mvns	r2, r3
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	4013      	ands	r3, r2
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	bf0c      	ite	eq
 80060f6:	2301      	moveq	r3, #1
 80060f8:	2300      	movne	r3, #0
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	461a      	mov	r2, r3
 80060fe:	e00c      	b.n	800611a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	43da      	mvns	r2, r3
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	4013      	ands	r3, r2
 800610c:	b29b      	uxth	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	bf0c      	ite	eq
 8006112:	2301      	moveq	r3, #1
 8006114:	2300      	movne	r3, #0
 8006116:	b2db      	uxtb	r3, r3
 8006118:	461a      	mov	r2, r3
 800611a:	79fb      	ldrb	r3, [r7, #7]
 800611c:	429a      	cmp	r2, r3
 800611e:	d0b6      	beq.n	800608e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b084      	sub	sp, #16
 800612e:	af00      	add	r7, sp, #0
 8006130:	60f8      	str	r0, [r7, #12]
 8006132:	60b9      	str	r1, [r7, #8]
 8006134:	607a      	str	r2, [r7, #4]
 8006136:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006138:	e051      	b.n	80061de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	695b      	ldr	r3, [r3, #20]
 8006140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006148:	d123      	bne.n	8006192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006158:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006162:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2220      	movs	r2, #32
 800616e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617e:	f043 0204 	orr.w	r2, r3, #4
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e046      	b.n	8006220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006198:	d021      	beq.n	80061de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800619a:	f7fe fe8d 	bl	8004eb8 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d302      	bcc.n	80061b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d116      	bne.n	80061de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2220      	movs	r2, #32
 80061ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ca:	f043 0220 	orr.w	r2, r3, #32
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e020      	b.n	8006220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	0c1b      	lsrs	r3, r3, #16
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d10c      	bne.n	8006202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	43da      	mvns	r2, r3
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	4013      	ands	r3, r2
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	bf14      	ite	ne
 80061fa:	2301      	movne	r3, #1
 80061fc:	2300      	moveq	r3, #0
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	e00b      	b.n	800621a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	43da      	mvns	r2, r3
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	4013      	ands	r3, r2
 800620e:	b29b      	uxth	r3, r3
 8006210:	2b00      	cmp	r3, #0
 8006212:	bf14      	ite	ne
 8006214:	2301      	movne	r3, #1
 8006216:	2300      	moveq	r3, #0
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d18d      	bne.n	800613a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006234:	e02d      	b.n	8006292 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f000 f8ce 	bl	80063d8 <I2C_IsAcknowledgeFailed>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e02d      	b.n	80062a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800624c:	d021      	beq.n	8006292 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800624e:	f7fe fe33 	bl	8004eb8 <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	429a      	cmp	r2, r3
 800625c:	d302      	bcc.n	8006264 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d116      	bne.n	8006292 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2220      	movs	r2, #32
 800626e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627e:	f043 0220 	orr.w	r2, r3, #32
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e007      	b.n	80062a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800629c:	2b80      	cmp	r3, #128	; 0x80
 800629e:	d1ca      	bne.n	8006236 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b084      	sub	sp, #16
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	60f8      	str	r0, [r7, #12]
 80062b2:	60b9      	str	r1, [r7, #8]
 80062b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062b6:	e02d      	b.n	8006314 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f000 f88d 	bl	80063d8 <I2C_IsAcknowledgeFailed>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e02d      	b.n	8006324 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ce:	d021      	beq.n	8006314 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062d0:	f7fe fdf2 	bl	8004eb8 <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d302      	bcc.n	80062e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d116      	bne.n	8006314 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2220      	movs	r2, #32
 80062f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006300:	f043 0220 	orr.w	r2, r3, #32
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e007      	b.n	8006324 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	f003 0304 	and.w	r3, r3, #4
 800631e:	2b04      	cmp	r3, #4
 8006320:	d1ca      	bne.n	80062b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3710      	adds	r7, #16
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006338:	e042      	b.n	80063c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	f003 0310 	and.w	r3, r3, #16
 8006344:	2b10      	cmp	r3, #16
 8006346:	d119      	bne.n	800637c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f06f 0210 	mvn.w	r2, #16
 8006350:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2220      	movs	r2, #32
 800635c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e029      	b.n	80063d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800637c:	f7fe fd9c 	bl	8004eb8 <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	429a      	cmp	r2, r3
 800638a:	d302      	bcc.n	8006392 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d116      	bne.n	80063c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2220      	movs	r2, #32
 800639c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ac:	f043 0220 	orr.w	r2, r3, #32
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e007      	b.n	80063d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ca:	2b40      	cmp	r3, #64	; 0x40
 80063cc:	d1b5      	bne.n	800633a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063ee:	d11b      	bne.n	8006428 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2220      	movs	r2, #32
 8006404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006414:	f043 0204 	orr.w	r2, r3, #4
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e000      	b.n	800642a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
	...

08006438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e0cc      	b.n	80065e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800644c:	4b68      	ldr	r3, [pc, #416]	; (80065f0 <HAL_RCC_ClockConfig+0x1b8>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0307 	and.w	r3, r3, #7
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	429a      	cmp	r2, r3
 8006458:	d90c      	bls.n	8006474 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800645a:	4b65      	ldr	r3, [pc, #404]	; (80065f0 <HAL_RCC_ClockConfig+0x1b8>)
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	b2d2      	uxtb	r2, r2
 8006460:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006462:	4b63      	ldr	r3, [pc, #396]	; (80065f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 0307 	and.w	r3, r3, #7
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	429a      	cmp	r2, r3
 800646e:	d001      	beq.n	8006474 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e0b8      	b.n	80065e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0302 	and.w	r3, r3, #2
 800647c:	2b00      	cmp	r3, #0
 800647e:	d020      	beq.n	80064c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0304 	and.w	r3, r3, #4
 8006488:	2b00      	cmp	r3, #0
 800648a:	d005      	beq.n	8006498 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800648c:	4b59      	ldr	r3, [pc, #356]	; (80065f4 <HAL_RCC_ClockConfig+0x1bc>)
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	4a58      	ldr	r2, [pc, #352]	; (80065f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006492:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006496:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0308 	and.w	r3, r3, #8
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d005      	beq.n	80064b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064a4:	4b53      	ldr	r3, [pc, #332]	; (80065f4 <HAL_RCC_ClockConfig+0x1bc>)
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	4a52      	ldr	r2, [pc, #328]	; (80065f4 <HAL_RCC_ClockConfig+0x1bc>)
 80064aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064b0:	4b50      	ldr	r3, [pc, #320]	; (80065f4 <HAL_RCC_ClockConfig+0x1bc>)
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	494d      	ldr	r1, [pc, #308]	; (80065f4 <HAL_RCC_ClockConfig+0x1bc>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d044      	beq.n	8006558 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d107      	bne.n	80064e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064d6:	4b47      	ldr	r3, [pc, #284]	; (80065f4 <HAL_RCC_ClockConfig+0x1bc>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d119      	bne.n	8006516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e07f      	b.n	80065e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d003      	beq.n	80064f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064f2:	2b03      	cmp	r3, #3
 80064f4:	d107      	bne.n	8006506 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064f6:	4b3f      	ldr	r3, [pc, #252]	; (80065f4 <HAL_RCC_ClockConfig+0x1bc>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d109      	bne.n	8006516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e06f      	b.n	80065e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006506:	4b3b      	ldr	r3, [pc, #236]	; (80065f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e067      	b.n	80065e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006516:	4b37      	ldr	r3, [pc, #220]	; (80065f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f023 0203 	bic.w	r2, r3, #3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	4934      	ldr	r1, [pc, #208]	; (80065f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006524:	4313      	orrs	r3, r2
 8006526:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006528:	f7fe fcc6 	bl	8004eb8 <HAL_GetTick>
 800652c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800652e:	e00a      	b.n	8006546 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006530:	f7fe fcc2 	bl	8004eb8 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	f241 3288 	movw	r2, #5000	; 0x1388
 800653e:	4293      	cmp	r3, r2
 8006540:	d901      	bls.n	8006546 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e04f      	b.n	80065e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006546:	4b2b      	ldr	r3, [pc, #172]	; (80065f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f003 020c 	and.w	r2, r3, #12
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	429a      	cmp	r2, r3
 8006556:	d1eb      	bne.n	8006530 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006558:	4b25      	ldr	r3, [pc, #148]	; (80065f0 <HAL_RCC_ClockConfig+0x1b8>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0307 	and.w	r3, r3, #7
 8006560:	683a      	ldr	r2, [r7, #0]
 8006562:	429a      	cmp	r2, r3
 8006564:	d20c      	bcs.n	8006580 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006566:	4b22      	ldr	r3, [pc, #136]	; (80065f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006568:	683a      	ldr	r2, [r7, #0]
 800656a:	b2d2      	uxtb	r2, r2
 800656c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800656e:	4b20      	ldr	r3, [pc, #128]	; (80065f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0307 	and.w	r3, r3, #7
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	429a      	cmp	r2, r3
 800657a:	d001      	beq.n	8006580 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e032      	b.n	80065e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0304 	and.w	r3, r3, #4
 8006588:	2b00      	cmp	r3, #0
 800658a:	d008      	beq.n	800659e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800658c:	4b19      	ldr	r3, [pc, #100]	; (80065f4 <HAL_RCC_ClockConfig+0x1bc>)
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	4916      	ldr	r1, [pc, #88]	; (80065f4 <HAL_RCC_ClockConfig+0x1bc>)
 800659a:	4313      	orrs	r3, r2
 800659c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0308 	and.w	r3, r3, #8
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d009      	beq.n	80065be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065aa:	4b12      	ldr	r3, [pc, #72]	; (80065f4 <HAL_RCC_ClockConfig+0x1bc>)
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	00db      	lsls	r3, r3, #3
 80065b8:	490e      	ldr	r1, [pc, #56]	; (80065f4 <HAL_RCC_ClockConfig+0x1bc>)
 80065ba:	4313      	orrs	r3, r2
 80065bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065be:	f000 f821 	bl	8006604 <HAL_RCC_GetSysClockFreq>
 80065c2:	4602      	mov	r2, r0
 80065c4:	4b0b      	ldr	r3, [pc, #44]	; (80065f4 <HAL_RCC_ClockConfig+0x1bc>)
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	091b      	lsrs	r3, r3, #4
 80065ca:	f003 030f 	and.w	r3, r3, #15
 80065ce:	490a      	ldr	r1, [pc, #40]	; (80065f8 <HAL_RCC_ClockConfig+0x1c0>)
 80065d0:	5ccb      	ldrb	r3, [r1, r3]
 80065d2:	fa22 f303 	lsr.w	r3, r2, r3
 80065d6:	4a09      	ldr	r2, [pc, #36]	; (80065fc <HAL_RCC_ClockConfig+0x1c4>)
 80065d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80065da:	4b09      	ldr	r3, [pc, #36]	; (8006600 <HAL_RCC_ClockConfig+0x1c8>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4618      	mov	r0, r3
 80065e0:	f7fe fc26 	bl	8004e30 <HAL_InitTick>

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	40023c00 	.word	0x40023c00
 80065f4:	40023800 	.word	0x40023800
 80065f8:	08008be4 	.word	0x08008be4
 80065fc:	20000010 	.word	0x20000010
 8006600:	20000290 	.word	0x20000290

08006604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006608:	b090      	sub	sp, #64	; 0x40
 800660a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	637b      	str	r3, [r7, #52]	; 0x34
 8006610:	2300      	movs	r3, #0
 8006612:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006614:	2300      	movs	r3, #0
 8006616:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006618:	2300      	movs	r3, #0
 800661a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800661c:	4b59      	ldr	r3, [pc, #356]	; (8006784 <HAL_RCC_GetSysClockFreq+0x180>)
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f003 030c 	and.w	r3, r3, #12
 8006624:	2b08      	cmp	r3, #8
 8006626:	d00d      	beq.n	8006644 <HAL_RCC_GetSysClockFreq+0x40>
 8006628:	2b08      	cmp	r3, #8
 800662a:	f200 80a1 	bhi.w	8006770 <HAL_RCC_GetSysClockFreq+0x16c>
 800662e:	2b00      	cmp	r3, #0
 8006630:	d002      	beq.n	8006638 <HAL_RCC_GetSysClockFreq+0x34>
 8006632:	2b04      	cmp	r3, #4
 8006634:	d003      	beq.n	800663e <HAL_RCC_GetSysClockFreq+0x3a>
 8006636:	e09b      	b.n	8006770 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006638:	4b53      	ldr	r3, [pc, #332]	; (8006788 <HAL_RCC_GetSysClockFreq+0x184>)
 800663a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800663c:	e09b      	b.n	8006776 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800663e:	4b53      	ldr	r3, [pc, #332]	; (800678c <HAL_RCC_GetSysClockFreq+0x188>)
 8006640:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006642:	e098      	b.n	8006776 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006644:	4b4f      	ldr	r3, [pc, #316]	; (8006784 <HAL_RCC_GetSysClockFreq+0x180>)
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800664c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800664e:	4b4d      	ldr	r3, [pc, #308]	; (8006784 <HAL_RCC_GetSysClockFreq+0x180>)
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d028      	beq.n	80066ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800665a:	4b4a      	ldr	r3, [pc, #296]	; (8006784 <HAL_RCC_GetSysClockFreq+0x180>)
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	099b      	lsrs	r3, r3, #6
 8006660:	2200      	movs	r2, #0
 8006662:	623b      	str	r3, [r7, #32]
 8006664:	627a      	str	r2, [r7, #36]	; 0x24
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800666c:	2100      	movs	r1, #0
 800666e:	4b47      	ldr	r3, [pc, #284]	; (800678c <HAL_RCC_GetSysClockFreq+0x188>)
 8006670:	fb03 f201 	mul.w	r2, r3, r1
 8006674:	2300      	movs	r3, #0
 8006676:	fb00 f303 	mul.w	r3, r0, r3
 800667a:	4413      	add	r3, r2
 800667c:	4a43      	ldr	r2, [pc, #268]	; (800678c <HAL_RCC_GetSysClockFreq+0x188>)
 800667e:	fba0 1202 	umull	r1, r2, r0, r2
 8006682:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006684:	460a      	mov	r2, r1
 8006686:	62ba      	str	r2, [r7, #40]	; 0x28
 8006688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800668a:	4413      	add	r3, r2
 800668c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800668e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006690:	2200      	movs	r2, #0
 8006692:	61bb      	str	r3, [r7, #24]
 8006694:	61fa      	str	r2, [r7, #28]
 8006696:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800669a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800669e:	f7f9 fe07 	bl	80002b0 <__aeabi_uldivmod>
 80066a2:	4602      	mov	r2, r0
 80066a4:	460b      	mov	r3, r1
 80066a6:	4613      	mov	r3, r2
 80066a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066aa:	e053      	b.n	8006754 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066ac:	4b35      	ldr	r3, [pc, #212]	; (8006784 <HAL_RCC_GetSysClockFreq+0x180>)
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	099b      	lsrs	r3, r3, #6
 80066b2:	2200      	movs	r2, #0
 80066b4:	613b      	str	r3, [r7, #16]
 80066b6:	617a      	str	r2, [r7, #20]
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80066be:	f04f 0b00 	mov.w	fp, #0
 80066c2:	4652      	mov	r2, sl
 80066c4:	465b      	mov	r3, fp
 80066c6:	f04f 0000 	mov.w	r0, #0
 80066ca:	f04f 0100 	mov.w	r1, #0
 80066ce:	0159      	lsls	r1, r3, #5
 80066d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066d4:	0150      	lsls	r0, r2, #5
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	ebb2 080a 	subs.w	r8, r2, sl
 80066de:	eb63 090b 	sbc.w	r9, r3, fp
 80066e2:	f04f 0200 	mov.w	r2, #0
 80066e6:	f04f 0300 	mov.w	r3, #0
 80066ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80066ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80066f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80066f6:	ebb2 0408 	subs.w	r4, r2, r8
 80066fa:	eb63 0509 	sbc.w	r5, r3, r9
 80066fe:	f04f 0200 	mov.w	r2, #0
 8006702:	f04f 0300 	mov.w	r3, #0
 8006706:	00eb      	lsls	r3, r5, #3
 8006708:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800670c:	00e2      	lsls	r2, r4, #3
 800670e:	4614      	mov	r4, r2
 8006710:	461d      	mov	r5, r3
 8006712:	eb14 030a 	adds.w	r3, r4, sl
 8006716:	603b      	str	r3, [r7, #0]
 8006718:	eb45 030b 	adc.w	r3, r5, fp
 800671c:	607b      	str	r3, [r7, #4]
 800671e:	f04f 0200 	mov.w	r2, #0
 8006722:	f04f 0300 	mov.w	r3, #0
 8006726:	e9d7 4500 	ldrd	r4, r5, [r7]
 800672a:	4629      	mov	r1, r5
 800672c:	028b      	lsls	r3, r1, #10
 800672e:	4621      	mov	r1, r4
 8006730:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006734:	4621      	mov	r1, r4
 8006736:	028a      	lsls	r2, r1, #10
 8006738:	4610      	mov	r0, r2
 800673a:	4619      	mov	r1, r3
 800673c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800673e:	2200      	movs	r2, #0
 8006740:	60bb      	str	r3, [r7, #8]
 8006742:	60fa      	str	r2, [r7, #12]
 8006744:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006748:	f7f9 fdb2 	bl	80002b0 <__aeabi_uldivmod>
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	4613      	mov	r3, r2
 8006752:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006754:	4b0b      	ldr	r3, [pc, #44]	; (8006784 <HAL_RCC_GetSysClockFreq+0x180>)
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	0c1b      	lsrs	r3, r3, #16
 800675a:	f003 0303 	and.w	r3, r3, #3
 800675e:	3301      	adds	r3, #1
 8006760:	005b      	lsls	r3, r3, #1
 8006762:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006764:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006768:	fbb2 f3f3 	udiv	r3, r2, r3
 800676c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800676e:	e002      	b.n	8006776 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006770:	4b05      	ldr	r3, [pc, #20]	; (8006788 <HAL_RCC_GetSysClockFreq+0x184>)
 8006772:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006774:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006778:	4618      	mov	r0, r3
 800677a:	3740      	adds	r7, #64	; 0x40
 800677c:	46bd      	mov	sp, r7
 800677e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006782:	bf00      	nop
 8006784:	40023800 	.word	0x40023800
 8006788:	00f42400 	.word	0x00f42400
 800678c:	017d7840 	.word	0x017d7840

08006790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006790:	b480      	push	{r7}
 8006792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006794:	4b03      	ldr	r3, [pc, #12]	; (80067a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006796:	681b      	ldr	r3, [r3, #0]
}
 8006798:	4618      	mov	r0, r3
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	20000010 	.word	0x20000010

080067a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80067ac:	f7ff fff0 	bl	8006790 <HAL_RCC_GetHCLKFreq>
 80067b0:	4602      	mov	r2, r0
 80067b2:	4b05      	ldr	r3, [pc, #20]	; (80067c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	0a9b      	lsrs	r3, r3, #10
 80067b8:	f003 0307 	and.w	r3, r3, #7
 80067bc:	4903      	ldr	r1, [pc, #12]	; (80067cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80067be:	5ccb      	ldrb	r3, [r1, r3]
 80067c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	40023800 	.word	0x40023800
 80067cc:	08008bf4 	.word	0x08008bf4

080067d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80067d4:	f7ff ffdc 	bl	8006790 <HAL_RCC_GetHCLKFreq>
 80067d8:	4602      	mov	r2, r0
 80067da:	4b05      	ldr	r3, [pc, #20]	; (80067f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	0b5b      	lsrs	r3, r3, #13
 80067e0:	f003 0307 	and.w	r3, r3, #7
 80067e4:	4903      	ldr	r1, [pc, #12]	; (80067f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067e6:	5ccb      	ldrb	r3, [r1, r3]
 80067e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	40023800 	.word	0x40023800
 80067f4:	08008bf4 	.word	0x08008bf4

080067f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d101      	bne.n	800680a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e273      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b00      	cmp	r3, #0
 8006814:	d075      	beq.n	8006902 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006816:	4b88      	ldr	r3, [pc, #544]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f003 030c 	and.w	r3, r3, #12
 800681e:	2b04      	cmp	r3, #4
 8006820:	d00c      	beq.n	800683c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006822:	4b85      	ldr	r3, [pc, #532]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800682a:	2b08      	cmp	r3, #8
 800682c:	d112      	bne.n	8006854 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800682e:	4b82      	ldr	r3, [pc, #520]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006836:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800683a:	d10b      	bne.n	8006854 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800683c:	4b7e      	ldr	r3, [pc, #504]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d05b      	beq.n	8006900 <HAL_RCC_OscConfig+0x108>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d157      	bne.n	8006900 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e24e      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800685c:	d106      	bne.n	800686c <HAL_RCC_OscConfig+0x74>
 800685e:	4b76      	ldr	r3, [pc, #472]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a75      	ldr	r2, [pc, #468]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 8006864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006868:	6013      	str	r3, [r2, #0]
 800686a:	e01d      	b.n	80068a8 <HAL_RCC_OscConfig+0xb0>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006874:	d10c      	bne.n	8006890 <HAL_RCC_OscConfig+0x98>
 8006876:	4b70      	ldr	r3, [pc, #448]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a6f      	ldr	r2, [pc, #444]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 800687c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006880:	6013      	str	r3, [r2, #0]
 8006882:	4b6d      	ldr	r3, [pc, #436]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a6c      	ldr	r2, [pc, #432]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 8006888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800688c:	6013      	str	r3, [r2, #0]
 800688e:	e00b      	b.n	80068a8 <HAL_RCC_OscConfig+0xb0>
 8006890:	4b69      	ldr	r3, [pc, #420]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a68      	ldr	r2, [pc, #416]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 8006896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800689a:	6013      	str	r3, [r2, #0]
 800689c:	4b66      	ldr	r3, [pc, #408]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a65      	ldr	r2, [pc, #404]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 80068a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d013      	beq.n	80068d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068b0:	f7fe fb02 	bl	8004eb8 <HAL_GetTick>
 80068b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068b6:	e008      	b.n	80068ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068b8:	f7fe fafe 	bl	8004eb8 <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	2b64      	cmp	r3, #100	; 0x64
 80068c4:	d901      	bls.n	80068ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e213      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068ca:	4b5b      	ldr	r3, [pc, #364]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d0f0      	beq.n	80068b8 <HAL_RCC_OscConfig+0xc0>
 80068d6:	e014      	b.n	8006902 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d8:	f7fe faee 	bl	8004eb8 <HAL_GetTick>
 80068dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068de:	e008      	b.n	80068f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068e0:	f7fe faea 	bl	8004eb8 <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	2b64      	cmp	r3, #100	; 0x64
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e1ff      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068f2:	4b51      	ldr	r3, [pc, #324]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1f0      	bne.n	80068e0 <HAL_RCC_OscConfig+0xe8>
 80068fe:	e000      	b.n	8006902 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0302 	and.w	r3, r3, #2
 800690a:	2b00      	cmp	r3, #0
 800690c:	d063      	beq.n	80069d6 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800690e:	4b4a      	ldr	r3, [pc, #296]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f003 030c 	and.w	r3, r3, #12
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00b      	beq.n	8006932 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800691a:	4b47      	ldr	r3, [pc, #284]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006922:	2b08      	cmp	r3, #8
 8006924:	d11c      	bne.n	8006960 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006926:	4b44      	ldr	r3, [pc, #272]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d116      	bne.n	8006960 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006932:	4b41      	ldr	r3, [pc, #260]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d005      	beq.n	800694a <HAL_RCC_OscConfig+0x152>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d001      	beq.n	800694a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e1d3      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800694a:	4b3b      	ldr	r3, [pc, #236]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	00db      	lsls	r3, r3, #3
 8006958:	4937      	ldr	r1, [pc, #220]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 800695a:	4313      	orrs	r3, r2
 800695c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800695e:	e03a      	b.n	80069d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d020      	beq.n	80069aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006968:	4b34      	ldr	r3, [pc, #208]	; (8006a3c <HAL_RCC_OscConfig+0x244>)
 800696a:	2201      	movs	r2, #1
 800696c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800696e:	f7fe faa3 	bl	8004eb8 <HAL_GetTick>
 8006972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006974:	e008      	b.n	8006988 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006976:	f7fe fa9f 	bl	8004eb8 <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	2b02      	cmp	r3, #2
 8006982:	d901      	bls.n	8006988 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e1b4      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006988:	4b2b      	ldr	r3, [pc, #172]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0302 	and.w	r3, r3, #2
 8006990:	2b00      	cmp	r3, #0
 8006992:	d0f0      	beq.n	8006976 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006994:	4b28      	ldr	r3, [pc, #160]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	00db      	lsls	r3, r3, #3
 80069a2:	4925      	ldr	r1, [pc, #148]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	600b      	str	r3, [r1, #0]
 80069a8:	e015      	b.n	80069d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069aa:	4b24      	ldr	r3, [pc, #144]	; (8006a3c <HAL_RCC_OscConfig+0x244>)
 80069ac:	2200      	movs	r2, #0
 80069ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b0:	f7fe fa82 	bl	8004eb8 <HAL_GetTick>
 80069b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069b6:	e008      	b.n	80069ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069b8:	f7fe fa7e 	bl	8004eb8 <HAL_GetTick>
 80069bc:	4602      	mov	r2, r0
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d901      	bls.n	80069ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e193      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069ca:	4b1b      	ldr	r3, [pc, #108]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0302 	and.w	r3, r3, #2
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1f0      	bne.n	80069b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0308 	and.w	r3, r3, #8
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d036      	beq.n	8006a50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d016      	beq.n	8006a18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069ea:	4b15      	ldr	r3, [pc, #84]	; (8006a40 <HAL_RCC_OscConfig+0x248>)
 80069ec:	2201      	movs	r2, #1
 80069ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069f0:	f7fe fa62 	bl	8004eb8 <HAL_GetTick>
 80069f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069f6:	e008      	b.n	8006a0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069f8:	f7fe fa5e 	bl	8004eb8 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d901      	bls.n	8006a0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e173      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a0a:	4b0b      	ldr	r3, [pc, #44]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 8006a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a0e:	f003 0302 	and.w	r3, r3, #2
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d0f0      	beq.n	80069f8 <HAL_RCC_OscConfig+0x200>
 8006a16:	e01b      	b.n	8006a50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a18:	4b09      	ldr	r3, [pc, #36]	; (8006a40 <HAL_RCC_OscConfig+0x248>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a1e:	f7fe fa4b 	bl	8004eb8 <HAL_GetTick>
 8006a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a24:	e00e      	b.n	8006a44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a26:	f7fe fa47 	bl	8004eb8 <HAL_GetTick>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d907      	bls.n	8006a44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e15c      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4fa>
 8006a38:	40023800 	.word	0x40023800
 8006a3c:	42470000 	.word	0x42470000
 8006a40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a44:	4b8a      	ldr	r3, [pc, #552]	; (8006c70 <HAL_RCC_OscConfig+0x478>)
 8006a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a48:	f003 0302 	and.w	r3, r3, #2
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1ea      	bne.n	8006a26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f000 8097 	beq.w	8006b8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a62:	4b83      	ldr	r3, [pc, #524]	; (8006c70 <HAL_RCC_OscConfig+0x478>)
 8006a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10f      	bne.n	8006a8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a6e:	2300      	movs	r3, #0
 8006a70:	60bb      	str	r3, [r7, #8]
 8006a72:	4b7f      	ldr	r3, [pc, #508]	; (8006c70 <HAL_RCC_OscConfig+0x478>)
 8006a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a76:	4a7e      	ldr	r2, [pc, #504]	; (8006c70 <HAL_RCC_OscConfig+0x478>)
 8006a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8006a7e:	4b7c      	ldr	r3, [pc, #496]	; (8006c70 <HAL_RCC_OscConfig+0x478>)
 8006a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a86:	60bb      	str	r3, [r7, #8]
 8006a88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a8e:	4b79      	ldr	r3, [pc, #484]	; (8006c74 <HAL_RCC_OscConfig+0x47c>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d118      	bne.n	8006acc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a9a:	4b76      	ldr	r3, [pc, #472]	; (8006c74 <HAL_RCC_OscConfig+0x47c>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a75      	ldr	r2, [pc, #468]	; (8006c74 <HAL_RCC_OscConfig+0x47c>)
 8006aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006aa6:	f7fe fa07 	bl	8004eb8 <HAL_GetTick>
 8006aaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aac:	e008      	b.n	8006ac0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aae:	f7fe fa03 	bl	8004eb8 <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d901      	bls.n	8006ac0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e118      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ac0:	4b6c      	ldr	r3, [pc, #432]	; (8006c74 <HAL_RCC_OscConfig+0x47c>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d0f0      	beq.n	8006aae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d106      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x2ea>
 8006ad4:	4b66      	ldr	r3, [pc, #408]	; (8006c70 <HAL_RCC_OscConfig+0x478>)
 8006ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ad8:	4a65      	ldr	r2, [pc, #404]	; (8006c70 <HAL_RCC_OscConfig+0x478>)
 8006ada:	f043 0301 	orr.w	r3, r3, #1
 8006ade:	6713      	str	r3, [r2, #112]	; 0x70
 8006ae0:	e01c      	b.n	8006b1c <HAL_RCC_OscConfig+0x324>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	2b05      	cmp	r3, #5
 8006ae8:	d10c      	bne.n	8006b04 <HAL_RCC_OscConfig+0x30c>
 8006aea:	4b61      	ldr	r3, [pc, #388]	; (8006c70 <HAL_RCC_OscConfig+0x478>)
 8006aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aee:	4a60      	ldr	r2, [pc, #384]	; (8006c70 <HAL_RCC_OscConfig+0x478>)
 8006af0:	f043 0304 	orr.w	r3, r3, #4
 8006af4:	6713      	str	r3, [r2, #112]	; 0x70
 8006af6:	4b5e      	ldr	r3, [pc, #376]	; (8006c70 <HAL_RCC_OscConfig+0x478>)
 8006af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afa:	4a5d      	ldr	r2, [pc, #372]	; (8006c70 <HAL_RCC_OscConfig+0x478>)
 8006afc:	f043 0301 	orr.w	r3, r3, #1
 8006b00:	6713      	str	r3, [r2, #112]	; 0x70
 8006b02:	e00b      	b.n	8006b1c <HAL_RCC_OscConfig+0x324>
 8006b04:	4b5a      	ldr	r3, [pc, #360]	; (8006c70 <HAL_RCC_OscConfig+0x478>)
 8006b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b08:	4a59      	ldr	r2, [pc, #356]	; (8006c70 <HAL_RCC_OscConfig+0x478>)
 8006b0a:	f023 0301 	bic.w	r3, r3, #1
 8006b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8006b10:	4b57      	ldr	r3, [pc, #348]	; (8006c70 <HAL_RCC_OscConfig+0x478>)
 8006b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b14:	4a56      	ldr	r2, [pc, #344]	; (8006c70 <HAL_RCC_OscConfig+0x478>)
 8006b16:	f023 0304 	bic.w	r3, r3, #4
 8006b1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d015      	beq.n	8006b50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b24:	f7fe f9c8 	bl	8004eb8 <HAL_GetTick>
 8006b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b2a:	e00a      	b.n	8006b42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b2c:	f7fe f9c4 	bl	8004eb8 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d901      	bls.n	8006b42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e0d7      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b42:	4b4b      	ldr	r3, [pc, #300]	; (8006c70 <HAL_RCC_OscConfig+0x478>)
 8006b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b46:	f003 0302 	and.w	r3, r3, #2
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d0ee      	beq.n	8006b2c <HAL_RCC_OscConfig+0x334>
 8006b4e:	e014      	b.n	8006b7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b50:	f7fe f9b2 	bl	8004eb8 <HAL_GetTick>
 8006b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b56:	e00a      	b.n	8006b6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b58:	f7fe f9ae 	bl	8004eb8 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d901      	bls.n	8006b6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e0c1      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b6e:	4b40      	ldr	r3, [pc, #256]	; (8006c70 <HAL_RCC_OscConfig+0x478>)
 8006b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b72:	f003 0302 	and.w	r3, r3, #2
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1ee      	bne.n	8006b58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b7a:	7dfb      	ldrb	r3, [r7, #23]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d105      	bne.n	8006b8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b80:	4b3b      	ldr	r3, [pc, #236]	; (8006c70 <HAL_RCC_OscConfig+0x478>)
 8006b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b84:	4a3a      	ldr	r2, [pc, #232]	; (8006c70 <HAL_RCC_OscConfig+0x478>)
 8006b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f000 80ad 	beq.w	8006cf0 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b96:	4b36      	ldr	r3, [pc, #216]	; (8006c70 <HAL_RCC_OscConfig+0x478>)
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f003 030c 	and.w	r3, r3, #12
 8006b9e:	2b08      	cmp	r3, #8
 8006ba0:	d060      	beq.n	8006c64 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d145      	bne.n	8006c36 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006baa:	4b33      	ldr	r3, [pc, #204]	; (8006c78 <HAL_RCC_OscConfig+0x480>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb0:	f7fe f982 	bl	8004eb8 <HAL_GetTick>
 8006bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bb6:	e008      	b.n	8006bca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bb8:	f7fe f97e 	bl	8004eb8 <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d901      	bls.n	8006bca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e093      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bca:	4b29      	ldr	r3, [pc, #164]	; (8006c70 <HAL_RCC_OscConfig+0x478>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1f0      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	69da      	ldr	r2, [r3, #28]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	431a      	orrs	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be4:	019b      	lsls	r3, r3, #6
 8006be6:	431a      	orrs	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bec:	085b      	lsrs	r3, r3, #1
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	041b      	lsls	r3, r3, #16
 8006bf2:	431a      	orrs	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf8:	061b      	lsls	r3, r3, #24
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c00:	071b      	lsls	r3, r3, #28
 8006c02:	491b      	ldr	r1, [pc, #108]	; (8006c70 <HAL_RCC_OscConfig+0x478>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c08:	4b1b      	ldr	r3, [pc, #108]	; (8006c78 <HAL_RCC_OscConfig+0x480>)
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c0e:	f7fe f953 	bl	8004eb8 <HAL_GetTick>
 8006c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c14:	e008      	b.n	8006c28 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c16:	f7fe f94f 	bl	8004eb8 <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d901      	bls.n	8006c28 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e064      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c28:	4b11      	ldr	r3, [pc, #68]	; (8006c70 <HAL_RCC_OscConfig+0x478>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d0f0      	beq.n	8006c16 <HAL_RCC_OscConfig+0x41e>
 8006c34:	e05c      	b.n	8006cf0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c36:	4b10      	ldr	r3, [pc, #64]	; (8006c78 <HAL_RCC_OscConfig+0x480>)
 8006c38:	2200      	movs	r2, #0
 8006c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c3c:	f7fe f93c 	bl	8004eb8 <HAL_GetTick>
 8006c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c42:	e008      	b.n	8006c56 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c44:	f7fe f938 	bl	8004eb8 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d901      	bls.n	8006c56 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e04d      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c56:	4b06      	ldr	r3, [pc, #24]	; (8006c70 <HAL_RCC_OscConfig+0x478>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1f0      	bne.n	8006c44 <HAL_RCC_OscConfig+0x44c>
 8006c62:	e045      	b.n	8006cf0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d107      	bne.n	8006c7c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e040      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4fa>
 8006c70:	40023800 	.word	0x40023800
 8006c74:	40007000 	.word	0x40007000
 8006c78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c7c:	4b1f      	ldr	r3, [pc, #124]	; (8006cfc <HAL_RCC_OscConfig+0x504>)
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d030      	beq.n	8006cec <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d129      	bne.n	8006cec <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d122      	bne.n	8006cec <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006cac:	4013      	ands	r3, r2
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006cb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d119      	bne.n	8006cec <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc2:	085b      	lsrs	r3, r3, #1
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d10f      	bne.n	8006cec <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d107      	bne.n	8006cec <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d001      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e000      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3718      	adds	r7, #24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	40023800 	.word	0x40023800

08006d00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e07b      	b.n	8006e0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d108      	bne.n	8006d2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d22:	d009      	beq.n	8006d38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	61da      	str	r2, [r3, #28]
 8006d2a:	e005      	b.n	8006d38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d106      	bne.n	8006d58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7fd f83c 	bl	8003dd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006d80:	431a      	orrs	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d8a:	431a      	orrs	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	f003 0302 	and.w	r3, r3, #2
 8006d94:	431a      	orrs	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006da8:	431a      	orrs	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006db2:	431a      	orrs	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a1b      	ldr	r3, [r3, #32]
 8006db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dbc:	ea42 0103 	orr.w	r1, r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	430a      	orrs	r2, r1
 8006dce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	0c1b      	lsrs	r3, r3, #16
 8006dd6:	f003 0104 	and.w	r1, r3, #4
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dde:	f003 0210 	and.w	r2, r3, #16
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	430a      	orrs	r2, r1
 8006de8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	69da      	ldr	r2, [r3, #28]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006df8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b082      	sub	sp, #8
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e03f      	b.n	8006ea4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d106      	bne.n	8006e3e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7fd ff65 	bl	8004d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2224      	movs	r2, #36	; 0x24
 8006e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68da      	ldr	r2, [r3, #12]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e54:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f828 	bl	8006eac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	691a      	ldr	r2, [r3, #16]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e6a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	695a      	ldr	r2, [r3, #20]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e7a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68da      	ldr	r2, [r3, #12]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e8a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2220      	movs	r2, #32
 8006e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2220      	movs	r2, #32
 8006e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006eb0:	b0c0      	sub	sp, #256	; 0x100
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ec8:	68d9      	ldr	r1, [r3, #12]
 8006eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	ea40 0301 	orr.w	r3, r0, r1
 8006ed4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eda:	689a      	ldr	r2, [r3, #8]
 8006edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	431a      	orrs	r2, r3
 8006ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	431a      	orrs	r2, r3
 8006eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef0:	69db      	ldr	r3, [r3, #28]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006f04:	f021 010c 	bic.w	r1, r1, #12
 8006f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f12:	430b      	orrs	r3, r1
 8006f14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f26:	6999      	ldr	r1, [r3, #24]
 8006f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	ea40 0301 	orr.w	r3, r0, r1
 8006f32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	4b8f      	ldr	r3, [pc, #572]	; (8007178 <UART_SetConfig+0x2cc>)
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d005      	beq.n	8006f4c <UART_SetConfig+0xa0>
 8006f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	4b8d      	ldr	r3, [pc, #564]	; (800717c <UART_SetConfig+0x2d0>)
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d104      	bne.n	8006f56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f4c:	f7ff fc40 	bl	80067d0 <HAL_RCC_GetPCLK2Freq>
 8006f50:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006f54:	e003      	b.n	8006f5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f56:	f7ff fc27 	bl	80067a8 <HAL_RCC_GetPCLK1Freq>
 8006f5a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f62:	69db      	ldr	r3, [r3, #28]
 8006f64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f68:	f040 810c 	bne.w	8007184 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f70:	2200      	movs	r2, #0
 8006f72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006f7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006f7e:	4622      	mov	r2, r4
 8006f80:	462b      	mov	r3, r5
 8006f82:	1891      	adds	r1, r2, r2
 8006f84:	65b9      	str	r1, [r7, #88]	; 0x58
 8006f86:	415b      	adcs	r3, r3
 8006f88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006f8e:	4621      	mov	r1, r4
 8006f90:	eb12 0801 	adds.w	r8, r2, r1
 8006f94:	4629      	mov	r1, r5
 8006f96:	eb43 0901 	adc.w	r9, r3, r1
 8006f9a:	f04f 0200 	mov.w	r2, #0
 8006f9e:	f04f 0300 	mov.w	r3, #0
 8006fa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006fa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006faa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fae:	4690      	mov	r8, r2
 8006fb0:	4699      	mov	r9, r3
 8006fb2:	4623      	mov	r3, r4
 8006fb4:	eb18 0303 	adds.w	r3, r8, r3
 8006fb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006fbc:	462b      	mov	r3, r5
 8006fbe:	eb49 0303 	adc.w	r3, r9, r3
 8006fc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006fd2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006fd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006fda:	460b      	mov	r3, r1
 8006fdc:	18db      	adds	r3, r3, r3
 8006fde:	653b      	str	r3, [r7, #80]	; 0x50
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	eb42 0303 	adc.w	r3, r2, r3
 8006fe6:	657b      	str	r3, [r7, #84]	; 0x54
 8006fe8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006fec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006ff0:	f7f9 f95e 	bl	80002b0 <__aeabi_uldivmod>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	4b61      	ldr	r3, [pc, #388]	; (8007180 <UART_SetConfig+0x2d4>)
 8006ffa:	fba3 2302 	umull	r2, r3, r3, r2
 8006ffe:	095b      	lsrs	r3, r3, #5
 8007000:	011c      	lsls	r4, r3, #4
 8007002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007006:	2200      	movs	r2, #0
 8007008:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800700c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007010:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007014:	4642      	mov	r2, r8
 8007016:	464b      	mov	r3, r9
 8007018:	1891      	adds	r1, r2, r2
 800701a:	64b9      	str	r1, [r7, #72]	; 0x48
 800701c:	415b      	adcs	r3, r3
 800701e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007020:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007024:	4641      	mov	r1, r8
 8007026:	eb12 0a01 	adds.w	sl, r2, r1
 800702a:	4649      	mov	r1, r9
 800702c:	eb43 0b01 	adc.w	fp, r3, r1
 8007030:	f04f 0200 	mov.w	r2, #0
 8007034:	f04f 0300 	mov.w	r3, #0
 8007038:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800703c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007040:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007044:	4692      	mov	sl, r2
 8007046:	469b      	mov	fp, r3
 8007048:	4643      	mov	r3, r8
 800704a:	eb1a 0303 	adds.w	r3, sl, r3
 800704e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007052:	464b      	mov	r3, r9
 8007054:	eb4b 0303 	adc.w	r3, fp, r3
 8007058:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800705c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007068:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800706c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007070:	460b      	mov	r3, r1
 8007072:	18db      	adds	r3, r3, r3
 8007074:	643b      	str	r3, [r7, #64]	; 0x40
 8007076:	4613      	mov	r3, r2
 8007078:	eb42 0303 	adc.w	r3, r2, r3
 800707c:	647b      	str	r3, [r7, #68]	; 0x44
 800707e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007082:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007086:	f7f9 f913 	bl	80002b0 <__aeabi_uldivmod>
 800708a:	4602      	mov	r2, r0
 800708c:	460b      	mov	r3, r1
 800708e:	4611      	mov	r1, r2
 8007090:	4b3b      	ldr	r3, [pc, #236]	; (8007180 <UART_SetConfig+0x2d4>)
 8007092:	fba3 2301 	umull	r2, r3, r3, r1
 8007096:	095b      	lsrs	r3, r3, #5
 8007098:	2264      	movs	r2, #100	; 0x64
 800709a:	fb02 f303 	mul.w	r3, r2, r3
 800709e:	1acb      	subs	r3, r1, r3
 80070a0:	00db      	lsls	r3, r3, #3
 80070a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80070a6:	4b36      	ldr	r3, [pc, #216]	; (8007180 <UART_SetConfig+0x2d4>)
 80070a8:	fba3 2302 	umull	r2, r3, r3, r2
 80070ac:	095b      	lsrs	r3, r3, #5
 80070ae:	005b      	lsls	r3, r3, #1
 80070b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80070b4:	441c      	add	r4, r3
 80070b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070ba:	2200      	movs	r2, #0
 80070bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80070c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80070c8:	4642      	mov	r2, r8
 80070ca:	464b      	mov	r3, r9
 80070cc:	1891      	adds	r1, r2, r2
 80070ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80070d0:	415b      	adcs	r3, r3
 80070d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80070d8:	4641      	mov	r1, r8
 80070da:	1851      	adds	r1, r2, r1
 80070dc:	6339      	str	r1, [r7, #48]	; 0x30
 80070de:	4649      	mov	r1, r9
 80070e0:	414b      	adcs	r3, r1
 80070e2:	637b      	str	r3, [r7, #52]	; 0x34
 80070e4:	f04f 0200 	mov.w	r2, #0
 80070e8:	f04f 0300 	mov.w	r3, #0
 80070ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80070f0:	4659      	mov	r1, fp
 80070f2:	00cb      	lsls	r3, r1, #3
 80070f4:	4651      	mov	r1, sl
 80070f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070fa:	4651      	mov	r1, sl
 80070fc:	00ca      	lsls	r2, r1, #3
 80070fe:	4610      	mov	r0, r2
 8007100:	4619      	mov	r1, r3
 8007102:	4603      	mov	r3, r0
 8007104:	4642      	mov	r2, r8
 8007106:	189b      	adds	r3, r3, r2
 8007108:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800710c:	464b      	mov	r3, r9
 800710e:	460a      	mov	r2, r1
 8007110:	eb42 0303 	adc.w	r3, r2, r3
 8007114:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007124:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007128:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800712c:	460b      	mov	r3, r1
 800712e:	18db      	adds	r3, r3, r3
 8007130:	62bb      	str	r3, [r7, #40]	; 0x28
 8007132:	4613      	mov	r3, r2
 8007134:	eb42 0303 	adc.w	r3, r2, r3
 8007138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800713a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800713e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007142:	f7f9 f8b5 	bl	80002b0 <__aeabi_uldivmod>
 8007146:	4602      	mov	r2, r0
 8007148:	460b      	mov	r3, r1
 800714a:	4b0d      	ldr	r3, [pc, #52]	; (8007180 <UART_SetConfig+0x2d4>)
 800714c:	fba3 1302 	umull	r1, r3, r3, r2
 8007150:	095b      	lsrs	r3, r3, #5
 8007152:	2164      	movs	r1, #100	; 0x64
 8007154:	fb01 f303 	mul.w	r3, r1, r3
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	00db      	lsls	r3, r3, #3
 800715c:	3332      	adds	r3, #50	; 0x32
 800715e:	4a08      	ldr	r2, [pc, #32]	; (8007180 <UART_SetConfig+0x2d4>)
 8007160:	fba2 2303 	umull	r2, r3, r2, r3
 8007164:	095b      	lsrs	r3, r3, #5
 8007166:	f003 0207 	and.w	r2, r3, #7
 800716a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4422      	add	r2, r4
 8007172:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007174:	e105      	b.n	8007382 <UART_SetConfig+0x4d6>
 8007176:	bf00      	nop
 8007178:	40011000 	.word	0x40011000
 800717c:	40011400 	.word	0x40011400
 8007180:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007184:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007188:	2200      	movs	r2, #0
 800718a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800718e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007192:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007196:	4642      	mov	r2, r8
 8007198:	464b      	mov	r3, r9
 800719a:	1891      	adds	r1, r2, r2
 800719c:	6239      	str	r1, [r7, #32]
 800719e:	415b      	adcs	r3, r3
 80071a0:	627b      	str	r3, [r7, #36]	; 0x24
 80071a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80071a6:	4641      	mov	r1, r8
 80071a8:	1854      	adds	r4, r2, r1
 80071aa:	4649      	mov	r1, r9
 80071ac:	eb43 0501 	adc.w	r5, r3, r1
 80071b0:	f04f 0200 	mov.w	r2, #0
 80071b4:	f04f 0300 	mov.w	r3, #0
 80071b8:	00eb      	lsls	r3, r5, #3
 80071ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071be:	00e2      	lsls	r2, r4, #3
 80071c0:	4614      	mov	r4, r2
 80071c2:	461d      	mov	r5, r3
 80071c4:	4643      	mov	r3, r8
 80071c6:	18e3      	adds	r3, r4, r3
 80071c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80071cc:	464b      	mov	r3, r9
 80071ce:	eb45 0303 	adc.w	r3, r5, r3
 80071d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80071d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80071e6:	f04f 0200 	mov.w	r2, #0
 80071ea:	f04f 0300 	mov.w	r3, #0
 80071ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80071f2:	4629      	mov	r1, r5
 80071f4:	008b      	lsls	r3, r1, #2
 80071f6:	4621      	mov	r1, r4
 80071f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071fc:	4621      	mov	r1, r4
 80071fe:	008a      	lsls	r2, r1, #2
 8007200:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007204:	f7f9 f854 	bl	80002b0 <__aeabi_uldivmod>
 8007208:	4602      	mov	r2, r0
 800720a:	460b      	mov	r3, r1
 800720c:	4b60      	ldr	r3, [pc, #384]	; (8007390 <UART_SetConfig+0x4e4>)
 800720e:	fba3 2302 	umull	r2, r3, r3, r2
 8007212:	095b      	lsrs	r3, r3, #5
 8007214:	011c      	lsls	r4, r3, #4
 8007216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800721a:	2200      	movs	r2, #0
 800721c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007220:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007224:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007228:	4642      	mov	r2, r8
 800722a:	464b      	mov	r3, r9
 800722c:	1891      	adds	r1, r2, r2
 800722e:	61b9      	str	r1, [r7, #24]
 8007230:	415b      	adcs	r3, r3
 8007232:	61fb      	str	r3, [r7, #28]
 8007234:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007238:	4641      	mov	r1, r8
 800723a:	1851      	adds	r1, r2, r1
 800723c:	6139      	str	r1, [r7, #16]
 800723e:	4649      	mov	r1, r9
 8007240:	414b      	adcs	r3, r1
 8007242:	617b      	str	r3, [r7, #20]
 8007244:	f04f 0200 	mov.w	r2, #0
 8007248:	f04f 0300 	mov.w	r3, #0
 800724c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007250:	4659      	mov	r1, fp
 8007252:	00cb      	lsls	r3, r1, #3
 8007254:	4651      	mov	r1, sl
 8007256:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800725a:	4651      	mov	r1, sl
 800725c:	00ca      	lsls	r2, r1, #3
 800725e:	4610      	mov	r0, r2
 8007260:	4619      	mov	r1, r3
 8007262:	4603      	mov	r3, r0
 8007264:	4642      	mov	r2, r8
 8007266:	189b      	adds	r3, r3, r2
 8007268:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800726c:	464b      	mov	r3, r9
 800726e:	460a      	mov	r2, r1
 8007270:	eb42 0303 	adc.w	r3, r2, r3
 8007274:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	67bb      	str	r3, [r7, #120]	; 0x78
 8007282:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007284:	f04f 0200 	mov.w	r2, #0
 8007288:	f04f 0300 	mov.w	r3, #0
 800728c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007290:	4649      	mov	r1, r9
 8007292:	008b      	lsls	r3, r1, #2
 8007294:	4641      	mov	r1, r8
 8007296:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800729a:	4641      	mov	r1, r8
 800729c:	008a      	lsls	r2, r1, #2
 800729e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80072a2:	f7f9 f805 	bl	80002b0 <__aeabi_uldivmod>
 80072a6:	4602      	mov	r2, r0
 80072a8:	460b      	mov	r3, r1
 80072aa:	4b39      	ldr	r3, [pc, #228]	; (8007390 <UART_SetConfig+0x4e4>)
 80072ac:	fba3 1302 	umull	r1, r3, r3, r2
 80072b0:	095b      	lsrs	r3, r3, #5
 80072b2:	2164      	movs	r1, #100	; 0x64
 80072b4:	fb01 f303 	mul.w	r3, r1, r3
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	011b      	lsls	r3, r3, #4
 80072bc:	3332      	adds	r3, #50	; 0x32
 80072be:	4a34      	ldr	r2, [pc, #208]	; (8007390 <UART_SetConfig+0x4e4>)
 80072c0:	fba2 2303 	umull	r2, r3, r2, r3
 80072c4:	095b      	lsrs	r3, r3, #5
 80072c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072ca:	441c      	add	r4, r3
 80072cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072d0:	2200      	movs	r2, #0
 80072d2:	673b      	str	r3, [r7, #112]	; 0x70
 80072d4:	677a      	str	r2, [r7, #116]	; 0x74
 80072d6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80072da:	4642      	mov	r2, r8
 80072dc:	464b      	mov	r3, r9
 80072de:	1891      	adds	r1, r2, r2
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	415b      	adcs	r3, r3
 80072e4:	60fb      	str	r3, [r7, #12]
 80072e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072ea:	4641      	mov	r1, r8
 80072ec:	1851      	adds	r1, r2, r1
 80072ee:	6039      	str	r1, [r7, #0]
 80072f0:	4649      	mov	r1, r9
 80072f2:	414b      	adcs	r3, r1
 80072f4:	607b      	str	r3, [r7, #4]
 80072f6:	f04f 0200 	mov.w	r2, #0
 80072fa:	f04f 0300 	mov.w	r3, #0
 80072fe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007302:	4659      	mov	r1, fp
 8007304:	00cb      	lsls	r3, r1, #3
 8007306:	4651      	mov	r1, sl
 8007308:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800730c:	4651      	mov	r1, sl
 800730e:	00ca      	lsls	r2, r1, #3
 8007310:	4610      	mov	r0, r2
 8007312:	4619      	mov	r1, r3
 8007314:	4603      	mov	r3, r0
 8007316:	4642      	mov	r2, r8
 8007318:	189b      	adds	r3, r3, r2
 800731a:	66bb      	str	r3, [r7, #104]	; 0x68
 800731c:	464b      	mov	r3, r9
 800731e:	460a      	mov	r2, r1
 8007320:	eb42 0303 	adc.w	r3, r2, r3
 8007324:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	663b      	str	r3, [r7, #96]	; 0x60
 8007330:	667a      	str	r2, [r7, #100]	; 0x64
 8007332:	f04f 0200 	mov.w	r2, #0
 8007336:	f04f 0300 	mov.w	r3, #0
 800733a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800733e:	4649      	mov	r1, r9
 8007340:	008b      	lsls	r3, r1, #2
 8007342:	4641      	mov	r1, r8
 8007344:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007348:	4641      	mov	r1, r8
 800734a:	008a      	lsls	r2, r1, #2
 800734c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007350:	f7f8 ffae 	bl	80002b0 <__aeabi_uldivmod>
 8007354:	4602      	mov	r2, r0
 8007356:	460b      	mov	r3, r1
 8007358:	4b0d      	ldr	r3, [pc, #52]	; (8007390 <UART_SetConfig+0x4e4>)
 800735a:	fba3 1302 	umull	r1, r3, r3, r2
 800735e:	095b      	lsrs	r3, r3, #5
 8007360:	2164      	movs	r1, #100	; 0x64
 8007362:	fb01 f303 	mul.w	r3, r1, r3
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	011b      	lsls	r3, r3, #4
 800736a:	3332      	adds	r3, #50	; 0x32
 800736c:	4a08      	ldr	r2, [pc, #32]	; (8007390 <UART_SetConfig+0x4e4>)
 800736e:	fba2 2303 	umull	r2, r3, r2, r3
 8007372:	095b      	lsrs	r3, r3, #5
 8007374:	f003 020f 	and.w	r2, r3, #15
 8007378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4422      	add	r2, r4
 8007380:	609a      	str	r2, [r3, #8]
}
 8007382:	bf00      	nop
 8007384:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007388:	46bd      	mov	sp, r7
 800738a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800738e:	bf00      	nop
 8007390:	51eb851f 	.word	0x51eb851f

08007394 <__errno>:
 8007394:	4b01      	ldr	r3, [pc, #4]	; (800739c <__errno+0x8>)
 8007396:	6818      	ldr	r0, [r3, #0]
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	20000298 	.word	0x20000298

080073a0 <__libc_init_array>:
 80073a0:	b570      	push	{r4, r5, r6, lr}
 80073a2:	4d0d      	ldr	r5, [pc, #52]	; (80073d8 <__libc_init_array+0x38>)
 80073a4:	4c0d      	ldr	r4, [pc, #52]	; (80073dc <__libc_init_array+0x3c>)
 80073a6:	1b64      	subs	r4, r4, r5
 80073a8:	10a4      	asrs	r4, r4, #2
 80073aa:	2600      	movs	r6, #0
 80073ac:	42a6      	cmp	r6, r4
 80073ae:	d109      	bne.n	80073c4 <__libc_init_array+0x24>
 80073b0:	4d0b      	ldr	r5, [pc, #44]	; (80073e0 <__libc_init_array+0x40>)
 80073b2:	4c0c      	ldr	r4, [pc, #48]	; (80073e4 <__libc_init_array+0x44>)
 80073b4:	f001 fa20 	bl	80087f8 <_init>
 80073b8:	1b64      	subs	r4, r4, r5
 80073ba:	10a4      	asrs	r4, r4, #2
 80073bc:	2600      	movs	r6, #0
 80073be:	42a6      	cmp	r6, r4
 80073c0:	d105      	bne.n	80073ce <__libc_init_array+0x2e>
 80073c2:	bd70      	pop	{r4, r5, r6, pc}
 80073c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80073c8:	4798      	blx	r3
 80073ca:	3601      	adds	r6, #1
 80073cc:	e7ee      	b.n	80073ac <__libc_init_array+0xc>
 80073ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80073d2:	4798      	blx	r3
 80073d4:	3601      	adds	r6, #1
 80073d6:	e7f2      	b.n	80073be <__libc_init_array+0x1e>
 80073d8:	08008cb0 	.word	0x08008cb0
 80073dc:	08008cb0 	.word	0x08008cb0
 80073e0:	08008cb0 	.word	0x08008cb0
 80073e4:	08008cb4 	.word	0x08008cb4

080073e8 <malloc>:
 80073e8:	4b02      	ldr	r3, [pc, #8]	; (80073f4 <malloc+0xc>)
 80073ea:	4601      	mov	r1, r0
 80073ec:	6818      	ldr	r0, [r3, #0]
 80073ee:	f000 b89d 	b.w	800752c <_malloc_r>
 80073f2:	bf00      	nop
 80073f4:	20000298 	.word	0x20000298

080073f8 <free>:
 80073f8:	4b02      	ldr	r3, [pc, #8]	; (8007404 <free+0xc>)
 80073fa:	4601      	mov	r1, r0
 80073fc:	6818      	ldr	r0, [r3, #0]
 80073fe:	f000 b829 	b.w	8007454 <_free_r>
 8007402:	bf00      	nop
 8007404:	20000298 	.word	0x20000298

08007408 <memcmp>:
 8007408:	b510      	push	{r4, lr}
 800740a:	3901      	subs	r1, #1
 800740c:	4402      	add	r2, r0
 800740e:	4290      	cmp	r0, r2
 8007410:	d101      	bne.n	8007416 <memcmp+0xe>
 8007412:	2000      	movs	r0, #0
 8007414:	e005      	b.n	8007422 <memcmp+0x1a>
 8007416:	7803      	ldrb	r3, [r0, #0]
 8007418:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800741c:	42a3      	cmp	r3, r4
 800741e:	d001      	beq.n	8007424 <memcmp+0x1c>
 8007420:	1b18      	subs	r0, r3, r4
 8007422:	bd10      	pop	{r4, pc}
 8007424:	3001      	adds	r0, #1
 8007426:	e7f2      	b.n	800740e <memcmp+0x6>

08007428 <memcpy>:
 8007428:	440a      	add	r2, r1
 800742a:	4291      	cmp	r1, r2
 800742c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007430:	d100      	bne.n	8007434 <memcpy+0xc>
 8007432:	4770      	bx	lr
 8007434:	b510      	push	{r4, lr}
 8007436:	f811 4b01 	ldrb.w	r4, [r1], #1
 800743a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800743e:	4291      	cmp	r1, r2
 8007440:	d1f9      	bne.n	8007436 <memcpy+0xe>
 8007442:	bd10      	pop	{r4, pc}

08007444 <memset>:
 8007444:	4402      	add	r2, r0
 8007446:	4603      	mov	r3, r0
 8007448:	4293      	cmp	r3, r2
 800744a:	d100      	bne.n	800744e <memset+0xa>
 800744c:	4770      	bx	lr
 800744e:	f803 1b01 	strb.w	r1, [r3], #1
 8007452:	e7f9      	b.n	8007448 <memset+0x4>

08007454 <_free_r>:
 8007454:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007456:	2900      	cmp	r1, #0
 8007458:	d044      	beq.n	80074e4 <_free_r+0x90>
 800745a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800745e:	9001      	str	r0, [sp, #4]
 8007460:	2b00      	cmp	r3, #0
 8007462:	f1a1 0404 	sub.w	r4, r1, #4
 8007466:	bfb8      	it	lt
 8007468:	18e4      	addlt	r4, r4, r3
 800746a:	f000 fc71 	bl	8007d50 <__malloc_lock>
 800746e:	4a1e      	ldr	r2, [pc, #120]	; (80074e8 <_free_r+0x94>)
 8007470:	9801      	ldr	r0, [sp, #4]
 8007472:	6813      	ldr	r3, [r2, #0]
 8007474:	b933      	cbnz	r3, 8007484 <_free_r+0x30>
 8007476:	6063      	str	r3, [r4, #4]
 8007478:	6014      	str	r4, [r2, #0]
 800747a:	b003      	add	sp, #12
 800747c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007480:	f000 bc6c 	b.w	8007d5c <__malloc_unlock>
 8007484:	42a3      	cmp	r3, r4
 8007486:	d908      	bls.n	800749a <_free_r+0x46>
 8007488:	6825      	ldr	r5, [r4, #0]
 800748a:	1961      	adds	r1, r4, r5
 800748c:	428b      	cmp	r3, r1
 800748e:	bf01      	itttt	eq
 8007490:	6819      	ldreq	r1, [r3, #0]
 8007492:	685b      	ldreq	r3, [r3, #4]
 8007494:	1949      	addeq	r1, r1, r5
 8007496:	6021      	streq	r1, [r4, #0]
 8007498:	e7ed      	b.n	8007476 <_free_r+0x22>
 800749a:	461a      	mov	r2, r3
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	b10b      	cbz	r3, 80074a4 <_free_r+0x50>
 80074a0:	42a3      	cmp	r3, r4
 80074a2:	d9fa      	bls.n	800749a <_free_r+0x46>
 80074a4:	6811      	ldr	r1, [r2, #0]
 80074a6:	1855      	adds	r5, r2, r1
 80074a8:	42a5      	cmp	r5, r4
 80074aa:	d10b      	bne.n	80074c4 <_free_r+0x70>
 80074ac:	6824      	ldr	r4, [r4, #0]
 80074ae:	4421      	add	r1, r4
 80074b0:	1854      	adds	r4, r2, r1
 80074b2:	42a3      	cmp	r3, r4
 80074b4:	6011      	str	r1, [r2, #0]
 80074b6:	d1e0      	bne.n	800747a <_free_r+0x26>
 80074b8:	681c      	ldr	r4, [r3, #0]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	6053      	str	r3, [r2, #4]
 80074be:	4421      	add	r1, r4
 80074c0:	6011      	str	r1, [r2, #0]
 80074c2:	e7da      	b.n	800747a <_free_r+0x26>
 80074c4:	d902      	bls.n	80074cc <_free_r+0x78>
 80074c6:	230c      	movs	r3, #12
 80074c8:	6003      	str	r3, [r0, #0]
 80074ca:	e7d6      	b.n	800747a <_free_r+0x26>
 80074cc:	6825      	ldr	r5, [r4, #0]
 80074ce:	1961      	adds	r1, r4, r5
 80074d0:	428b      	cmp	r3, r1
 80074d2:	bf04      	itt	eq
 80074d4:	6819      	ldreq	r1, [r3, #0]
 80074d6:	685b      	ldreq	r3, [r3, #4]
 80074d8:	6063      	str	r3, [r4, #4]
 80074da:	bf04      	itt	eq
 80074dc:	1949      	addeq	r1, r1, r5
 80074de:	6021      	streq	r1, [r4, #0]
 80074e0:	6054      	str	r4, [r2, #4]
 80074e2:	e7ca      	b.n	800747a <_free_r+0x26>
 80074e4:	b003      	add	sp, #12
 80074e6:	bd30      	pop	{r4, r5, pc}
 80074e8:	20000448 	.word	0x20000448

080074ec <sbrk_aligned>:
 80074ec:	b570      	push	{r4, r5, r6, lr}
 80074ee:	4e0e      	ldr	r6, [pc, #56]	; (8007528 <sbrk_aligned+0x3c>)
 80074f0:	460c      	mov	r4, r1
 80074f2:	6831      	ldr	r1, [r6, #0]
 80074f4:	4605      	mov	r5, r0
 80074f6:	b911      	cbnz	r1, 80074fe <sbrk_aligned+0x12>
 80074f8:	f000 f91a 	bl	8007730 <_sbrk_r>
 80074fc:	6030      	str	r0, [r6, #0]
 80074fe:	4621      	mov	r1, r4
 8007500:	4628      	mov	r0, r5
 8007502:	f000 f915 	bl	8007730 <_sbrk_r>
 8007506:	1c43      	adds	r3, r0, #1
 8007508:	d00a      	beq.n	8007520 <sbrk_aligned+0x34>
 800750a:	1cc4      	adds	r4, r0, #3
 800750c:	f024 0403 	bic.w	r4, r4, #3
 8007510:	42a0      	cmp	r0, r4
 8007512:	d007      	beq.n	8007524 <sbrk_aligned+0x38>
 8007514:	1a21      	subs	r1, r4, r0
 8007516:	4628      	mov	r0, r5
 8007518:	f000 f90a 	bl	8007730 <_sbrk_r>
 800751c:	3001      	adds	r0, #1
 800751e:	d101      	bne.n	8007524 <sbrk_aligned+0x38>
 8007520:	f04f 34ff 	mov.w	r4, #4294967295
 8007524:	4620      	mov	r0, r4
 8007526:	bd70      	pop	{r4, r5, r6, pc}
 8007528:	2000044c 	.word	0x2000044c

0800752c <_malloc_r>:
 800752c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007530:	1ccd      	adds	r5, r1, #3
 8007532:	f025 0503 	bic.w	r5, r5, #3
 8007536:	3508      	adds	r5, #8
 8007538:	2d0c      	cmp	r5, #12
 800753a:	bf38      	it	cc
 800753c:	250c      	movcc	r5, #12
 800753e:	2d00      	cmp	r5, #0
 8007540:	4607      	mov	r7, r0
 8007542:	db01      	blt.n	8007548 <_malloc_r+0x1c>
 8007544:	42a9      	cmp	r1, r5
 8007546:	d905      	bls.n	8007554 <_malloc_r+0x28>
 8007548:	230c      	movs	r3, #12
 800754a:	603b      	str	r3, [r7, #0]
 800754c:	2600      	movs	r6, #0
 800754e:	4630      	mov	r0, r6
 8007550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007554:	4e2e      	ldr	r6, [pc, #184]	; (8007610 <_malloc_r+0xe4>)
 8007556:	f000 fbfb 	bl	8007d50 <__malloc_lock>
 800755a:	6833      	ldr	r3, [r6, #0]
 800755c:	461c      	mov	r4, r3
 800755e:	bb34      	cbnz	r4, 80075ae <_malloc_r+0x82>
 8007560:	4629      	mov	r1, r5
 8007562:	4638      	mov	r0, r7
 8007564:	f7ff ffc2 	bl	80074ec <sbrk_aligned>
 8007568:	1c43      	adds	r3, r0, #1
 800756a:	4604      	mov	r4, r0
 800756c:	d14d      	bne.n	800760a <_malloc_r+0xde>
 800756e:	6834      	ldr	r4, [r6, #0]
 8007570:	4626      	mov	r6, r4
 8007572:	2e00      	cmp	r6, #0
 8007574:	d140      	bne.n	80075f8 <_malloc_r+0xcc>
 8007576:	6823      	ldr	r3, [r4, #0]
 8007578:	4631      	mov	r1, r6
 800757a:	4638      	mov	r0, r7
 800757c:	eb04 0803 	add.w	r8, r4, r3
 8007580:	f000 f8d6 	bl	8007730 <_sbrk_r>
 8007584:	4580      	cmp	r8, r0
 8007586:	d13a      	bne.n	80075fe <_malloc_r+0xd2>
 8007588:	6821      	ldr	r1, [r4, #0]
 800758a:	3503      	adds	r5, #3
 800758c:	1a6d      	subs	r5, r5, r1
 800758e:	f025 0503 	bic.w	r5, r5, #3
 8007592:	3508      	adds	r5, #8
 8007594:	2d0c      	cmp	r5, #12
 8007596:	bf38      	it	cc
 8007598:	250c      	movcc	r5, #12
 800759a:	4629      	mov	r1, r5
 800759c:	4638      	mov	r0, r7
 800759e:	f7ff ffa5 	bl	80074ec <sbrk_aligned>
 80075a2:	3001      	adds	r0, #1
 80075a4:	d02b      	beq.n	80075fe <_malloc_r+0xd2>
 80075a6:	6823      	ldr	r3, [r4, #0]
 80075a8:	442b      	add	r3, r5
 80075aa:	6023      	str	r3, [r4, #0]
 80075ac:	e00e      	b.n	80075cc <_malloc_r+0xa0>
 80075ae:	6822      	ldr	r2, [r4, #0]
 80075b0:	1b52      	subs	r2, r2, r5
 80075b2:	d41e      	bmi.n	80075f2 <_malloc_r+0xc6>
 80075b4:	2a0b      	cmp	r2, #11
 80075b6:	d916      	bls.n	80075e6 <_malloc_r+0xba>
 80075b8:	1961      	adds	r1, r4, r5
 80075ba:	42a3      	cmp	r3, r4
 80075bc:	6025      	str	r5, [r4, #0]
 80075be:	bf18      	it	ne
 80075c0:	6059      	strne	r1, [r3, #4]
 80075c2:	6863      	ldr	r3, [r4, #4]
 80075c4:	bf08      	it	eq
 80075c6:	6031      	streq	r1, [r6, #0]
 80075c8:	5162      	str	r2, [r4, r5]
 80075ca:	604b      	str	r3, [r1, #4]
 80075cc:	4638      	mov	r0, r7
 80075ce:	f104 060b 	add.w	r6, r4, #11
 80075d2:	f000 fbc3 	bl	8007d5c <__malloc_unlock>
 80075d6:	f026 0607 	bic.w	r6, r6, #7
 80075da:	1d23      	adds	r3, r4, #4
 80075dc:	1af2      	subs	r2, r6, r3
 80075de:	d0b6      	beq.n	800754e <_malloc_r+0x22>
 80075e0:	1b9b      	subs	r3, r3, r6
 80075e2:	50a3      	str	r3, [r4, r2]
 80075e4:	e7b3      	b.n	800754e <_malloc_r+0x22>
 80075e6:	6862      	ldr	r2, [r4, #4]
 80075e8:	42a3      	cmp	r3, r4
 80075ea:	bf0c      	ite	eq
 80075ec:	6032      	streq	r2, [r6, #0]
 80075ee:	605a      	strne	r2, [r3, #4]
 80075f0:	e7ec      	b.n	80075cc <_malloc_r+0xa0>
 80075f2:	4623      	mov	r3, r4
 80075f4:	6864      	ldr	r4, [r4, #4]
 80075f6:	e7b2      	b.n	800755e <_malloc_r+0x32>
 80075f8:	4634      	mov	r4, r6
 80075fa:	6876      	ldr	r6, [r6, #4]
 80075fc:	e7b9      	b.n	8007572 <_malloc_r+0x46>
 80075fe:	230c      	movs	r3, #12
 8007600:	603b      	str	r3, [r7, #0]
 8007602:	4638      	mov	r0, r7
 8007604:	f000 fbaa 	bl	8007d5c <__malloc_unlock>
 8007608:	e7a1      	b.n	800754e <_malloc_r+0x22>
 800760a:	6025      	str	r5, [r4, #0]
 800760c:	e7de      	b.n	80075cc <_malloc_r+0xa0>
 800760e:	bf00      	nop
 8007610:	20000448 	.word	0x20000448

08007614 <iprintf>:
 8007614:	b40f      	push	{r0, r1, r2, r3}
 8007616:	4b0a      	ldr	r3, [pc, #40]	; (8007640 <iprintf+0x2c>)
 8007618:	b513      	push	{r0, r1, r4, lr}
 800761a:	681c      	ldr	r4, [r3, #0]
 800761c:	b124      	cbz	r4, 8007628 <iprintf+0x14>
 800761e:	69a3      	ldr	r3, [r4, #24]
 8007620:	b913      	cbnz	r3, 8007628 <iprintf+0x14>
 8007622:	4620      	mov	r0, r4
 8007624:	f000 fa8e 	bl	8007b44 <__sinit>
 8007628:	ab05      	add	r3, sp, #20
 800762a:	9a04      	ldr	r2, [sp, #16]
 800762c:	68a1      	ldr	r1, [r4, #8]
 800762e:	9301      	str	r3, [sp, #4]
 8007630:	4620      	mov	r0, r4
 8007632:	f000 fd1f 	bl	8008074 <_vfiprintf_r>
 8007636:	b002      	add	sp, #8
 8007638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800763c:	b004      	add	sp, #16
 800763e:	4770      	bx	lr
 8007640:	20000298 	.word	0x20000298

08007644 <_puts_r>:
 8007644:	b570      	push	{r4, r5, r6, lr}
 8007646:	460e      	mov	r6, r1
 8007648:	4605      	mov	r5, r0
 800764a:	b118      	cbz	r0, 8007654 <_puts_r+0x10>
 800764c:	6983      	ldr	r3, [r0, #24]
 800764e:	b90b      	cbnz	r3, 8007654 <_puts_r+0x10>
 8007650:	f000 fa78 	bl	8007b44 <__sinit>
 8007654:	69ab      	ldr	r3, [r5, #24]
 8007656:	68ac      	ldr	r4, [r5, #8]
 8007658:	b913      	cbnz	r3, 8007660 <_puts_r+0x1c>
 800765a:	4628      	mov	r0, r5
 800765c:	f000 fa72 	bl	8007b44 <__sinit>
 8007660:	4b2c      	ldr	r3, [pc, #176]	; (8007714 <_puts_r+0xd0>)
 8007662:	429c      	cmp	r4, r3
 8007664:	d120      	bne.n	80076a8 <_puts_r+0x64>
 8007666:	686c      	ldr	r4, [r5, #4]
 8007668:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800766a:	07db      	lsls	r3, r3, #31
 800766c:	d405      	bmi.n	800767a <_puts_r+0x36>
 800766e:	89a3      	ldrh	r3, [r4, #12]
 8007670:	0598      	lsls	r0, r3, #22
 8007672:	d402      	bmi.n	800767a <_puts_r+0x36>
 8007674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007676:	f000 fb03 	bl	8007c80 <__retarget_lock_acquire_recursive>
 800767a:	89a3      	ldrh	r3, [r4, #12]
 800767c:	0719      	lsls	r1, r3, #28
 800767e:	d51d      	bpl.n	80076bc <_puts_r+0x78>
 8007680:	6923      	ldr	r3, [r4, #16]
 8007682:	b1db      	cbz	r3, 80076bc <_puts_r+0x78>
 8007684:	3e01      	subs	r6, #1
 8007686:	68a3      	ldr	r3, [r4, #8]
 8007688:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800768c:	3b01      	subs	r3, #1
 800768e:	60a3      	str	r3, [r4, #8]
 8007690:	bb39      	cbnz	r1, 80076e2 <_puts_r+0x9e>
 8007692:	2b00      	cmp	r3, #0
 8007694:	da38      	bge.n	8007708 <_puts_r+0xc4>
 8007696:	4622      	mov	r2, r4
 8007698:	210a      	movs	r1, #10
 800769a:	4628      	mov	r0, r5
 800769c:	f000 f878 	bl	8007790 <__swbuf_r>
 80076a0:	3001      	adds	r0, #1
 80076a2:	d011      	beq.n	80076c8 <_puts_r+0x84>
 80076a4:	250a      	movs	r5, #10
 80076a6:	e011      	b.n	80076cc <_puts_r+0x88>
 80076a8:	4b1b      	ldr	r3, [pc, #108]	; (8007718 <_puts_r+0xd4>)
 80076aa:	429c      	cmp	r4, r3
 80076ac:	d101      	bne.n	80076b2 <_puts_r+0x6e>
 80076ae:	68ac      	ldr	r4, [r5, #8]
 80076b0:	e7da      	b.n	8007668 <_puts_r+0x24>
 80076b2:	4b1a      	ldr	r3, [pc, #104]	; (800771c <_puts_r+0xd8>)
 80076b4:	429c      	cmp	r4, r3
 80076b6:	bf08      	it	eq
 80076b8:	68ec      	ldreq	r4, [r5, #12]
 80076ba:	e7d5      	b.n	8007668 <_puts_r+0x24>
 80076bc:	4621      	mov	r1, r4
 80076be:	4628      	mov	r0, r5
 80076c0:	f000 f8b8 	bl	8007834 <__swsetup_r>
 80076c4:	2800      	cmp	r0, #0
 80076c6:	d0dd      	beq.n	8007684 <_puts_r+0x40>
 80076c8:	f04f 35ff 	mov.w	r5, #4294967295
 80076cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076ce:	07da      	lsls	r2, r3, #31
 80076d0:	d405      	bmi.n	80076de <_puts_r+0x9a>
 80076d2:	89a3      	ldrh	r3, [r4, #12]
 80076d4:	059b      	lsls	r3, r3, #22
 80076d6:	d402      	bmi.n	80076de <_puts_r+0x9a>
 80076d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076da:	f000 fad2 	bl	8007c82 <__retarget_lock_release_recursive>
 80076de:	4628      	mov	r0, r5
 80076e0:	bd70      	pop	{r4, r5, r6, pc}
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	da04      	bge.n	80076f0 <_puts_r+0xac>
 80076e6:	69a2      	ldr	r2, [r4, #24]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	dc06      	bgt.n	80076fa <_puts_r+0xb6>
 80076ec:	290a      	cmp	r1, #10
 80076ee:	d004      	beq.n	80076fa <_puts_r+0xb6>
 80076f0:	6823      	ldr	r3, [r4, #0]
 80076f2:	1c5a      	adds	r2, r3, #1
 80076f4:	6022      	str	r2, [r4, #0]
 80076f6:	7019      	strb	r1, [r3, #0]
 80076f8:	e7c5      	b.n	8007686 <_puts_r+0x42>
 80076fa:	4622      	mov	r2, r4
 80076fc:	4628      	mov	r0, r5
 80076fe:	f000 f847 	bl	8007790 <__swbuf_r>
 8007702:	3001      	adds	r0, #1
 8007704:	d1bf      	bne.n	8007686 <_puts_r+0x42>
 8007706:	e7df      	b.n	80076c8 <_puts_r+0x84>
 8007708:	6823      	ldr	r3, [r4, #0]
 800770a:	250a      	movs	r5, #10
 800770c:	1c5a      	adds	r2, r3, #1
 800770e:	6022      	str	r2, [r4, #0]
 8007710:	701d      	strb	r5, [r3, #0]
 8007712:	e7db      	b.n	80076cc <_puts_r+0x88>
 8007714:	08008c34 	.word	0x08008c34
 8007718:	08008c54 	.word	0x08008c54
 800771c:	08008c14 	.word	0x08008c14

08007720 <puts>:
 8007720:	4b02      	ldr	r3, [pc, #8]	; (800772c <puts+0xc>)
 8007722:	4601      	mov	r1, r0
 8007724:	6818      	ldr	r0, [r3, #0]
 8007726:	f7ff bf8d 	b.w	8007644 <_puts_r>
 800772a:	bf00      	nop
 800772c:	20000298 	.word	0x20000298

08007730 <_sbrk_r>:
 8007730:	b538      	push	{r3, r4, r5, lr}
 8007732:	4d06      	ldr	r5, [pc, #24]	; (800774c <_sbrk_r+0x1c>)
 8007734:	2300      	movs	r3, #0
 8007736:	4604      	mov	r4, r0
 8007738:	4608      	mov	r0, r1
 800773a:	602b      	str	r3, [r5, #0]
 800773c:	f7fc fc64 	bl	8004008 <_sbrk>
 8007740:	1c43      	adds	r3, r0, #1
 8007742:	d102      	bne.n	800774a <_sbrk_r+0x1a>
 8007744:	682b      	ldr	r3, [r5, #0]
 8007746:	b103      	cbz	r3, 800774a <_sbrk_r+0x1a>
 8007748:	6023      	str	r3, [r4, #0]
 800774a:	bd38      	pop	{r3, r4, r5, pc}
 800774c:	20000454 	.word	0x20000454

08007750 <siprintf>:
 8007750:	b40e      	push	{r1, r2, r3}
 8007752:	b500      	push	{lr}
 8007754:	b09c      	sub	sp, #112	; 0x70
 8007756:	ab1d      	add	r3, sp, #116	; 0x74
 8007758:	9002      	str	r0, [sp, #8]
 800775a:	9006      	str	r0, [sp, #24]
 800775c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007760:	4809      	ldr	r0, [pc, #36]	; (8007788 <siprintf+0x38>)
 8007762:	9107      	str	r1, [sp, #28]
 8007764:	9104      	str	r1, [sp, #16]
 8007766:	4909      	ldr	r1, [pc, #36]	; (800778c <siprintf+0x3c>)
 8007768:	f853 2b04 	ldr.w	r2, [r3], #4
 800776c:	9105      	str	r1, [sp, #20]
 800776e:	6800      	ldr	r0, [r0, #0]
 8007770:	9301      	str	r3, [sp, #4]
 8007772:	a902      	add	r1, sp, #8
 8007774:	f000 fb54 	bl	8007e20 <_svfiprintf_r>
 8007778:	9b02      	ldr	r3, [sp, #8]
 800777a:	2200      	movs	r2, #0
 800777c:	701a      	strb	r2, [r3, #0]
 800777e:	b01c      	add	sp, #112	; 0x70
 8007780:	f85d eb04 	ldr.w	lr, [sp], #4
 8007784:	b003      	add	sp, #12
 8007786:	4770      	bx	lr
 8007788:	20000298 	.word	0x20000298
 800778c:	ffff0208 	.word	0xffff0208

08007790 <__swbuf_r>:
 8007790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007792:	460e      	mov	r6, r1
 8007794:	4614      	mov	r4, r2
 8007796:	4605      	mov	r5, r0
 8007798:	b118      	cbz	r0, 80077a2 <__swbuf_r+0x12>
 800779a:	6983      	ldr	r3, [r0, #24]
 800779c:	b90b      	cbnz	r3, 80077a2 <__swbuf_r+0x12>
 800779e:	f000 f9d1 	bl	8007b44 <__sinit>
 80077a2:	4b21      	ldr	r3, [pc, #132]	; (8007828 <__swbuf_r+0x98>)
 80077a4:	429c      	cmp	r4, r3
 80077a6:	d12b      	bne.n	8007800 <__swbuf_r+0x70>
 80077a8:	686c      	ldr	r4, [r5, #4]
 80077aa:	69a3      	ldr	r3, [r4, #24]
 80077ac:	60a3      	str	r3, [r4, #8]
 80077ae:	89a3      	ldrh	r3, [r4, #12]
 80077b0:	071a      	lsls	r2, r3, #28
 80077b2:	d52f      	bpl.n	8007814 <__swbuf_r+0x84>
 80077b4:	6923      	ldr	r3, [r4, #16]
 80077b6:	b36b      	cbz	r3, 8007814 <__swbuf_r+0x84>
 80077b8:	6923      	ldr	r3, [r4, #16]
 80077ba:	6820      	ldr	r0, [r4, #0]
 80077bc:	1ac0      	subs	r0, r0, r3
 80077be:	6963      	ldr	r3, [r4, #20]
 80077c0:	b2f6      	uxtb	r6, r6
 80077c2:	4283      	cmp	r3, r0
 80077c4:	4637      	mov	r7, r6
 80077c6:	dc04      	bgt.n	80077d2 <__swbuf_r+0x42>
 80077c8:	4621      	mov	r1, r4
 80077ca:	4628      	mov	r0, r5
 80077cc:	f000 f926 	bl	8007a1c <_fflush_r>
 80077d0:	bb30      	cbnz	r0, 8007820 <__swbuf_r+0x90>
 80077d2:	68a3      	ldr	r3, [r4, #8]
 80077d4:	3b01      	subs	r3, #1
 80077d6:	60a3      	str	r3, [r4, #8]
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	1c5a      	adds	r2, r3, #1
 80077dc:	6022      	str	r2, [r4, #0]
 80077de:	701e      	strb	r6, [r3, #0]
 80077e0:	6963      	ldr	r3, [r4, #20]
 80077e2:	3001      	adds	r0, #1
 80077e4:	4283      	cmp	r3, r0
 80077e6:	d004      	beq.n	80077f2 <__swbuf_r+0x62>
 80077e8:	89a3      	ldrh	r3, [r4, #12]
 80077ea:	07db      	lsls	r3, r3, #31
 80077ec:	d506      	bpl.n	80077fc <__swbuf_r+0x6c>
 80077ee:	2e0a      	cmp	r6, #10
 80077f0:	d104      	bne.n	80077fc <__swbuf_r+0x6c>
 80077f2:	4621      	mov	r1, r4
 80077f4:	4628      	mov	r0, r5
 80077f6:	f000 f911 	bl	8007a1c <_fflush_r>
 80077fa:	b988      	cbnz	r0, 8007820 <__swbuf_r+0x90>
 80077fc:	4638      	mov	r0, r7
 80077fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007800:	4b0a      	ldr	r3, [pc, #40]	; (800782c <__swbuf_r+0x9c>)
 8007802:	429c      	cmp	r4, r3
 8007804:	d101      	bne.n	800780a <__swbuf_r+0x7a>
 8007806:	68ac      	ldr	r4, [r5, #8]
 8007808:	e7cf      	b.n	80077aa <__swbuf_r+0x1a>
 800780a:	4b09      	ldr	r3, [pc, #36]	; (8007830 <__swbuf_r+0xa0>)
 800780c:	429c      	cmp	r4, r3
 800780e:	bf08      	it	eq
 8007810:	68ec      	ldreq	r4, [r5, #12]
 8007812:	e7ca      	b.n	80077aa <__swbuf_r+0x1a>
 8007814:	4621      	mov	r1, r4
 8007816:	4628      	mov	r0, r5
 8007818:	f000 f80c 	bl	8007834 <__swsetup_r>
 800781c:	2800      	cmp	r0, #0
 800781e:	d0cb      	beq.n	80077b8 <__swbuf_r+0x28>
 8007820:	f04f 37ff 	mov.w	r7, #4294967295
 8007824:	e7ea      	b.n	80077fc <__swbuf_r+0x6c>
 8007826:	bf00      	nop
 8007828:	08008c34 	.word	0x08008c34
 800782c:	08008c54 	.word	0x08008c54
 8007830:	08008c14 	.word	0x08008c14

08007834 <__swsetup_r>:
 8007834:	4b32      	ldr	r3, [pc, #200]	; (8007900 <__swsetup_r+0xcc>)
 8007836:	b570      	push	{r4, r5, r6, lr}
 8007838:	681d      	ldr	r5, [r3, #0]
 800783a:	4606      	mov	r6, r0
 800783c:	460c      	mov	r4, r1
 800783e:	b125      	cbz	r5, 800784a <__swsetup_r+0x16>
 8007840:	69ab      	ldr	r3, [r5, #24]
 8007842:	b913      	cbnz	r3, 800784a <__swsetup_r+0x16>
 8007844:	4628      	mov	r0, r5
 8007846:	f000 f97d 	bl	8007b44 <__sinit>
 800784a:	4b2e      	ldr	r3, [pc, #184]	; (8007904 <__swsetup_r+0xd0>)
 800784c:	429c      	cmp	r4, r3
 800784e:	d10f      	bne.n	8007870 <__swsetup_r+0x3c>
 8007850:	686c      	ldr	r4, [r5, #4]
 8007852:	89a3      	ldrh	r3, [r4, #12]
 8007854:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007858:	0719      	lsls	r1, r3, #28
 800785a:	d42c      	bmi.n	80078b6 <__swsetup_r+0x82>
 800785c:	06dd      	lsls	r5, r3, #27
 800785e:	d411      	bmi.n	8007884 <__swsetup_r+0x50>
 8007860:	2309      	movs	r3, #9
 8007862:	6033      	str	r3, [r6, #0]
 8007864:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007868:	81a3      	strh	r3, [r4, #12]
 800786a:	f04f 30ff 	mov.w	r0, #4294967295
 800786e:	e03e      	b.n	80078ee <__swsetup_r+0xba>
 8007870:	4b25      	ldr	r3, [pc, #148]	; (8007908 <__swsetup_r+0xd4>)
 8007872:	429c      	cmp	r4, r3
 8007874:	d101      	bne.n	800787a <__swsetup_r+0x46>
 8007876:	68ac      	ldr	r4, [r5, #8]
 8007878:	e7eb      	b.n	8007852 <__swsetup_r+0x1e>
 800787a:	4b24      	ldr	r3, [pc, #144]	; (800790c <__swsetup_r+0xd8>)
 800787c:	429c      	cmp	r4, r3
 800787e:	bf08      	it	eq
 8007880:	68ec      	ldreq	r4, [r5, #12]
 8007882:	e7e6      	b.n	8007852 <__swsetup_r+0x1e>
 8007884:	0758      	lsls	r0, r3, #29
 8007886:	d512      	bpl.n	80078ae <__swsetup_r+0x7a>
 8007888:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800788a:	b141      	cbz	r1, 800789e <__swsetup_r+0x6a>
 800788c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007890:	4299      	cmp	r1, r3
 8007892:	d002      	beq.n	800789a <__swsetup_r+0x66>
 8007894:	4630      	mov	r0, r6
 8007896:	f7ff fddd 	bl	8007454 <_free_r>
 800789a:	2300      	movs	r3, #0
 800789c:	6363      	str	r3, [r4, #52]	; 0x34
 800789e:	89a3      	ldrh	r3, [r4, #12]
 80078a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80078a4:	81a3      	strh	r3, [r4, #12]
 80078a6:	2300      	movs	r3, #0
 80078a8:	6063      	str	r3, [r4, #4]
 80078aa:	6923      	ldr	r3, [r4, #16]
 80078ac:	6023      	str	r3, [r4, #0]
 80078ae:	89a3      	ldrh	r3, [r4, #12]
 80078b0:	f043 0308 	orr.w	r3, r3, #8
 80078b4:	81a3      	strh	r3, [r4, #12]
 80078b6:	6923      	ldr	r3, [r4, #16]
 80078b8:	b94b      	cbnz	r3, 80078ce <__swsetup_r+0x9a>
 80078ba:	89a3      	ldrh	r3, [r4, #12]
 80078bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80078c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078c4:	d003      	beq.n	80078ce <__swsetup_r+0x9a>
 80078c6:	4621      	mov	r1, r4
 80078c8:	4630      	mov	r0, r6
 80078ca:	f000 fa01 	bl	8007cd0 <__smakebuf_r>
 80078ce:	89a0      	ldrh	r0, [r4, #12]
 80078d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078d4:	f010 0301 	ands.w	r3, r0, #1
 80078d8:	d00a      	beq.n	80078f0 <__swsetup_r+0xbc>
 80078da:	2300      	movs	r3, #0
 80078dc:	60a3      	str	r3, [r4, #8]
 80078de:	6963      	ldr	r3, [r4, #20]
 80078e0:	425b      	negs	r3, r3
 80078e2:	61a3      	str	r3, [r4, #24]
 80078e4:	6923      	ldr	r3, [r4, #16]
 80078e6:	b943      	cbnz	r3, 80078fa <__swsetup_r+0xc6>
 80078e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80078ec:	d1ba      	bne.n	8007864 <__swsetup_r+0x30>
 80078ee:	bd70      	pop	{r4, r5, r6, pc}
 80078f0:	0781      	lsls	r1, r0, #30
 80078f2:	bf58      	it	pl
 80078f4:	6963      	ldrpl	r3, [r4, #20]
 80078f6:	60a3      	str	r3, [r4, #8]
 80078f8:	e7f4      	b.n	80078e4 <__swsetup_r+0xb0>
 80078fa:	2000      	movs	r0, #0
 80078fc:	e7f7      	b.n	80078ee <__swsetup_r+0xba>
 80078fe:	bf00      	nop
 8007900:	20000298 	.word	0x20000298
 8007904:	08008c34 	.word	0x08008c34
 8007908:	08008c54 	.word	0x08008c54
 800790c:	08008c14 	.word	0x08008c14

08007910 <__sflush_r>:
 8007910:	898a      	ldrh	r2, [r1, #12]
 8007912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007916:	4605      	mov	r5, r0
 8007918:	0710      	lsls	r0, r2, #28
 800791a:	460c      	mov	r4, r1
 800791c:	d458      	bmi.n	80079d0 <__sflush_r+0xc0>
 800791e:	684b      	ldr	r3, [r1, #4]
 8007920:	2b00      	cmp	r3, #0
 8007922:	dc05      	bgt.n	8007930 <__sflush_r+0x20>
 8007924:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007926:	2b00      	cmp	r3, #0
 8007928:	dc02      	bgt.n	8007930 <__sflush_r+0x20>
 800792a:	2000      	movs	r0, #0
 800792c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007930:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007932:	2e00      	cmp	r6, #0
 8007934:	d0f9      	beq.n	800792a <__sflush_r+0x1a>
 8007936:	2300      	movs	r3, #0
 8007938:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800793c:	682f      	ldr	r7, [r5, #0]
 800793e:	602b      	str	r3, [r5, #0]
 8007940:	d032      	beq.n	80079a8 <__sflush_r+0x98>
 8007942:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007944:	89a3      	ldrh	r3, [r4, #12]
 8007946:	075a      	lsls	r2, r3, #29
 8007948:	d505      	bpl.n	8007956 <__sflush_r+0x46>
 800794a:	6863      	ldr	r3, [r4, #4]
 800794c:	1ac0      	subs	r0, r0, r3
 800794e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007950:	b10b      	cbz	r3, 8007956 <__sflush_r+0x46>
 8007952:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007954:	1ac0      	subs	r0, r0, r3
 8007956:	2300      	movs	r3, #0
 8007958:	4602      	mov	r2, r0
 800795a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800795c:	6a21      	ldr	r1, [r4, #32]
 800795e:	4628      	mov	r0, r5
 8007960:	47b0      	blx	r6
 8007962:	1c43      	adds	r3, r0, #1
 8007964:	89a3      	ldrh	r3, [r4, #12]
 8007966:	d106      	bne.n	8007976 <__sflush_r+0x66>
 8007968:	6829      	ldr	r1, [r5, #0]
 800796a:	291d      	cmp	r1, #29
 800796c:	d82c      	bhi.n	80079c8 <__sflush_r+0xb8>
 800796e:	4a2a      	ldr	r2, [pc, #168]	; (8007a18 <__sflush_r+0x108>)
 8007970:	40ca      	lsrs	r2, r1
 8007972:	07d6      	lsls	r6, r2, #31
 8007974:	d528      	bpl.n	80079c8 <__sflush_r+0xb8>
 8007976:	2200      	movs	r2, #0
 8007978:	6062      	str	r2, [r4, #4]
 800797a:	04d9      	lsls	r1, r3, #19
 800797c:	6922      	ldr	r2, [r4, #16]
 800797e:	6022      	str	r2, [r4, #0]
 8007980:	d504      	bpl.n	800798c <__sflush_r+0x7c>
 8007982:	1c42      	adds	r2, r0, #1
 8007984:	d101      	bne.n	800798a <__sflush_r+0x7a>
 8007986:	682b      	ldr	r3, [r5, #0]
 8007988:	b903      	cbnz	r3, 800798c <__sflush_r+0x7c>
 800798a:	6560      	str	r0, [r4, #84]	; 0x54
 800798c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800798e:	602f      	str	r7, [r5, #0]
 8007990:	2900      	cmp	r1, #0
 8007992:	d0ca      	beq.n	800792a <__sflush_r+0x1a>
 8007994:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007998:	4299      	cmp	r1, r3
 800799a:	d002      	beq.n	80079a2 <__sflush_r+0x92>
 800799c:	4628      	mov	r0, r5
 800799e:	f7ff fd59 	bl	8007454 <_free_r>
 80079a2:	2000      	movs	r0, #0
 80079a4:	6360      	str	r0, [r4, #52]	; 0x34
 80079a6:	e7c1      	b.n	800792c <__sflush_r+0x1c>
 80079a8:	6a21      	ldr	r1, [r4, #32]
 80079aa:	2301      	movs	r3, #1
 80079ac:	4628      	mov	r0, r5
 80079ae:	47b0      	blx	r6
 80079b0:	1c41      	adds	r1, r0, #1
 80079b2:	d1c7      	bne.n	8007944 <__sflush_r+0x34>
 80079b4:	682b      	ldr	r3, [r5, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d0c4      	beq.n	8007944 <__sflush_r+0x34>
 80079ba:	2b1d      	cmp	r3, #29
 80079bc:	d001      	beq.n	80079c2 <__sflush_r+0xb2>
 80079be:	2b16      	cmp	r3, #22
 80079c0:	d101      	bne.n	80079c6 <__sflush_r+0xb6>
 80079c2:	602f      	str	r7, [r5, #0]
 80079c4:	e7b1      	b.n	800792a <__sflush_r+0x1a>
 80079c6:	89a3      	ldrh	r3, [r4, #12]
 80079c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079cc:	81a3      	strh	r3, [r4, #12]
 80079ce:	e7ad      	b.n	800792c <__sflush_r+0x1c>
 80079d0:	690f      	ldr	r7, [r1, #16]
 80079d2:	2f00      	cmp	r7, #0
 80079d4:	d0a9      	beq.n	800792a <__sflush_r+0x1a>
 80079d6:	0793      	lsls	r3, r2, #30
 80079d8:	680e      	ldr	r6, [r1, #0]
 80079da:	bf08      	it	eq
 80079dc:	694b      	ldreq	r3, [r1, #20]
 80079de:	600f      	str	r7, [r1, #0]
 80079e0:	bf18      	it	ne
 80079e2:	2300      	movne	r3, #0
 80079e4:	eba6 0807 	sub.w	r8, r6, r7
 80079e8:	608b      	str	r3, [r1, #8]
 80079ea:	f1b8 0f00 	cmp.w	r8, #0
 80079ee:	dd9c      	ble.n	800792a <__sflush_r+0x1a>
 80079f0:	6a21      	ldr	r1, [r4, #32]
 80079f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80079f4:	4643      	mov	r3, r8
 80079f6:	463a      	mov	r2, r7
 80079f8:	4628      	mov	r0, r5
 80079fa:	47b0      	blx	r6
 80079fc:	2800      	cmp	r0, #0
 80079fe:	dc06      	bgt.n	8007a0e <__sflush_r+0xfe>
 8007a00:	89a3      	ldrh	r3, [r4, #12]
 8007a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a06:	81a3      	strh	r3, [r4, #12]
 8007a08:	f04f 30ff 	mov.w	r0, #4294967295
 8007a0c:	e78e      	b.n	800792c <__sflush_r+0x1c>
 8007a0e:	4407      	add	r7, r0
 8007a10:	eba8 0800 	sub.w	r8, r8, r0
 8007a14:	e7e9      	b.n	80079ea <__sflush_r+0xda>
 8007a16:	bf00      	nop
 8007a18:	20400001 	.word	0x20400001

08007a1c <_fflush_r>:
 8007a1c:	b538      	push	{r3, r4, r5, lr}
 8007a1e:	690b      	ldr	r3, [r1, #16]
 8007a20:	4605      	mov	r5, r0
 8007a22:	460c      	mov	r4, r1
 8007a24:	b913      	cbnz	r3, 8007a2c <_fflush_r+0x10>
 8007a26:	2500      	movs	r5, #0
 8007a28:	4628      	mov	r0, r5
 8007a2a:	bd38      	pop	{r3, r4, r5, pc}
 8007a2c:	b118      	cbz	r0, 8007a36 <_fflush_r+0x1a>
 8007a2e:	6983      	ldr	r3, [r0, #24]
 8007a30:	b90b      	cbnz	r3, 8007a36 <_fflush_r+0x1a>
 8007a32:	f000 f887 	bl	8007b44 <__sinit>
 8007a36:	4b14      	ldr	r3, [pc, #80]	; (8007a88 <_fflush_r+0x6c>)
 8007a38:	429c      	cmp	r4, r3
 8007a3a:	d11b      	bne.n	8007a74 <_fflush_r+0x58>
 8007a3c:	686c      	ldr	r4, [r5, #4]
 8007a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d0ef      	beq.n	8007a26 <_fflush_r+0xa>
 8007a46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a48:	07d0      	lsls	r0, r2, #31
 8007a4a:	d404      	bmi.n	8007a56 <_fflush_r+0x3a>
 8007a4c:	0599      	lsls	r1, r3, #22
 8007a4e:	d402      	bmi.n	8007a56 <_fflush_r+0x3a>
 8007a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a52:	f000 f915 	bl	8007c80 <__retarget_lock_acquire_recursive>
 8007a56:	4628      	mov	r0, r5
 8007a58:	4621      	mov	r1, r4
 8007a5a:	f7ff ff59 	bl	8007910 <__sflush_r>
 8007a5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a60:	07da      	lsls	r2, r3, #31
 8007a62:	4605      	mov	r5, r0
 8007a64:	d4e0      	bmi.n	8007a28 <_fflush_r+0xc>
 8007a66:	89a3      	ldrh	r3, [r4, #12]
 8007a68:	059b      	lsls	r3, r3, #22
 8007a6a:	d4dd      	bmi.n	8007a28 <_fflush_r+0xc>
 8007a6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a6e:	f000 f908 	bl	8007c82 <__retarget_lock_release_recursive>
 8007a72:	e7d9      	b.n	8007a28 <_fflush_r+0xc>
 8007a74:	4b05      	ldr	r3, [pc, #20]	; (8007a8c <_fflush_r+0x70>)
 8007a76:	429c      	cmp	r4, r3
 8007a78:	d101      	bne.n	8007a7e <_fflush_r+0x62>
 8007a7a:	68ac      	ldr	r4, [r5, #8]
 8007a7c:	e7df      	b.n	8007a3e <_fflush_r+0x22>
 8007a7e:	4b04      	ldr	r3, [pc, #16]	; (8007a90 <_fflush_r+0x74>)
 8007a80:	429c      	cmp	r4, r3
 8007a82:	bf08      	it	eq
 8007a84:	68ec      	ldreq	r4, [r5, #12]
 8007a86:	e7da      	b.n	8007a3e <_fflush_r+0x22>
 8007a88:	08008c34 	.word	0x08008c34
 8007a8c:	08008c54 	.word	0x08008c54
 8007a90:	08008c14 	.word	0x08008c14

08007a94 <std>:
 8007a94:	2300      	movs	r3, #0
 8007a96:	b510      	push	{r4, lr}
 8007a98:	4604      	mov	r4, r0
 8007a9a:	e9c0 3300 	strd	r3, r3, [r0]
 8007a9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007aa2:	6083      	str	r3, [r0, #8]
 8007aa4:	8181      	strh	r1, [r0, #12]
 8007aa6:	6643      	str	r3, [r0, #100]	; 0x64
 8007aa8:	81c2      	strh	r2, [r0, #14]
 8007aaa:	6183      	str	r3, [r0, #24]
 8007aac:	4619      	mov	r1, r3
 8007aae:	2208      	movs	r2, #8
 8007ab0:	305c      	adds	r0, #92	; 0x5c
 8007ab2:	f7ff fcc7 	bl	8007444 <memset>
 8007ab6:	4b05      	ldr	r3, [pc, #20]	; (8007acc <std+0x38>)
 8007ab8:	6263      	str	r3, [r4, #36]	; 0x24
 8007aba:	4b05      	ldr	r3, [pc, #20]	; (8007ad0 <std+0x3c>)
 8007abc:	62a3      	str	r3, [r4, #40]	; 0x28
 8007abe:	4b05      	ldr	r3, [pc, #20]	; (8007ad4 <std+0x40>)
 8007ac0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ac2:	4b05      	ldr	r3, [pc, #20]	; (8007ad8 <std+0x44>)
 8007ac4:	6224      	str	r4, [r4, #32]
 8007ac6:	6323      	str	r3, [r4, #48]	; 0x30
 8007ac8:	bd10      	pop	{r4, pc}
 8007aca:	bf00      	nop
 8007acc:	080085fd 	.word	0x080085fd
 8007ad0:	0800861f 	.word	0x0800861f
 8007ad4:	08008657 	.word	0x08008657
 8007ad8:	0800867b 	.word	0x0800867b

08007adc <_cleanup_r>:
 8007adc:	4901      	ldr	r1, [pc, #4]	; (8007ae4 <_cleanup_r+0x8>)
 8007ade:	f000 b8af 	b.w	8007c40 <_fwalk_reent>
 8007ae2:	bf00      	nop
 8007ae4:	08007a1d 	.word	0x08007a1d

08007ae8 <__sfmoreglue>:
 8007ae8:	b570      	push	{r4, r5, r6, lr}
 8007aea:	2268      	movs	r2, #104	; 0x68
 8007aec:	1e4d      	subs	r5, r1, #1
 8007aee:	4355      	muls	r5, r2
 8007af0:	460e      	mov	r6, r1
 8007af2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007af6:	f7ff fd19 	bl	800752c <_malloc_r>
 8007afa:	4604      	mov	r4, r0
 8007afc:	b140      	cbz	r0, 8007b10 <__sfmoreglue+0x28>
 8007afe:	2100      	movs	r1, #0
 8007b00:	e9c0 1600 	strd	r1, r6, [r0]
 8007b04:	300c      	adds	r0, #12
 8007b06:	60a0      	str	r0, [r4, #8]
 8007b08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b0c:	f7ff fc9a 	bl	8007444 <memset>
 8007b10:	4620      	mov	r0, r4
 8007b12:	bd70      	pop	{r4, r5, r6, pc}

08007b14 <__sfp_lock_acquire>:
 8007b14:	4801      	ldr	r0, [pc, #4]	; (8007b1c <__sfp_lock_acquire+0x8>)
 8007b16:	f000 b8b3 	b.w	8007c80 <__retarget_lock_acquire_recursive>
 8007b1a:	bf00      	nop
 8007b1c:	20000451 	.word	0x20000451

08007b20 <__sfp_lock_release>:
 8007b20:	4801      	ldr	r0, [pc, #4]	; (8007b28 <__sfp_lock_release+0x8>)
 8007b22:	f000 b8ae 	b.w	8007c82 <__retarget_lock_release_recursive>
 8007b26:	bf00      	nop
 8007b28:	20000451 	.word	0x20000451

08007b2c <__sinit_lock_acquire>:
 8007b2c:	4801      	ldr	r0, [pc, #4]	; (8007b34 <__sinit_lock_acquire+0x8>)
 8007b2e:	f000 b8a7 	b.w	8007c80 <__retarget_lock_acquire_recursive>
 8007b32:	bf00      	nop
 8007b34:	20000452 	.word	0x20000452

08007b38 <__sinit_lock_release>:
 8007b38:	4801      	ldr	r0, [pc, #4]	; (8007b40 <__sinit_lock_release+0x8>)
 8007b3a:	f000 b8a2 	b.w	8007c82 <__retarget_lock_release_recursive>
 8007b3e:	bf00      	nop
 8007b40:	20000452 	.word	0x20000452

08007b44 <__sinit>:
 8007b44:	b510      	push	{r4, lr}
 8007b46:	4604      	mov	r4, r0
 8007b48:	f7ff fff0 	bl	8007b2c <__sinit_lock_acquire>
 8007b4c:	69a3      	ldr	r3, [r4, #24]
 8007b4e:	b11b      	cbz	r3, 8007b58 <__sinit+0x14>
 8007b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b54:	f7ff bff0 	b.w	8007b38 <__sinit_lock_release>
 8007b58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007b5c:	6523      	str	r3, [r4, #80]	; 0x50
 8007b5e:	4b13      	ldr	r3, [pc, #76]	; (8007bac <__sinit+0x68>)
 8007b60:	4a13      	ldr	r2, [pc, #76]	; (8007bb0 <__sinit+0x6c>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	62a2      	str	r2, [r4, #40]	; 0x28
 8007b66:	42a3      	cmp	r3, r4
 8007b68:	bf04      	itt	eq
 8007b6a:	2301      	moveq	r3, #1
 8007b6c:	61a3      	streq	r3, [r4, #24]
 8007b6e:	4620      	mov	r0, r4
 8007b70:	f000 f820 	bl	8007bb4 <__sfp>
 8007b74:	6060      	str	r0, [r4, #4]
 8007b76:	4620      	mov	r0, r4
 8007b78:	f000 f81c 	bl	8007bb4 <__sfp>
 8007b7c:	60a0      	str	r0, [r4, #8]
 8007b7e:	4620      	mov	r0, r4
 8007b80:	f000 f818 	bl	8007bb4 <__sfp>
 8007b84:	2200      	movs	r2, #0
 8007b86:	60e0      	str	r0, [r4, #12]
 8007b88:	2104      	movs	r1, #4
 8007b8a:	6860      	ldr	r0, [r4, #4]
 8007b8c:	f7ff ff82 	bl	8007a94 <std>
 8007b90:	68a0      	ldr	r0, [r4, #8]
 8007b92:	2201      	movs	r2, #1
 8007b94:	2109      	movs	r1, #9
 8007b96:	f7ff ff7d 	bl	8007a94 <std>
 8007b9a:	68e0      	ldr	r0, [r4, #12]
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	2112      	movs	r1, #18
 8007ba0:	f7ff ff78 	bl	8007a94 <std>
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	61a3      	str	r3, [r4, #24]
 8007ba8:	e7d2      	b.n	8007b50 <__sinit+0xc>
 8007baa:	bf00      	nop
 8007bac:	08008c10 	.word	0x08008c10
 8007bb0:	08007add 	.word	0x08007add

08007bb4 <__sfp>:
 8007bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb6:	4607      	mov	r7, r0
 8007bb8:	f7ff ffac 	bl	8007b14 <__sfp_lock_acquire>
 8007bbc:	4b1e      	ldr	r3, [pc, #120]	; (8007c38 <__sfp+0x84>)
 8007bbe:	681e      	ldr	r6, [r3, #0]
 8007bc0:	69b3      	ldr	r3, [r6, #24]
 8007bc2:	b913      	cbnz	r3, 8007bca <__sfp+0x16>
 8007bc4:	4630      	mov	r0, r6
 8007bc6:	f7ff ffbd 	bl	8007b44 <__sinit>
 8007bca:	3648      	adds	r6, #72	; 0x48
 8007bcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	d503      	bpl.n	8007bdc <__sfp+0x28>
 8007bd4:	6833      	ldr	r3, [r6, #0]
 8007bd6:	b30b      	cbz	r3, 8007c1c <__sfp+0x68>
 8007bd8:	6836      	ldr	r6, [r6, #0]
 8007bda:	e7f7      	b.n	8007bcc <__sfp+0x18>
 8007bdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007be0:	b9d5      	cbnz	r5, 8007c18 <__sfp+0x64>
 8007be2:	4b16      	ldr	r3, [pc, #88]	; (8007c3c <__sfp+0x88>)
 8007be4:	60e3      	str	r3, [r4, #12]
 8007be6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007bea:	6665      	str	r5, [r4, #100]	; 0x64
 8007bec:	f000 f847 	bl	8007c7e <__retarget_lock_init_recursive>
 8007bf0:	f7ff ff96 	bl	8007b20 <__sfp_lock_release>
 8007bf4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007bf8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007bfc:	6025      	str	r5, [r4, #0]
 8007bfe:	61a5      	str	r5, [r4, #24]
 8007c00:	2208      	movs	r2, #8
 8007c02:	4629      	mov	r1, r5
 8007c04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c08:	f7ff fc1c 	bl	8007444 <memset>
 8007c0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007c10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007c14:	4620      	mov	r0, r4
 8007c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c18:	3468      	adds	r4, #104	; 0x68
 8007c1a:	e7d9      	b.n	8007bd0 <__sfp+0x1c>
 8007c1c:	2104      	movs	r1, #4
 8007c1e:	4638      	mov	r0, r7
 8007c20:	f7ff ff62 	bl	8007ae8 <__sfmoreglue>
 8007c24:	4604      	mov	r4, r0
 8007c26:	6030      	str	r0, [r6, #0]
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	d1d5      	bne.n	8007bd8 <__sfp+0x24>
 8007c2c:	f7ff ff78 	bl	8007b20 <__sfp_lock_release>
 8007c30:	230c      	movs	r3, #12
 8007c32:	603b      	str	r3, [r7, #0]
 8007c34:	e7ee      	b.n	8007c14 <__sfp+0x60>
 8007c36:	bf00      	nop
 8007c38:	08008c10 	.word	0x08008c10
 8007c3c:	ffff0001 	.word	0xffff0001

08007c40 <_fwalk_reent>:
 8007c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c44:	4606      	mov	r6, r0
 8007c46:	4688      	mov	r8, r1
 8007c48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007c4c:	2700      	movs	r7, #0
 8007c4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c52:	f1b9 0901 	subs.w	r9, r9, #1
 8007c56:	d505      	bpl.n	8007c64 <_fwalk_reent+0x24>
 8007c58:	6824      	ldr	r4, [r4, #0]
 8007c5a:	2c00      	cmp	r4, #0
 8007c5c:	d1f7      	bne.n	8007c4e <_fwalk_reent+0xe>
 8007c5e:	4638      	mov	r0, r7
 8007c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c64:	89ab      	ldrh	r3, [r5, #12]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d907      	bls.n	8007c7a <_fwalk_reent+0x3a>
 8007c6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	d003      	beq.n	8007c7a <_fwalk_reent+0x3a>
 8007c72:	4629      	mov	r1, r5
 8007c74:	4630      	mov	r0, r6
 8007c76:	47c0      	blx	r8
 8007c78:	4307      	orrs	r7, r0
 8007c7a:	3568      	adds	r5, #104	; 0x68
 8007c7c:	e7e9      	b.n	8007c52 <_fwalk_reent+0x12>

08007c7e <__retarget_lock_init_recursive>:
 8007c7e:	4770      	bx	lr

08007c80 <__retarget_lock_acquire_recursive>:
 8007c80:	4770      	bx	lr

08007c82 <__retarget_lock_release_recursive>:
 8007c82:	4770      	bx	lr

08007c84 <__swhatbuf_r>:
 8007c84:	b570      	push	{r4, r5, r6, lr}
 8007c86:	460e      	mov	r6, r1
 8007c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c8c:	2900      	cmp	r1, #0
 8007c8e:	b096      	sub	sp, #88	; 0x58
 8007c90:	4614      	mov	r4, r2
 8007c92:	461d      	mov	r5, r3
 8007c94:	da08      	bge.n	8007ca8 <__swhatbuf_r+0x24>
 8007c96:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	602a      	str	r2, [r5, #0]
 8007c9e:	061a      	lsls	r2, r3, #24
 8007ca0:	d410      	bmi.n	8007cc4 <__swhatbuf_r+0x40>
 8007ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ca6:	e00e      	b.n	8007cc6 <__swhatbuf_r+0x42>
 8007ca8:	466a      	mov	r2, sp
 8007caa:	f000 fd0d 	bl	80086c8 <_fstat_r>
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	dbf1      	blt.n	8007c96 <__swhatbuf_r+0x12>
 8007cb2:	9a01      	ldr	r2, [sp, #4]
 8007cb4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007cb8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007cbc:	425a      	negs	r2, r3
 8007cbe:	415a      	adcs	r2, r3
 8007cc0:	602a      	str	r2, [r5, #0]
 8007cc2:	e7ee      	b.n	8007ca2 <__swhatbuf_r+0x1e>
 8007cc4:	2340      	movs	r3, #64	; 0x40
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	6023      	str	r3, [r4, #0]
 8007cca:	b016      	add	sp, #88	; 0x58
 8007ccc:	bd70      	pop	{r4, r5, r6, pc}
	...

08007cd0 <__smakebuf_r>:
 8007cd0:	898b      	ldrh	r3, [r1, #12]
 8007cd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007cd4:	079d      	lsls	r5, r3, #30
 8007cd6:	4606      	mov	r6, r0
 8007cd8:	460c      	mov	r4, r1
 8007cda:	d507      	bpl.n	8007cec <__smakebuf_r+0x1c>
 8007cdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ce0:	6023      	str	r3, [r4, #0]
 8007ce2:	6123      	str	r3, [r4, #16]
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	6163      	str	r3, [r4, #20]
 8007ce8:	b002      	add	sp, #8
 8007cea:	bd70      	pop	{r4, r5, r6, pc}
 8007cec:	ab01      	add	r3, sp, #4
 8007cee:	466a      	mov	r2, sp
 8007cf0:	f7ff ffc8 	bl	8007c84 <__swhatbuf_r>
 8007cf4:	9900      	ldr	r1, [sp, #0]
 8007cf6:	4605      	mov	r5, r0
 8007cf8:	4630      	mov	r0, r6
 8007cfa:	f7ff fc17 	bl	800752c <_malloc_r>
 8007cfe:	b948      	cbnz	r0, 8007d14 <__smakebuf_r+0x44>
 8007d00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d04:	059a      	lsls	r2, r3, #22
 8007d06:	d4ef      	bmi.n	8007ce8 <__smakebuf_r+0x18>
 8007d08:	f023 0303 	bic.w	r3, r3, #3
 8007d0c:	f043 0302 	orr.w	r3, r3, #2
 8007d10:	81a3      	strh	r3, [r4, #12]
 8007d12:	e7e3      	b.n	8007cdc <__smakebuf_r+0xc>
 8007d14:	4b0d      	ldr	r3, [pc, #52]	; (8007d4c <__smakebuf_r+0x7c>)
 8007d16:	62b3      	str	r3, [r6, #40]	; 0x28
 8007d18:	89a3      	ldrh	r3, [r4, #12]
 8007d1a:	6020      	str	r0, [r4, #0]
 8007d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d20:	81a3      	strh	r3, [r4, #12]
 8007d22:	9b00      	ldr	r3, [sp, #0]
 8007d24:	6163      	str	r3, [r4, #20]
 8007d26:	9b01      	ldr	r3, [sp, #4]
 8007d28:	6120      	str	r0, [r4, #16]
 8007d2a:	b15b      	cbz	r3, 8007d44 <__smakebuf_r+0x74>
 8007d2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d30:	4630      	mov	r0, r6
 8007d32:	f000 fcdb 	bl	80086ec <_isatty_r>
 8007d36:	b128      	cbz	r0, 8007d44 <__smakebuf_r+0x74>
 8007d38:	89a3      	ldrh	r3, [r4, #12]
 8007d3a:	f023 0303 	bic.w	r3, r3, #3
 8007d3e:	f043 0301 	orr.w	r3, r3, #1
 8007d42:	81a3      	strh	r3, [r4, #12]
 8007d44:	89a0      	ldrh	r0, [r4, #12]
 8007d46:	4305      	orrs	r5, r0
 8007d48:	81a5      	strh	r5, [r4, #12]
 8007d4a:	e7cd      	b.n	8007ce8 <__smakebuf_r+0x18>
 8007d4c:	08007add 	.word	0x08007add

08007d50 <__malloc_lock>:
 8007d50:	4801      	ldr	r0, [pc, #4]	; (8007d58 <__malloc_lock+0x8>)
 8007d52:	f7ff bf95 	b.w	8007c80 <__retarget_lock_acquire_recursive>
 8007d56:	bf00      	nop
 8007d58:	20000450 	.word	0x20000450

08007d5c <__malloc_unlock>:
 8007d5c:	4801      	ldr	r0, [pc, #4]	; (8007d64 <__malloc_unlock+0x8>)
 8007d5e:	f7ff bf90 	b.w	8007c82 <__retarget_lock_release_recursive>
 8007d62:	bf00      	nop
 8007d64:	20000450 	.word	0x20000450

08007d68 <__ssputs_r>:
 8007d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d6c:	688e      	ldr	r6, [r1, #8]
 8007d6e:	429e      	cmp	r6, r3
 8007d70:	4682      	mov	sl, r0
 8007d72:	460c      	mov	r4, r1
 8007d74:	4690      	mov	r8, r2
 8007d76:	461f      	mov	r7, r3
 8007d78:	d838      	bhi.n	8007dec <__ssputs_r+0x84>
 8007d7a:	898a      	ldrh	r2, [r1, #12]
 8007d7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d80:	d032      	beq.n	8007de8 <__ssputs_r+0x80>
 8007d82:	6825      	ldr	r5, [r4, #0]
 8007d84:	6909      	ldr	r1, [r1, #16]
 8007d86:	eba5 0901 	sub.w	r9, r5, r1
 8007d8a:	6965      	ldr	r5, [r4, #20]
 8007d8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d94:	3301      	adds	r3, #1
 8007d96:	444b      	add	r3, r9
 8007d98:	106d      	asrs	r5, r5, #1
 8007d9a:	429d      	cmp	r5, r3
 8007d9c:	bf38      	it	cc
 8007d9e:	461d      	movcc	r5, r3
 8007da0:	0553      	lsls	r3, r2, #21
 8007da2:	d531      	bpl.n	8007e08 <__ssputs_r+0xa0>
 8007da4:	4629      	mov	r1, r5
 8007da6:	f7ff fbc1 	bl	800752c <_malloc_r>
 8007daa:	4606      	mov	r6, r0
 8007dac:	b950      	cbnz	r0, 8007dc4 <__ssputs_r+0x5c>
 8007dae:	230c      	movs	r3, #12
 8007db0:	f8ca 3000 	str.w	r3, [sl]
 8007db4:	89a3      	ldrh	r3, [r4, #12]
 8007db6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dba:	81a3      	strh	r3, [r4, #12]
 8007dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dc4:	6921      	ldr	r1, [r4, #16]
 8007dc6:	464a      	mov	r2, r9
 8007dc8:	f7ff fb2e 	bl	8007428 <memcpy>
 8007dcc:	89a3      	ldrh	r3, [r4, #12]
 8007dce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dd6:	81a3      	strh	r3, [r4, #12]
 8007dd8:	6126      	str	r6, [r4, #16]
 8007dda:	6165      	str	r5, [r4, #20]
 8007ddc:	444e      	add	r6, r9
 8007dde:	eba5 0509 	sub.w	r5, r5, r9
 8007de2:	6026      	str	r6, [r4, #0]
 8007de4:	60a5      	str	r5, [r4, #8]
 8007de6:	463e      	mov	r6, r7
 8007de8:	42be      	cmp	r6, r7
 8007dea:	d900      	bls.n	8007dee <__ssputs_r+0x86>
 8007dec:	463e      	mov	r6, r7
 8007dee:	6820      	ldr	r0, [r4, #0]
 8007df0:	4632      	mov	r2, r6
 8007df2:	4641      	mov	r1, r8
 8007df4:	f000 fc9c 	bl	8008730 <memmove>
 8007df8:	68a3      	ldr	r3, [r4, #8]
 8007dfa:	1b9b      	subs	r3, r3, r6
 8007dfc:	60a3      	str	r3, [r4, #8]
 8007dfe:	6823      	ldr	r3, [r4, #0]
 8007e00:	4433      	add	r3, r6
 8007e02:	6023      	str	r3, [r4, #0]
 8007e04:	2000      	movs	r0, #0
 8007e06:	e7db      	b.n	8007dc0 <__ssputs_r+0x58>
 8007e08:	462a      	mov	r2, r5
 8007e0a:	f000 fcab 	bl	8008764 <_realloc_r>
 8007e0e:	4606      	mov	r6, r0
 8007e10:	2800      	cmp	r0, #0
 8007e12:	d1e1      	bne.n	8007dd8 <__ssputs_r+0x70>
 8007e14:	6921      	ldr	r1, [r4, #16]
 8007e16:	4650      	mov	r0, sl
 8007e18:	f7ff fb1c 	bl	8007454 <_free_r>
 8007e1c:	e7c7      	b.n	8007dae <__ssputs_r+0x46>
	...

08007e20 <_svfiprintf_r>:
 8007e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e24:	4698      	mov	r8, r3
 8007e26:	898b      	ldrh	r3, [r1, #12]
 8007e28:	061b      	lsls	r3, r3, #24
 8007e2a:	b09d      	sub	sp, #116	; 0x74
 8007e2c:	4607      	mov	r7, r0
 8007e2e:	460d      	mov	r5, r1
 8007e30:	4614      	mov	r4, r2
 8007e32:	d50e      	bpl.n	8007e52 <_svfiprintf_r+0x32>
 8007e34:	690b      	ldr	r3, [r1, #16]
 8007e36:	b963      	cbnz	r3, 8007e52 <_svfiprintf_r+0x32>
 8007e38:	2140      	movs	r1, #64	; 0x40
 8007e3a:	f7ff fb77 	bl	800752c <_malloc_r>
 8007e3e:	6028      	str	r0, [r5, #0]
 8007e40:	6128      	str	r0, [r5, #16]
 8007e42:	b920      	cbnz	r0, 8007e4e <_svfiprintf_r+0x2e>
 8007e44:	230c      	movs	r3, #12
 8007e46:	603b      	str	r3, [r7, #0]
 8007e48:	f04f 30ff 	mov.w	r0, #4294967295
 8007e4c:	e0d1      	b.n	8007ff2 <_svfiprintf_r+0x1d2>
 8007e4e:	2340      	movs	r3, #64	; 0x40
 8007e50:	616b      	str	r3, [r5, #20]
 8007e52:	2300      	movs	r3, #0
 8007e54:	9309      	str	r3, [sp, #36]	; 0x24
 8007e56:	2320      	movs	r3, #32
 8007e58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e60:	2330      	movs	r3, #48	; 0x30
 8007e62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800800c <_svfiprintf_r+0x1ec>
 8007e66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e6a:	f04f 0901 	mov.w	r9, #1
 8007e6e:	4623      	mov	r3, r4
 8007e70:	469a      	mov	sl, r3
 8007e72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e76:	b10a      	cbz	r2, 8007e7c <_svfiprintf_r+0x5c>
 8007e78:	2a25      	cmp	r2, #37	; 0x25
 8007e7a:	d1f9      	bne.n	8007e70 <_svfiprintf_r+0x50>
 8007e7c:	ebba 0b04 	subs.w	fp, sl, r4
 8007e80:	d00b      	beq.n	8007e9a <_svfiprintf_r+0x7a>
 8007e82:	465b      	mov	r3, fp
 8007e84:	4622      	mov	r2, r4
 8007e86:	4629      	mov	r1, r5
 8007e88:	4638      	mov	r0, r7
 8007e8a:	f7ff ff6d 	bl	8007d68 <__ssputs_r>
 8007e8e:	3001      	adds	r0, #1
 8007e90:	f000 80aa 	beq.w	8007fe8 <_svfiprintf_r+0x1c8>
 8007e94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e96:	445a      	add	r2, fp
 8007e98:	9209      	str	r2, [sp, #36]	; 0x24
 8007e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f000 80a2 	beq.w	8007fe8 <_svfiprintf_r+0x1c8>
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007eae:	f10a 0a01 	add.w	sl, sl, #1
 8007eb2:	9304      	str	r3, [sp, #16]
 8007eb4:	9307      	str	r3, [sp, #28]
 8007eb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007eba:	931a      	str	r3, [sp, #104]	; 0x68
 8007ebc:	4654      	mov	r4, sl
 8007ebe:	2205      	movs	r2, #5
 8007ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ec4:	4851      	ldr	r0, [pc, #324]	; (800800c <_svfiprintf_r+0x1ec>)
 8007ec6:	f7f8 f9a3 	bl	8000210 <memchr>
 8007eca:	9a04      	ldr	r2, [sp, #16]
 8007ecc:	b9d8      	cbnz	r0, 8007f06 <_svfiprintf_r+0xe6>
 8007ece:	06d0      	lsls	r0, r2, #27
 8007ed0:	bf44      	itt	mi
 8007ed2:	2320      	movmi	r3, #32
 8007ed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ed8:	0711      	lsls	r1, r2, #28
 8007eda:	bf44      	itt	mi
 8007edc:	232b      	movmi	r3, #43	; 0x2b
 8007ede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ee6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ee8:	d015      	beq.n	8007f16 <_svfiprintf_r+0xf6>
 8007eea:	9a07      	ldr	r2, [sp, #28]
 8007eec:	4654      	mov	r4, sl
 8007eee:	2000      	movs	r0, #0
 8007ef0:	f04f 0c0a 	mov.w	ip, #10
 8007ef4:	4621      	mov	r1, r4
 8007ef6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007efa:	3b30      	subs	r3, #48	; 0x30
 8007efc:	2b09      	cmp	r3, #9
 8007efe:	d94e      	bls.n	8007f9e <_svfiprintf_r+0x17e>
 8007f00:	b1b0      	cbz	r0, 8007f30 <_svfiprintf_r+0x110>
 8007f02:	9207      	str	r2, [sp, #28]
 8007f04:	e014      	b.n	8007f30 <_svfiprintf_r+0x110>
 8007f06:	eba0 0308 	sub.w	r3, r0, r8
 8007f0a:	fa09 f303 	lsl.w	r3, r9, r3
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	9304      	str	r3, [sp, #16]
 8007f12:	46a2      	mov	sl, r4
 8007f14:	e7d2      	b.n	8007ebc <_svfiprintf_r+0x9c>
 8007f16:	9b03      	ldr	r3, [sp, #12]
 8007f18:	1d19      	adds	r1, r3, #4
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	9103      	str	r1, [sp, #12]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	bfbb      	ittet	lt
 8007f22:	425b      	neglt	r3, r3
 8007f24:	f042 0202 	orrlt.w	r2, r2, #2
 8007f28:	9307      	strge	r3, [sp, #28]
 8007f2a:	9307      	strlt	r3, [sp, #28]
 8007f2c:	bfb8      	it	lt
 8007f2e:	9204      	strlt	r2, [sp, #16]
 8007f30:	7823      	ldrb	r3, [r4, #0]
 8007f32:	2b2e      	cmp	r3, #46	; 0x2e
 8007f34:	d10c      	bne.n	8007f50 <_svfiprintf_r+0x130>
 8007f36:	7863      	ldrb	r3, [r4, #1]
 8007f38:	2b2a      	cmp	r3, #42	; 0x2a
 8007f3a:	d135      	bne.n	8007fa8 <_svfiprintf_r+0x188>
 8007f3c:	9b03      	ldr	r3, [sp, #12]
 8007f3e:	1d1a      	adds	r2, r3, #4
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	9203      	str	r2, [sp, #12]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	bfb8      	it	lt
 8007f48:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f4c:	3402      	adds	r4, #2
 8007f4e:	9305      	str	r3, [sp, #20]
 8007f50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800801c <_svfiprintf_r+0x1fc>
 8007f54:	7821      	ldrb	r1, [r4, #0]
 8007f56:	2203      	movs	r2, #3
 8007f58:	4650      	mov	r0, sl
 8007f5a:	f7f8 f959 	bl	8000210 <memchr>
 8007f5e:	b140      	cbz	r0, 8007f72 <_svfiprintf_r+0x152>
 8007f60:	2340      	movs	r3, #64	; 0x40
 8007f62:	eba0 000a 	sub.w	r0, r0, sl
 8007f66:	fa03 f000 	lsl.w	r0, r3, r0
 8007f6a:	9b04      	ldr	r3, [sp, #16]
 8007f6c:	4303      	orrs	r3, r0
 8007f6e:	3401      	adds	r4, #1
 8007f70:	9304      	str	r3, [sp, #16]
 8007f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f76:	4826      	ldr	r0, [pc, #152]	; (8008010 <_svfiprintf_r+0x1f0>)
 8007f78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f7c:	2206      	movs	r2, #6
 8007f7e:	f7f8 f947 	bl	8000210 <memchr>
 8007f82:	2800      	cmp	r0, #0
 8007f84:	d038      	beq.n	8007ff8 <_svfiprintf_r+0x1d8>
 8007f86:	4b23      	ldr	r3, [pc, #140]	; (8008014 <_svfiprintf_r+0x1f4>)
 8007f88:	bb1b      	cbnz	r3, 8007fd2 <_svfiprintf_r+0x1b2>
 8007f8a:	9b03      	ldr	r3, [sp, #12]
 8007f8c:	3307      	adds	r3, #7
 8007f8e:	f023 0307 	bic.w	r3, r3, #7
 8007f92:	3308      	adds	r3, #8
 8007f94:	9303      	str	r3, [sp, #12]
 8007f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f98:	4433      	add	r3, r6
 8007f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8007f9c:	e767      	b.n	8007e6e <_svfiprintf_r+0x4e>
 8007f9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fa2:	460c      	mov	r4, r1
 8007fa4:	2001      	movs	r0, #1
 8007fa6:	e7a5      	b.n	8007ef4 <_svfiprintf_r+0xd4>
 8007fa8:	2300      	movs	r3, #0
 8007faa:	3401      	adds	r4, #1
 8007fac:	9305      	str	r3, [sp, #20]
 8007fae:	4619      	mov	r1, r3
 8007fb0:	f04f 0c0a 	mov.w	ip, #10
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fba:	3a30      	subs	r2, #48	; 0x30
 8007fbc:	2a09      	cmp	r2, #9
 8007fbe:	d903      	bls.n	8007fc8 <_svfiprintf_r+0x1a8>
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d0c5      	beq.n	8007f50 <_svfiprintf_r+0x130>
 8007fc4:	9105      	str	r1, [sp, #20]
 8007fc6:	e7c3      	b.n	8007f50 <_svfiprintf_r+0x130>
 8007fc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fcc:	4604      	mov	r4, r0
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e7f0      	b.n	8007fb4 <_svfiprintf_r+0x194>
 8007fd2:	ab03      	add	r3, sp, #12
 8007fd4:	9300      	str	r3, [sp, #0]
 8007fd6:	462a      	mov	r2, r5
 8007fd8:	4b0f      	ldr	r3, [pc, #60]	; (8008018 <_svfiprintf_r+0x1f8>)
 8007fda:	a904      	add	r1, sp, #16
 8007fdc:	4638      	mov	r0, r7
 8007fde:	f3af 8000 	nop.w
 8007fe2:	1c42      	adds	r2, r0, #1
 8007fe4:	4606      	mov	r6, r0
 8007fe6:	d1d6      	bne.n	8007f96 <_svfiprintf_r+0x176>
 8007fe8:	89ab      	ldrh	r3, [r5, #12]
 8007fea:	065b      	lsls	r3, r3, #25
 8007fec:	f53f af2c 	bmi.w	8007e48 <_svfiprintf_r+0x28>
 8007ff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ff2:	b01d      	add	sp, #116	; 0x74
 8007ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ff8:	ab03      	add	r3, sp, #12
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	462a      	mov	r2, r5
 8007ffe:	4b06      	ldr	r3, [pc, #24]	; (8008018 <_svfiprintf_r+0x1f8>)
 8008000:	a904      	add	r1, sp, #16
 8008002:	4638      	mov	r0, r7
 8008004:	f000 f9d4 	bl	80083b0 <_printf_i>
 8008008:	e7eb      	b.n	8007fe2 <_svfiprintf_r+0x1c2>
 800800a:	bf00      	nop
 800800c:	08008c74 	.word	0x08008c74
 8008010:	08008c7e 	.word	0x08008c7e
 8008014:	00000000 	.word	0x00000000
 8008018:	08007d69 	.word	0x08007d69
 800801c:	08008c7a 	.word	0x08008c7a

08008020 <__sfputc_r>:
 8008020:	6893      	ldr	r3, [r2, #8]
 8008022:	3b01      	subs	r3, #1
 8008024:	2b00      	cmp	r3, #0
 8008026:	b410      	push	{r4}
 8008028:	6093      	str	r3, [r2, #8]
 800802a:	da08      	bge.n	800803e <__sfputc_r+0x1e>
 800802c:	6994      	ldr	r4, [r2, #24]
 800802e:	42a3      	cmp	r3, r4
 8008030:	db01      	blt.n	8008036 <__sfputc_r+0x16>
 8008032:	290a      	cmp	r1, #10
 8008034:	d103      	bne.n	800803e <__sfputc_r+0x1e>
 8008036:	f85d 4b04 	ldr.w	r4, [sp], #4
 800803a:	f7ff bba9 	b.w	8007790 <__swbuf_r>
 800803e:	6813      	ldr	r3, [r2, #0]
 8008040:	1c58      	adds	r0, r3, #1
 8008042:	6010      	str	r0, [r2, #0]
 8008044:	7019      	strb	r1, [r3, #0]
 8008046:	4608      	mov	r0, r1
 8008048:	f85d 4b04 	ldr.w	r4, [sp], #4
 800804c:	4770      	bx	lr

0800804e <__sfputs_r>:
 800804e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008050:	4606      	mov	r6, r0
 8008052:	460f      	mov	r7, r1
 8008054:	4614      	mov	r4, r2
 8008056:	18d5      	adds	r5, r2, r3
 8008058:	42ac      	cmp	r4, r5
 800805a:	d101      	bne.n	8008060 <__sfputs_r+0x12>
 800805c:	2000      	movs	r0, #0
 800805e:	e007      	b.n	8008070 <__sfputs_r+0x22>
 8008060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008064:	463a      	mov	r2, r7
 8008066:	4630      	mov	r0, r6
 8008068:	f7ff ffda 	bl	8008020 <__sfputc_r>
 800806c:	1c43      	adds	r3, r0, #1
 800806e:	d1f3      	bne.n	8008058 <__sfputs_r+0xa>
 8008070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008074 <_vfiprintf_r>:
 8008074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008078:	460d      	mov	r5, r1
 800807a:	b09d      	sub	sp, #116	; 0x74
 800807c:	4614      	mov	r4, r2
 800807e:	4698      	mov	r8, r3
 8008080:	4606      	mov	r6, r0
 8008082:	b118      	cbz	r0, 800808c <_vfiprintf_r+0x18>
 8008084:	6983      	ldr	r3, [r0, #24]
 8008086:	b90b      	cbnz	r3, 800808c <_vfiprintf_r+0x18>
 8008088:	f7ff fd5c 	bl	8007b44 <__sinit>
 800808c:	4b89      	ldr	r3, [pc, #548]	; (80082b4 <_vfiprintf_r+0x240>)
 800808e:	429d      	cmp	r5, r3
 8008090:	d11b      	bne.n	80080ca <_vfiprintf_r+0x56>
 8008092:	6875      	ldr	r5, [r6, #4]
 8008094:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008096:	07d9      	lsls	r1, r3, #31
 8008098:	d405      	bmi.n	80080a6 <_vfiprintf_r+0x32>
 800809a:	89ab      	ldrh	r3, [r5, #12]
 800809c:	059a      	lsls	r2, r3, #22
 800809e:	d402      	bmi.n	80080a6 <_vfiprintf_r+0x32>
 80080a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080a2:	f7ff fded 	bl	8007c80 <__retarget_lock_acquire_recursive>
 80080a6:	89ab      	ldrh	r3, [r5, #12]
 80080a8:	071b      	lsls	r3, r3, #28
 80080aa:	d501      	bpl.n	80080b0 <_vfiprintf_r+0x3c>
 80080ac:	692b      	ldr	r3, [r5, #16]
 80080ae:	b9eb      	cbnz	r3, 80080ec <_vfiprintf_r+0x78>
 80080b0:	4629      	mov	r1, r5
 80080b2:	4630      	mov	r0, r6
 80080b4:	f7ff fbbe 	bl	8007834 <__swsetup_r>
 80080b8:	b1c0      	cbz	r0, 80080ec <_vfiprintf_r+0x78>
 80080ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080bc:	07dc      	lsls	r4, r3, #31
 80080be:	d50e      	bpl.n	80080de <_vfiprintf_r+0x6a>
 80080c0:	f04f 30ff 	mov.w	r0, #4294967295
 80080c4:	b01d      	add	sp, #116	; 0x74
 80080c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ca:	4b7b      	ldr	r3, [pc, #492]	; (80082b8 <_vfiprintf_r+0x244>)
 80080cc:	429d      	cmp	r5, r3
 80080ce:	d101      	bne.n	80080d4 <_vfiprintf_r+0x60>
 80080d0:	68b5      	ldr	r5, [r6, #8]
 80080d2:	e7df      	b.n	8008094 <_vfiprintf_r+0x20>
 80080d4:	4b79      	ldr	r3, [pc, #484]	; (80082bc <_vfiprintf_r+0x248>)
 80080d6:	429d      	cmp	r5, r3
 80080d8:	bf08      	it	eq
 80080da:	68f5      	ldreq	r5, [r6, #12]
 80080dc:	e7da      	b.n	8008094 <_vfiprintf_r+0x20>
 80080de:	89ab      	ldrh	r3, [r5, #12]
 80080e0:	0598      	lsls	r0, r3, #22
 80080e2:	d4ed      	bmi.n	80080c0 <_vfiprintf_r+0x4c>
 80080e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080e6:	f7ff fdcc 	bl	8007c82 <__retarget_lock_release_recursive>
 80080ea:	e7e9      	b.n	80080c0 <_vfiprintf_r+0x4c>
 80080ec:	2300      	movs	r3, #0
 80080ee:	9309      	str	r3, [sp, #36]	; 0x24
 80080f0:	2320      	movs	r3, #32
 80080f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80080fa:	2330      	movs	r3, #48	; 0x30
 80080fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80082c0 <_vfiprintf_r+0x24c>
 8008100:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008104:	f04f 0901 	mov.w	r9, #1
 8008108:	4623      	mov	r3, r4
 800810a:	469a      	mov	sl, r3
 800810c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008110:	b10a      	cbz	r2, 8008116 <_vfiprintf_r+0xa2>
 8008112:	2a25      	cmp	r2, #37	; 0x25
 8008114:	d1f9      	bne.n	800810a <_vfiprintf_r+0x96>
 8008116:	ebba 0b04 	subs.w	fp, sl, r4
 800811a:	d00b      	beq.n	8008134 <_vfiprintf_r+0xc0>
 800811c:	465b      	mov	r3, fp
 800811e:	4622      	mov	r2, r4
 8008120:	4629      	mov	r1, r5
 8008122:	4630      	mov	r0, r6
 8008124:	f7ff ff93 	bl	800804e <__sfputs_r>
 8008128:	3001      	adds	r0, #1
 800812a:	f000 80aa 	beq.w	8008282 <_vfiprintf_r+0x20e>
 800812e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008130:	445a      	add	r2, fp
 8008132:	9209      	str	r2, [sp, #36]	; 0x24
 8008134:	f89a 3000 	ldrb.w	r3, [sl]
 8008138:	2b00      	cmp	r3, #0
 800813a:	f000 80a2 	beq.w	8008282 <_vfiprintf_r+0x20e>
 800813e:	2300      	movs	r3, #0
 8008140:	f04f 32ff 	mov.w	r2, #4294967295
 8008144:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008148:	f10a 0a01 	add.w	sl, sl, #1
 800814c:	9304      	str	r3, [sp, #16]
 800814e:	9307      	str	r3, [sp, #28]
 8008150:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008154:	931a      	str	r3, [sp, #104]	; 0x68
 8008156:	4654      	mov	r4, sl
 8008158:	2205      	movs	r2, #5
 800815a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800815e:	4858      	ldr	r0, [pc, #352]	; (80082c0 <_vfiprintf_r+0x24c>)
 8008160:	f7f8 f856 	bl	8000210 <memchr>
 8008164:	9a04      	ldr	r2, [sp, #16]
 8008166:	b9d8      	cbnz	r0, 80081a0 <_vfiprintf_r+0x12c>
 8008168:	06d1      	lsls	r1, r2, #27
 800816a:	bf44      	itt	mi
 800816c:	2320      	movmi	r3, #32
 800816e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008172:	0713      	lsls	r3, r2, #28
 8008174:	bf44      	itt	mi
 8008176:	232b      	movmi	r3, #43	; 0x2b
 8008178:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800817c:	f89a 3000 	ldrb.w	r3, [sl]
 8008180:	2b2a      	cmp	r3, #42	; 0x2a
 8008182:	d015      	beq.n	80081b0 <_vfiprintf_r+0x13c>
 8008184:	9a07      	ldr	r2, [sp, #28]
 8008186:	4654      	mov	r4, sl
 8008188:	2000      	movs	r0, #0
 800818a:	f04f 0c0a 	mov.w	ip, #10
 800818e:	4621      	mov	r1, r4
 8008190:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008194:	3b30      	subs	r3, #48	; 0x30
 8008196:	2b09      	cmp	r3, #9
 8008198:	d94e      	bls.n	8008238 <_vfiprintf_r+0x1c4>
 800819a:	b1b0      	cbz	r0, 80081ca <_vfiprintf_r+0x156>
 800819c:	9207      	str	r2, [sp, #28]
 800819e:	e014      	b.n	80081ca <_vfiprintf_r+0x156>
 80081a0:	eba0 0308 	sub.w	r3, r0, r8
 80081a4:	fa09 f303 	lsl.w	r3, r9, r3
 80081a8:	4313      	orrs	r3, r2
 80081aa:	9304      	str	r3, [sp, #16]
 80081ac:	46a2      	mov	sl, r4
 80081ae:	e7d2      	b.n	8008156 <_vfiprintf_r+0xe2>
 80081b0:	9b03      	ldr	r3, [sp, #12]
 80081b2:	1d19      	adds	r1, r3, #4
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	9103      	str	r1, [sp, #12]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	bfbb      	ittet	lt
 80081bc:	425b      	neglt	r3, r3
 80081be:	f042 0202 	orrlt.w	r2, r2, #2
 80081c2:	9307      	strge	r3, [sp, #28]
 80081c4:	9307      	strlt	r3, [sp, #28]
 80081c6:	bfb8      	it	lt
 80081c8:	9204      	strlt	r2, [sp, #16]
 80081ca:	7823      	ldrb	r3, [r4, #0]
 80081cc:	2b2e      	cmp	r3, #46	; 0x2e
 80081ce:	d10c      	bne.n	80081ea <_vfiprintf_r+0x176>
 80081d0:	7863      	ldrb	r3, [r4, #1]
 80081d2:	2b2a      	cmp	r3, #42	; 0x2a
 80081d4:	d135      	bne.n	8008242 <_vfiprintf_r+0x1ce>
 80081d6:	9b03      	ldr	r3, [sp, #12]
 80081d8:	1d1a      	adds	r2, r3, #4
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	9203      	str	r2, [sp, #12]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	bfb8      	it	lt
 80081e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80081e6:	3402      	adds	r4, #2
 80081e8:	9305      	str	r3, [sp, #20]
 80081ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80082d0 <_vfiprintf_r+0x25c>
 80081ee:	7821      	ldrb	r1, [r4, #0]
 80081f0:	2203      	movs	r2, #3
 80081f2:	4650      	mov	r0, sl
 80081f4:	f7f8 f80c 	bl	8000210 <memchr>
 80081f8:	b140      	cbz	r0, 800820c <_vfiprintf_r+0x198>
 80081fa:	2340      	movs	r3, #64	; 0x40
 80081fc:	eba0 000a 	sub.w	r0, r0, sl
 8008200:	fa03 f000 	lsl.w	r0, r3, r0
 8008204:	9b04      	ldr	r3, [sp, #16]
 8008206:	4303      	orrs	r3, r0
 8008208:	3401      	adds	r4, #1
 800820a:	9304      	str	r3, [sp, #16]
 800820c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008210:	482c      	ldr	r0, [pc, #176]	; (80082c4 <_vfiprintf_r+0x250>)
 8008212:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008216:	2206      	movs	r2, #6
 8008218:	f7f7 fffa 	bl	8000210 <memchr>
 800821c:	2800      	cmp	r0, #0
 800821e:	d03f      	beq.n	80082a0 <_vfiprintf_r+0x22c>
 8008220:	4b29      	ldr	r3, [pc, #164]	; (80082c8 <_vfiprintf_r+0x254>)
 8008222:	bb1b      	cbnz	r3, 800826c <_vfiprintf_r+0x1f8>
 8008224:	9b03      	ldr	r3, [sp, #12]
 8008226:	3307      	adds	r3, #7
 8008228:	f023 0307 	bic.w	r3, r3, #7
 800822c:	3308      	adds	r3, #8
 800822e:	9303      	str	r3, [sp, #12]
 8008230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008232:	443b      	add	r3, r7
 8008234:	9309      	str	r3, [sp, #36]	; 0x24
 8008236:	e767      	b.n	8008108 <_vfiprintf_r+0x94>
 8008238:	fb0c 3202 	mla	r2, ip, r2, r3
 800823c:	460c      	mov	r4, r1
 800823e:	2001      	movs	r0, #1
 8008240:	e7a5      	b.n	800818e <_vfiprintf_r+0x11a>
 8008242:	2300      	movs	r3, #0
 8008244:	3401      	adds	r4, #1
 8008246:	9305      	str	r3, [sp, #20]
 8008248:	4619      	mov	r1, r3
 800824a:	f04f 0c0a 	mov.w	ip, #10
 800824e:	4620      	mov	r0, r4
 8008250:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008254:	3a30      	subs	r2, #48	; 0x30
 8008256:	2a09      	cmp	r2, #9
 8008258:	d903      	bls.n	8008262 <_vfiprintf_r+0x1ee>
 800825a:	2b00      	cmp	r3, #0
 800825c:	d0c5      	beq.n	80081ea <_vfiprintf_r+0x176>
 800825e:	9105      	str	r1, [sp, #20]
 8008260:	e7c3      	b.n	80081ea <_vfiprintf_r+0x176>
 8008262:	fb0c 2101 	mla	r1, ip, r1, r2
 8008266:	4604      	mov	r4, r0
 8008268:	2301      	movs	r3, #1
 800826a:	e7f0      	b.n	800824e <_vfiprintf_r+0x1da>
 800826c:	ab03      	add	r3, sp, #12
 800826e:	9300      	str	r3, [sp, #0]
 8008270:	462a      	mov	r2, r5
 8008272:	4b16      	ldr	r3, [pc, #88]	; (80082cc <_vfiprintf_r+0x258>)
 8008274:	a904      	add	r1, sp, #16
 8008276:	4630      	mov	r0, r6
 8008278:	f3af 8000 	nop.w
 800827c:	4607      	mov	r7, r0
 800827e:	1c78      	adds	r0, r7, #1
 8008280:	d1d6      	bne.n	8008230 <_vfiprintf_r+0x1bc>
 8008282:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008284:	07d9      	lsls	r1, r3, #31
 8008286:	d405      	bmi.n	8008294 <_vfiprintf_r+0x220>
 8008288:	89ab      	ldrh	r3, [r5, #12]
 800828a:	059a      	lsls	r2, r3, #22
 800828c:	d402      	bmi.n	8008294 <_vfiprintf_r+0x220>
 800828e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008290:	f7ff fcf7 	bl	8007c82 <__retarget_lock_release_recursive>
 8008294:	89ab      	ldrh	r3, [r5, #12]
 8008296:	065b      	lsls	r3, r3, #25
 8008298:	f53f af12 	bmi.w	80080c0 <_vfiprintf_r+0x4c>
 800829c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800829e:	e711      	b.n	80080c4 <_vfiprintf_r+0x50>
 80082a0:	ab03      	add	r3, sp, #12
 80082a2:	9300      	str	r3, [sp, #0]
 80082a4:	462a      	mov	r2, r5
 80082a6:	4b09      	ldr	r3, [pc, #36]	; (80082cc <_vfiprintf_r+0x258>)
 80082a8:	a904      	add	r1, sp, #16
 80082aa:	4630      	mov	r0, r6
 80082ac:	f000 f880 	bl	80083b0 <_printf_i>
 80082b0:	e7e4      	b.n	800827c <_vfiprintf_r+0x208>
 80082b2:	bf00      	nop
 80082b4:	08008c34 	.word	0x08008c34
 80082b8:	08008c54 	.word	0x08008c54
 80082bc:	08008c14 	.word	0x08008c14
 80082c0:	08008c74 	.word	0x08008c74
 80082c4:	08008c7e 	.word	0x08008c7e
 80082c8:	00000000 	.word	0x00000000
 80082cc:	0800804f 	.word	0x0800804f
 80082d0:	08008c7a 	.word	0x08008c7a

080082d4 <_printf_common>:
 80082d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082d8:	4616      	mov	r6, r2
 80082da:	4699      	mov	r9, r3
 80082dc:	688a      	ldr	r2, [r1, #8]
 80082de:	690b      	ldr	r3, [r1, #16]
 80082e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082e4:	4293      	cmp	r3, r2
 80082e6:	bfb8      	it	lt
 80082e8:	4613      	movlt	r3, r2
 80082ea:	6033      	str	r3, [r6, #0]
 80082ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082f0:	4607      	mov	r7, r0
 80082f2:	460c      	mov	r4, r1
 80082f4:	b10a      	cbz	r2, 80082fa <_printf_common+0x26>
 80082f6:	3301      	adds	r3, #1
 80082f8:	6033      	str	r3, [r6, #0]
 80082fa:	6823      	ldr	r3, [r4, #0]
 80082fc:	0699      	lsls	r1, r3, #26
 80082fe:	bf42      	ittt	mi
 8008300:	6833      	ldrmi	r3, [r6, #0]
 8008302:	3302      	addmi	r3, #2
 8008304:	6033      	strmi	r3, [r6, #0]
 8008306:	6825      	ldr	r5, [r4, #0]
 8008308:	f015 0506 	ands.w	r5, r5, #6
 800830c:	d106      	bne.n	800831c <_printf_common+0x48>
 800830e:	f104 0a19 	add.w	sl, r4, #25
 8008312:	68e3      	ldr	r3, [r4, #12]
 8008314:	6832      	ldr	r2, [r6, #0]
 8008316:	1a9b      	subs	r3, r3, r2
 8008318:	42ab      	cmp	r3, r5
 800831a:	dc26      	bgt.n	800836a <_printf_common+0x96>
 800831c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008320:	1e13      	subs	r3, r2, #0
 8008322:	6822      	ldr	r2, [r4, #0]
 8008324:	bf18      	it	ne
 8008326:	2301      	movne	r3, #1
 8008328:	0692      	lsls	r2, r2, #26
 800832a:	d42b      	bmi.n	8008384 <_printf_common+0xb0>
 800832c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008330:	4649      	mov	r1, r9
 8008332:	4638      	mov	r0, r7
 8008334:	47c0      	blx	r8
 8008336:	3001      	adds	r0, #1
 8008338:	d01e      	beq.n	8008378 <_printf_common+0xa4>
 800833a:	6823      	ldr	r3, [r4, #0]
 800833c:	68e5      	ldr	r5, [r4, #12]
 800833e:	6832      	ldr	r2, [r6, #0]
 8008340:	f003 0306 	and.w	r3, r3, #6
 8008344:	2b04      	cmp	r3, #4
 8008346:	bf08      	it	eq
 8008348:	1aad      	subeq	r5, r5, r2
 800834a:	68a3      	ldr	r3, [r4, #8]
 800834c:	6922      	ldr	r2, [r4, #16]
 800834e:	bf0c      	ite	eq
 8008350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008354:	2500      	movne	r5, #0
 8008356:	4293      	cmp	r3, r2
 8008358:	bfc4      	itt	gt
 800835a:	1a9b      	subgt	r3, r3, r2
 800835c:	18ed      	addgt	r5, r5, r3
 800835e:	2600      	movs	r6, #0
 8008360:	341a      	adds	r4, #26
 8008362:	42b5      	cmp	r5, r6
 8008364:	d11a      	bne.n	800839c <_printf_common+0xc8>
 8008366:	2000      	movs	r0, #0
 8008368:	e008      	b.n	800837c <_printf_common+0xa8>
 800836a:	2301      	movs	r3, #1
 800836c:	4652      	mov	r2, sl
 800836e:	4649      	mov	r1, r9
 8008370:	4638      	mov	r0, r7
 8008372:	47c0      	blx	r8
 8008374:	3001      	adds	r0, #1
 8008376:	d103      	bne.n	8008380 <_printf_common+0xac>
 8008378:	f04f 30ff 	mov.w	r0, #4294967295
 800837c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008380:	3501      	adds	r5, #1
 8008382:	e7c6      	b.n	8008312 <_printf_common+0x3e>
 8008384:	18e1      	adds	r1, r4, r3
 8008386:	1c5a      	adds	r2, r3, #1
 8008388:	2030      	movs	r0, #48	; 0x30
 800838a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800838e:	4422      	add	r2, r4
 8008390:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008394:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008398:	3302      	adds	r3, #2
 800839a:	e7c7      	b.n	800832c <_printf_common+0x58>
 800839c:	2301      	movs	r3, #1
 800839e:	4622      	mov	r2, r4
 80083a0:	4649      	mov	r1, r9
 80083a2:	4638      	mov	r0, r7
 80083a4:	47c0      	blx	r8
 80083a6:	3001      	adds	r0, #1
 80083a8:	d0e6      	beq.n	8008378 <_printf_common+0xa4>
 80083aa:	3601      	adds	r6, #1
 80083ac:	e7d9      	b.n	8008362 <_printf_common+0x8e>
	...

080083b0 <_printf_i>:
 80083b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083b4:	7e0f      	ldrb	r7, [r1, #24]
 80083b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80083b8:	2f78      	cmp	r7, #120	; 0x78
 80083ba:	4691      	mov	r9, r2
 80083bc:	4680      	mov	r8, r0
 80083be:	460c      	mov	r4, r1
 80083c0:	469a      	mov	sl, r3
 80083c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80083c6:	d807      	bhi.n	80083d8 <_printf_i+0x28>
 80083c8:	2f62      	cmp	r7, #98	; 0x62
 80083ca:	d80a      	bhi.n	80083e2 <_printf_i+0x32>
 80083cc:	2f00      	cmp	r7, #0
 80083ce:	f000 80d8 	beq.w	8008582 <_printf_i+0x1d2>
 80083d2:	2f58      	cmp	r7, #88	; 0x58
 80083d4:	f000 80a3 	beq.w	800851e <_printf_i+0x16e>
 80083d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083e0:	e03a      	b.n	8008458 <_printf_i+0xa8>
 80083e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083e6:	2b15      	cmp	r3, #21
 80083e8:	d8f6      	bhi.n	80083d8 <_printf_i+0x28>
 80083ea:	a101      	add	r1, pc, #4	; (adr r1, 80083f0 <_printf_i+0x40>)
 80083ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083f0:	08008449 	.word	0x08008449
 80083f4:	0800845d 	.word	0x0800845d
 80083f8:	080083d9 	.word	0x080083d9
 80083fc:	080083d9 	.word	0x080083d9
 8008400:	080083d9 	.word	0x080083d9
 8008404:	080083d9 	.word	0x080083d9
 8008408:	0800845d 	.word	0x0800845d
 800840c:	080083d9 	.word	0x080083d9
 8008410:	080083d9 	.word	0x080083d9
 8008414:	080083d9 	.word	0x080083d9
 8008418:	080083d9 	.word	0x080083d9
 800841c:	08008569 	.word	0x08008569
 8008420:	0800848d 	.word	0x0800848d
 8008424:	0800854b 	.word	0x0800854b
 8008428:	080083d9 	.word	0x080083d9
 800842c:	080083d9 	.word	0x080083d9
 8008430:	0800858b 	.word	0x0800858b
 8008434:	080083d9 	.word	0x080083d9
 8008438:	0800848d 	.word	0x0800848d
 800843c:	080083d9 	.word	0x080083d9
 8008440:	080083d9 	.word	0x080083d9
 8008444:	08008553 	.word	0x08008553
 8008448:	682b      	ldr	r3, [r5, #0]
 800844a:	1d1a      	adds	r2, r3, #4
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	602a      	str	r2, [r5, #0]
 8008450:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008454:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008458:	2301      	movs	r3, #1
 800845a:	e0a3      	b.n	80085a4 <_printf_i+0x1f4>
 800845c:	6820      	ldr	r0, [r4, #0]
 800845e:	6829      	ldr	r1, [r5, #0]
 8008460:	0606      	lsls	r6, r0, #24
 8008462:	f101 0304 	add.w	r3, r1, #4
 8008466:	d50a      	bpl.n	800847e <_printf_i+0xce>
 8008468:	680e      	ldr	r6, [r1, #0]
 800846a:	602b      	str	r3, [r5, #0]
 800846c:	2e00      	cmp	r6, #0
 800846e:	da03      	bge.n	8008478 <_printf_i+0xc8>
 8008470:	232d      	movs	r3, #45	; 0x2d
 8008472:	4276      	negs	r6, r6
 8008474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008478:	485e      	ldr	r0, [pc, #376]	; (80085f4 <_printf_i+0x244>)
 800847a:	230a      	movs	r3, #10
 800847c:	e019      	b.n	80084b2 <_printf_i+0x102>
 800847e:	680e      	ldr	r6, [r1, #0]
 8008480:	602b      	str	r3, [r5, #0]
 8008482:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008486:	bf18      	it	ne
 8008488:	b236      	sxthne	r6, r6
 800848a:	e7ef      	b.n	800846c <_printf_i+0xbc>
 800848c:	682b      	ldr	r3, [r5, #0]
 800848e:	6820      	ldr	r0, [r4, #0]
 8008490:	1d19      	adds	r1, r3, #4
 8008492:	6029      	str	r1, [r5, #0]
 8008494:	0601      	lsls	r1, r0, #24
 8008496:	d501      	bpl.n	800849c <_printf_i+0xec>
 8008498:	681e      	ldr	r6, [r3, #0]
 800849a:	e002      	b.n	80084a2 <_printf_i+0xf2>
 800849c:	0646      	lsls	r6, r0, #25
 800849e:	d5fb      	bpl.n	8008498 <_printf_i+0xe8>
 80084a0:	881e      	ldrh	r6, [r3, #0]
 80084a2:	4854      	ldr	r0, [pc, #336]	; (80085f4 <_printf_i+0x244>)
 80084a4:	2f6f      	cmp	r7, #111	; 0x6f
 80084a6:	bf0c      	ite	eq
 80084a8:	2308      	moveq	r3, #8
 80084aa:	230a      	movne	r3, #10
 80084ac:	2100      	movs	r1, #0
 80084ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084b2:	6865      	ldr	r5, [r4, #4]
 80084b4:	60a5      	str	r5, [r4, #8]
 80084b6:	2d00      	cmp	r5, #0
 80084b8:	bfa2      	ittt	ge
 80084ba:	6821      	ldrge	r1, [r4, #0]
 80084bc:	f021 0104 	bicge.w	r1, r1, #4
 80084c0:	6021      	strge	r1, [r4, #0]
 80084c2:	b90e      	cbnz	r6, 80084c8 <_printf_i+0x118>
 80084c4:	2d00      	cmp	r5, #0
 80084c6:	d04d      	beq.n	8008564 <_printf_i+0x1b4>
 80084c8:	4615      	mov	r5, r2
 80084ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80084ce:	fb03 6711 	mls	r7, r3, r1, r6
 80084d2:	5dc7      	ldrb	r7, [r0, r7]
 80084d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80084d8:	4637      	mov	r7, r6
 80084da:	42bb      	cmp	r3, r7
 80084dc:	460e      	mov	r6, r1
 80084de:	d9f4      	bls.n	80084ca <_printf_i+0x11a>
 80084e0:	2b08      	cmp	r3, #8
 80084e2:	d10b      	bne.n	80084fc <_printf_i+0x14c>
 80084e4:	6823      	ldr	r3, [r4, #0]
 80084e6:	07de      	lsls	r6, r3, #31
 80084e8:	d508      	bpl.n	80084fc <_printf_i+0x14c>
 80084ea:	6923      	ldr	r3, [r4, #16]
 80084ec:	6861      	ldr	r1, [r4, #4]
 80084ee:	4299      	cmp	r1, r3
 80084f0:	bfde      	ittt	le
 80084f2:	2330      	movle	r3, #48	; 0x30
 80084f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80084f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80084fc:	1b52      	subs	r2, r2, r5
 80084fe:	6122      	str	r2, [r4, #16]
 8008500:	f8cd a000 	str.w	sl, [sp]
 8008504:	464b      	mov	r3, r9
 8008506:	aa03      	add	r2, sp, #12
 8008508:	4621      	mov	r1, r4
 800850a:	4640      	mov	r0, r8
 800850c:	f7ff fee2 	bl	80082d4 <_printf_common>
 8008510:	3001      	adds	r0, #1
 8008512:	d14c      	bne.n	80085ae <_printf_i+0x1fe>
 8008514:	f04f 30ff 	mov.w	r0, #4294967295
 8008518:	b004      	add	sp, #16
 800851a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800851e:	4835      	ldr	r0, [pc, #212]	; (80085f4 <_printf_i+0x244>)
 8008520:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008524:	6829      	ldr	r1, [r5, #0]
 8008526:	6823      	ldr	r3, [r4, #0]
 8008528:	f851 6b04 	ldr.w	r6, [r1], #4
 800852c:	6029      	str	r1, [r5, #0]
 800852e:	061d      	lsls	r5, r3, #24
 8008530:	d514      	bpl.n	800855c <_printf_i+0x1ac>
 8008532:	07df      	lsls	r7, r3, #31
 8008534:	bf44      	itt	mi
 8008536:	f043 0320 	orrmi.w	r3, r3, #32
 800853a:	6023      	strmi	r3, [r4, #0]
 800853c:	b91e      	cbnz	r6, 8008546 <_printf_i+0x196>
 800853e:	6823      	ldr	r3, [r4, #0]
 8008540:	f023 0320 	bic.w	r3, r3, #32
 8008544:	6023      	str	r3, [r4, #0]
 8008546:	2310      	movs	r3, #16
 8008548:	e7b0      	b.n	80084ac <_printf_i+0xfc>
 800854a:	6823      	ldr	r3, [r4, #0]
 800854c:	f043 0320 	orr.w	r3, r3, #32
 8008550:	6023      	str	r3, [r4, #0]
 8008552:	2378      	movs	r3, #120	; 0x78
 8008554:	4828      	ldr	r0, [pc, #160]	; (80085f8 <_printf_i+0x248>)
 8008556:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800855a:	e7e3      	b.n	8008524 <_printf_i+0x174>
 800855c:	0659      	lsls	r1, r3, #25
 800855e:	bf48      	it	mi
 8008560:	b2b6      	uxthmi	r6, r6
 8008562:	e7e6      	b.n	8008532 <_printf_i+0x182>
 8008564:	4615      	mov	r5, r2
 8008566:	e7bb      	b.n	80084e0 <_printf_i+0x130>
 8008568:	682b      	ldr	r3, [r5, #0]
 800856a:	6826      	ldr	r6, [r4, #0]
 800856c:	6961      	ldr	r1, [r4, #20]
 800856e:	1d18      	adds	r0, r3, #4
 8008570:	6028      	str	r0, [r5, #0]
 8008572:	0635      	lsls	r5, r6, #24
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	d501      	bpl.n	800857c <_printf_i+0x1cc>
 8008578:	6019      	str	r1, [r3, #0]
 800857a:	e002      	b.n	8008582 <_printf_i+0x1d2>
 800857c:	0670      	lsls	r0, r6, #25
 800857e:	d5fb      	bpl.n	8008578 <_printf_i+0x1c8>
 8008580:	8019      	strh	r1, [r3, #0]
 8008582:	2300      	movs	r3, #0
 8008584:	6123      	str	r3, [r4, #16]
 8008586:	4615      	mov	r5, r2
 8008588:	e7ba      	b.n	8008500 <_printf_i+0x150>
 800858a:	682b      	ldr	r3, [r5, #0]
 800858c:	1d1a      	adds	r2, r3, #4
 800858e:	602a      	str	r2, [r5, #0]
 8008590:	681d      	ldr	r5, [r3, #0]
 8008592:	6862      	ldr	r2, [r4, #4]
 8008594:	2100      	movs	r1, #0
 8008596:	4628      	mov	r0, r5
 8008598:	f7f7 fe3a 	bl	8000210 <memchr>
 800859c:	b108      	cbz	r0, 80085a2 <_printf_i+0x1f2>
 800859e:	1b40      	subs	r0, r0, r5
 80085a0:	6060      	str	r0, [r4, #4]
 80085a2:	6863      	ldr	r3, [r4, #4]
 80085a4:	6123      	str	r3, [r4, #16]
 80085a6:	2300      	movs	r3, #0
 80085a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085ac:	e7a8      	b.n	8008500 <_printf_i+0x150>
 80085ae:	6923      	ldr	r3, [r4, #16]
 80085b0:	462a      	mov	r2, r5
 80085b2:	4649      	mov	r1, r9
 80085b4:	4640      	mov	r0, r8
 80085b6:	47d0      	blx	sl
 80085b8:	3001      	adds	r0, #1
 80085ba:	d0ab      	beq.n	8008514 <_printf_i+0x164>
 80085bc:	6823      	ldr	r3, [r4, #0]
 80085be:	079b      	lsls	r3, r3, #30
 80085c0:	d413      	bmi.n	80085ea <_printf_i+0x23a>
 80085c2:	68e0      	ldr	r0, [r4, #12]
 80085c4:	9b03      	ldr	r3, [sp, #12]
 80085c6:	4298      	cmp	r0, r3
 80085c8:	bfb8      	it	lt
 80085ca:	4618      	movlt	r0, r3
 80085cc:	e7a4      	b.n	8008518 <_printf_i+0x168>
 80085ce:	2301      	movs	r3, #1
 80085d0:	4632      	mov	r2, r6
 80085d2:	4649      	mov	r1, r9
 80085d4:	4640      	mov	r0, r8
 80085d6:	47d0      	blx	sl
 80085d8:	3001      	adds	r0, #1
 80085da:	d09b      	beq.n	8008514 <_printf_i+0x164>
 80085dc:	3501      	adds	r5, #1
 80085de:	68e3      	ldr	r3, [r4, #12]
 80085e0:	9903      	ldr	r1, [sp, #12]
 80085e2:	1a5b      	subs	r3, r3, r1
 80085e4:	42ab      	cmp	r3, r5
 80085e6:	dcf2      	bgt.n	80085ce <_printf_i+0x21e>
 80085e8:	e7eb      	b.n	80085c2 <_printf_i+0x212>
 80085ea:	2500      	movs	r5, #0
 80085ec:	f104 0619 	add.w	r6, r4, #25
 80085f0:	e7f5      	b.n	80085de <_printf_i+0x22e>
 80085f2:	bf00      	nop
 80085f4:	08008c85 	.word	0x08008c85
 80085f8:	08008c96 	.word	0x08008c96

080085fc <__sread>:
 80085fc:	b510      	push	{r4, lr}
 80085fe:	460c      	mov	r4, r1
 8008600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008604:	f000 f8de 	bl	80087c4 <_read_r>
 8008608:	2800      	cmp	r0, #0
 800860a:	bfab      	itete	ge
 800860c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800860e:	89a3      	ldrhlt	r3, [r4, #12]
 8008610:	181b      	addge	r3, r3, r0
 8008612:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008616:	bfac      	ite	ge
 8008618:	6563      	strge	r3, [r4, #84]	; 0x54
 800861a:	81a3      	strhlt	r3, [r4, #12]
 800861c:	bd10      	pop	{r4, pc}

0800861e <__swrite>:
 800861e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008622:	461f      	mov	r7, r3
 8008624:	898b      	ldrh	r3, [r1, #12]
 8008626:	05db      	lsls	r3, r3, #23
 8008628:	4605      	mov	r5, r0
 800862a:	460c      	mov	r4, r1
 800862c:	4616      	mov	r6, r2
 800862e:	d505      	bpl.n	800863c <__swrite+0x1e>
 8008630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008634:	2302      	movs	r3, #2
 8008636:	2200      	movs	r2, #0
 8008638:	f000 f868 	bl	800870c <_lseek_r>
 800863c:	89a3      	ldrh	r3, [r4, #12]
 800863e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008642:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008646:	81a3      	strh	r3, [r4, #12]
 8008648:	4632      	mov	r2, r6
 800864a:	463b      	mov	r3, r7
 800864c:	4628      	mov	r0, r5
 800864e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008652:	f000 b817 	b.w	8008684 <_write_r>

08008656 <__sseek>:
 8008656:	b510      	push	{r4, lr}
 8008658:	460c      	mov	r4, r1
 800865a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800865e:	f000 f855 	bl	800870c <_lseek_r>
 8008662:	1c43      	adds	r3, r0, #1
 8008664:	89a3      	ldrh	r3, [r4, #12]
 8008666:	bf15      	itete	ne
 8008668:	6560      	strne	r0, [r4, #84]	; 0x54
 800866a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800866e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008672:	81a3      	strheq	r3, [r4, #12]
 8008674:	bf18      	it	ne
 8008676:	81a3      	strhne	r3, [r4, #12]
 8008678:	bd10      	pop	{r4, pc}

0800867a <__sclose>:
 800867a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800867e:	f000 b813 	b.w	80086a8 <_close_r>
	...

08008684 <_write_r>:
 8008684:	b538      	push	{r3, r4, r5, lr}
 8008686:	4d07      	ldr	r5, [pc, #28]	; (80086a4 <_write_r+0x20>)
 8008688:	4604      	mov	r4, r0
 800868a:	4608      	mov	r0, r1
 800868c:	4611      	mov	r1, r2
 800868e:	2200      	movs	r2, #0
 8008690:	602a      	str	r2, [r5, #0]
 8008692:	461a      	mov	r2, r3
 8008694:	f7fb fc67 	bl	8003f66 <_write>
 8008698:	1c43      	adds	r3, r0, #1
 800869a:	d102      	bne.n	80086a2 <_write_r+0x1e>
 800869c:	682b      	ldr	r3, [r5, #0]
 800869e:	b103      	cbz	r3, 80086a2 <_write_r+0x1e>
 80086a0:	6023      	str	r3, [r4, #0]
 80086a2:	bd38      	pop	{r3, r4, r5, pc}
 80086a4:	20000454 	.word	0x20000454

080086a8 <_close_r>:
 80086a8:	b538      	push	{r3, r4, r5, lr}
 80086aa:	4d06      	ldr	r5, [pc, #24]	; (80086c4 <_close_r+0x1c>)
 80086ac:	2300      	movs	r3, #0
 80086ae:	4604      	mov	r4, r0
 80086b0:	4608      	mov	r0, r1
 80086b2:	602b      	str	r3, [r5, #0]
 80086b4:	f7fb fc73 	bl	8003f9e <_close>
 80086b8:	1c43      	adds	r3, r0, #1
 80086ba:	d102      	bne.n	80086c2 <_close_r+0x1a>
 80086bc:	682b      	ldr	r3, [r5, #0]
 80086be:	b103      	cbz	r3, 80086c2 <_close_r+0x1a>
 80086c0:	6023      	str	r3, [r4, #0]
 80086c2:	bd38      	pop	{r3, r4, r5, pc}
 80086c4:	20000454 	.word	0x20000454

080086c8 <_fstat_r>:
 80086c8:	b538      	push	{r3, r4, r5, lr}
 80086ca:	4d07      	ldr	r5, [pc, #28]	; (80086e8 <_fstat_r+0x20>)
 80086cc:	2300      	movs	r3, #0
 80086ce:	4604      	mov	r4, r0
 80086d0:	4608      	mov	r0, r1
 80086d2:	4611      	mov	r1, r2
 80086d4:	602b      	str	r3, [r5, #0]
 80086d6:	f7fb fc6e 	bl	8003fb6 <_fstat>
 80086da:	1c43      	adds	r3, r0, #1
 80086dc:	d102      	bne.n	80086e4 <_fstat_r+0x1c>
 80086de:	682b      	ldr	r3, [r5, #0]
 80086e0:	b103      	cbz	r3, 80086e4 <_fstat_r+0x1c>
 80086e2:	6023      	str	r3, [r4, #0]
 80086e4:	bd38      	pop	{r3, r4, r5, pc}
 80086e6:	bf00      	nop
 80086e8:	20000454 	.word	0x20000454

080086ec <_isatty_r>:
 80086ec:	b538      	push	{r3, r4, r5, lr}
 80086ee:	4d06      	ldr	r5, [pc, #24]	; (8008708 <_isatty_r+0x1c>)
 80086f0:	2300      	movs	r3, #0
 80086f2:	4604      	mov	r4, r0
 80086f4:	4608      	mov	r0, r1
 80086f6:	602b      	str	r3, [r5, #0]
 80086f8:	f7fb fc6d 	bl	8003fd6 <_isatty>
 80086fc:	1c43      	adds	r3, r0, #1
 80086fe:	d102      	bne.n	8008706 <_isatty_r+0x1a>
 8008700:	682b      	ldr	r3, [r5, #0]
 8008702:	b103      	cbz	r3, 8008706 <_isatty_r+0x1a>
 8008704:	6023      	str	r3, [r4, #0]
 8008706:	bd38      	pop	{r3, r4, r5, pc}
 8008708:	20000454 	.word	0x20000454

0800870c <_lseek_r>:
 800870c:	b538      	push	{r3, r4, r5, lr}
 800870e:	4d07      	ldr	r5, [pc, #28]	; (800872c <_lseek_r+0x20>)
 8008710:	4604      	mov	r4, r0
 8008712:	4608      	mov	r0, r1
 8008714:	4611      	mov	r1, r2
 8008716:	2200      	movs	r2, #0
 8008718:	602a      	str	r2, [r5, #0]
 800871a:	461a      	mov	r2, r3
 800871c:	f7fb fc66 	bl	8003fec <_lseek>
 8008720:	1c43      	adds	r3, r0, #1
 8008722:	d102      	bne.n	800872a <_lseek_r+0x1e>
 8008724:	682b      	ldr	r3, [r5, #0]
 8008726:	b103      	cbz	r3, 800872a <_lseek_r+0x1e>
 8008728:	6023      	str	r3, [r4, #0]
 800872a:	bd38      	pop	{r3, r4, r5, pc}
 800872c:	20000454 	.word	0x20000454

08008730 <memmove>:
 8008730:	4288      	cmp	r0, r1
 8008732:	b510      	push	{r4, lr}
 8008734:	eb01 0402 	add.w	r4, r1, r2
 8008738:	d902      	bls.n	8008740 <memmove+0x10>
 800873a:	4284      	cmp	r4, r0
 800873c:	4623      	mov	r3, r4
 800873e:	d807      	bhi.n	8008750 <memmove+0x20>
 8008740:	1e43      	subs	r3, r0, #1
 8008742:	42a1      	cmp	r1, r4
 8008744:	d008      	beq.n	8008758 <memmove+0x28>
 8008746:	f811 2b01 	ldrb.w	r2, [r1], #1
 800874a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800874e:	e7f8      	b.n	8008742 <memmove+0x12>
 8008750:	4402      	add	r2, r0
 8008752:	4601      	mov	r1, r0
 8008754:	428a      	cmp	r2, r1
 8008756:	d100      	bne.n	800875a <memmove+0x2a>
 8008758:	bd10      	pop	{r4, pc}
 800875a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800875e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008762:	e7f7      	b.n	8008754 <memmove+0x24>

08008764 <_realloc_r>:
 8008764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008768:	4680      	mov	r8, r0
 800876a:	4614      	mov	r4, r2
 800876c:	460e      	mov	r6, r1
 800876e:	b921      	cbnz	r1, 800877a <_realloc_r+0x16>
 8008770:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008774:	4611      	mov	r1, r2
 8008776:	f7fe bed9 	b.w	800752c <_malloc_r>
 800877a:	b92a      	cbnz	r2, 8008788 <_realloc_r+0x24>
 800877c:	f7fe fe6a 	bl	8007454 <_free_r>
 8008780:	4625      	mov	r5, r4
 8008782:	4628      	mov	r0, r5
 8008784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008788:	f000 f82e 	bl	80087e8 <_malloc_usable_size_r>
 800878c:	4284      	cmp	r4, r0
 800878e:	4607      	mov	r7, r0
 8008790:	d802      	bhi.n	8008798 <_realloc_r+0x34>
 8008792:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008796:	d812      	bhi.n	80087be <_realloc_r+0x5a>
 8008798:	4621      	mov	r1, r4
 800879a:	4640      	mov	r0, r8
 800879c:	f7fe fec6 	bl	800752c <_malloc_r>
 80087a0:	4605      	mov	r5, r0
 80087a2:	2800      	cmp	r0, #0
 80087a4:	d0ed      	beq.n	8008782 <_realloc_r+0x1e>
 80087a6:	42bc      	cmp	r4, r7
 80087a8:	4622      	mov	r2, r4
 80087aa:	4631      	mov	r1, r6
 80087ac:	bf28      	it	cs
 80087ae:	463a      	movcs	r2, r7
 80087b0:	f7fe fe3a 	bl	8007428 <memcpy>
 80087b4:	4631      	mov	r1, r6
 80087b6:	4640      	mov	r0, r8
 80087b8:	f7fe fe4c 	bl	8007454 <_free_r>
 80087bc:	e7e1      	b.n	8008782 <_realloc_r+0x1e>
 80087be:	4635      	mov	r5, r6
 80087c0:	e7df      	b.n	8008782 <_realloc_r+0x1e>
	...

080087c4 <_read_r>:
 80087c4:	b538      	push	{r3, r4, r5, lr}
 80087c6:	4d07      	ldr	r5, [pc, #28]	; (80087e4 <_read_r+0x20>)
 80087c8:	4604      	mov	r4, r0
 80087ca:	4608      	mov	r0, r1
 80087cc:	4611      	mov	r1, r2
 80087ce:	2200      	movs	r2, #0
 80087d0:	602a      	str	r2, [r5, #0]
 80087d2:	461a      	mov	r2, r3
 80087d4:	f7fb fbaa 	bl	8003f2c <_read>
 80087d8:	1c43      	adds	r3, r0, #1
 80087da:	d102      	bne.n	80087e2 <_read_r+0x1e>
 80087dc:	682b      	ldr	r3, [r5, #0]
 80087de:	b103      	cbz	r3, 80087e2 <_read_r+0x1e>
 80087e0:	6023      	str	r3, [r4, #0]
 80087e2:	bd38      	pop	{r3, r4, r5, pc}
 80087e4:	20000454 	.word	0x20000454

080087e8 <_malloc_usable_size_r>:
 80087e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087ec:	1f18      	subs	r0, r3, #4
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	bfbc      	itt	lt
 80087f2:	580b      	ldrlt	r3, [r1, r0]
 80087f4:	18c0      	addlt	r0, r0, r3
 80087f6:	4770      	bx	lr

080087f8 <_init>:
 80087f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087fa:	bf00      	nop
 80087fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087fe:	bc08      	pop	{r3}
 8008800:	469e      	mov	lr, r3
 8008802:	4770      	bx	lr

08008804 <_fini>:
 8008804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008806:	bf00      	nop
 8008808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800880a:	bc08      	pop	{r3}
 800880c:	469e      	mov	lr, r3
 800880e:	4770      	bx	lr
